
Lab_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c0  080056c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c8  080056c8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080056d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000018  080056e8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080056e8  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a4c  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b4  00000000  00000000  00030a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00033b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fbf  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115e9  00000000  00000000  000578df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc75e  00000000  00000000  00068ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  00145678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005688 	.word	0x08005688

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08005688 	.word	0x08005688

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fde0 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f818 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9d8 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f9b6 	bl	8000888 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f87e 	bl	800061c <MX_ADC1_Init>
  MX_TIM6_Init();
 8000520:	f000 f952 	bl	80007c8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f986 	bl	8000834 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f8d8 	bl	80006dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <main+0x34>)
 800052e:	f003 f87f 	bl	8003630 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000532:	2108      	movs	r1, #8
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <main+0x38>)
 8000536:	f003 f945 	bl	80037c4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x32>
 800053c:	20000124 	.word	0x20000124
 8000540:	200000dc 	.word	0x200000dc

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2234      	movs	r2, #52	; 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 f890 	bl	8005678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a28      	ldr	r2, [pc, #160]	; (8000614 <SystemClock_Config+0xd0>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b23      	ldr	r3, [pc, #140]	; (8000618 <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemClock_Config+0xd4>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 150;
 80005b8:	2396      	movs	r3, #150	; 0x96
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fd41 	bl	8003054 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 fb4e 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f9e2 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000606:	f000 fb37 	bl	8000c78 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xb8>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000644:	2201      	movs	r2, #1
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800064a:	2200      	movs	r2, #0
 800064c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800065e:	4a1e      	ldr	r2, [pc, #120]	; (80006d8 <MX_ADC1_Init+0xbc>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800066a:	2202      	movs	r2, #2
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0xb4>)
 8000678:	2201      	movs	r2, #1
 800067a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	4814      	ldr	r0, [pc, #80]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800067e:	f000 fd99 	bl	80011b4 <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000688:	f000 faf6 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800068c:	230a      	movs	r3, #10
 800068e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000690:	2301      	movs	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_ADC1_Init+0xb4>)
 800069e:	f001 f815 	bl	80016cc <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 fae6 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0xb4>)
 80006ba:	f001 f807 	bl	80016cc <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c4:	f000 fad8 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000034 	.word	0x20000034
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_TIM2_Init+0xe8>)
 800070e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000712:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 749;
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000716:	f240 22ed 	movw	r2, #749	; 0x2ed
 800071a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_TIM2_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000724:	2263      	movs	r2, #99	; 0x63
 8000726:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_TIM2_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000734:	4823      	ldr	r0, [pc, #140]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000736:	f002 ff2b 	bl	8003590 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000740:	f000 fa9a 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	4619      	mov	r1, r3
 8000750:	481c      	ldr	r0, [pc, #112]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000752:	f003 fac9 	bl	8003ce8 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800075c:	f000 fa8c 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000762:	f002 ffd5 	bl	8003710 <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800076c:	f000 fa84 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4619      	mov	r1, r3
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_TIM2_Init+0xe8>)
 8000780:	f003 feb2 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800078a:	f000 fa75 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	; 0x60
 8000790:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2208      	movs	r2, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM2_Init+0xe8>)
 80007a6:	f003 f9dd 	bl	8003b64 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007b0:	f000 fa62 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM2_Init+0xe8>)
 80007b6:	f000 fb6b 	bl	8000e90 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3738      	adds	r7, #56	; 0x38
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000dc 	.word	0x200000dc

080007c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM6_Init+0x64>)
 80007d8:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_TIM6_Init+0x68>)
 80007da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 749;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_TIM6_Init+0x64>)
 80007de:	f240 22ed 	movw	r2, #749	; 0x2ed
 80007e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_TIM6_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_TIM6_Init+0x64>)
 80007ec:	2263      	movs	r2, #99	; 0x63
 80007ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_TIM6_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_TIM6_Init+0x64>)
 80007f8:	f002 feca 	bl	8003590 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000802:	f000 fa39 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM6_Init+0x64>)
 8000814:	f003 fe68 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 fa2b 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000124 	.word	0x20000124
 8000830:	40001000 	.word	0x40001000

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x48>)
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 900000;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x48>)
 8000840:	4a10      	ldr	r2, [pc, #64]	; (8000884 <MX_USART2_UART_Init+0x50>)
 8000842:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_USART2_UART_Init+0x48>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x48>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_USART2_UART_Init+0x48>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x48>)
 8000858:	220c      	movs	r2, #12
 800085a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_USART2_UART_Init+0x48>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x48>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_USART2_UART_Init+0x48>)
 800086a:	f003 fecd 	bl	8004608 <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000874:	f000 fa00 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000016c 	.word	0x2000016c
 8000880:	40004400 	.word	0x40004400
 8000884:	000dbba0 	.word	0x000dbba0

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2038      	movs	r0, #56	; 0x38
 80008b0:	f001 faa1 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b4:	2038      	movs	r0, #56	; 0x38
 80008b6:	f001 faba 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_GPIO_Init+0xb8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a26      	ldr	r2, [pc, #152]	; (8000980 <MX_GPIO_Init+0xb8>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <MX_GPIO_Init+0xb8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0xb8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <MX_GPIO_Init+0xb8>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_GPIO_Init+0xb8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_GPIO_Init+0xb8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <MX_GPIO_Init+0xb8>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_GPIO_Init+0xb8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_GPIO_Init+0xb8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <MX_GPIO_Init+0xb8>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_GPIO_Init+0xb8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0xbc>)
 8000956:	f002 f81b 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800095a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_GPIO_Init+0xbc>)
 8000974:	f001 fe78 	bl	8002668 <HAL_GPIO_Init>

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <send_telemetry>:

/* USER CODE BEGIN 4 */
void send_telemetry() {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
	struct msg new_msg;

	new_msg.header = 0xAAAA;
 800098e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000992:	80bb      	strh	r3, [r7, #4]
	new_msg.pot_motor_val = pot_motor;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <send_telemetry+0x4c>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	b21b      	sxth	r3, r3
 800099c:	80fb      	strh	r3, [r7, #6]
	new_msg.pot_control_val = pot_control;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <send_telemetry+0x50>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	813b      	strh	r3, [r7, #8]
	new_msg.err_val = error;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <send_telemetry+0x54>)
 80009aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ae:	817b      	strh	r3, [r7, #10]
	new_msg.out_val = output;
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <send_telemetry+0x58>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	81bb      	strh	r3, [r7, #12]
	new_msg.terminator = 0xBBBB;
 80009b8:	f64b 33bb 	movw	r3, #48059	; 0xbbbb
 80009bc:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart2, (uint8_t*)&new_msg, sizeof(struct msg), HAL_MAX_DELAY);
 80009be:	1d39      	adds	r1, r7, #4
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	220c      	movs	r2, #12
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <send_telemetry+0x5c>)
 80009c8:	f003 fe6b 	bl	80046a2 <HAL_UART_Transmit>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001b4 	.word	0x200001b4
 80009d8:	200001b6 	.word	0x200001b6
 80009dc:	200001b8 	.word	0x200001b8
 80009e0:	200001be 	.word	0x200001be
 80009e4:	2000016c 	.word	0x2000016c

080009e8 <constrain>:


float constrain(float value, float min, float max) {
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80009f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80009f6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min) return min;
 80009fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80009fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0a:	d501      	bpl.n	8000a10 <constrain+0x28>
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	e00b      	b.n	8000a28 <constrain+0x40>
    if (value > max) return max;
 8000a10:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a20:	dd01      	ble.n	8000a26 <constrain+0x3e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	e000      	b.n	8000a28 <constrain+0x40>
    return value;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <computePID>:


int computePID(float error, float kp, float ki, float kd, int min_out, int max_out) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	ed87 0a05 	vstr	s0, [r7, #20]
 8000a46:	edc7 0a04 	vstr	s1, [r7, #16]
 8000a4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8000a4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	integral = constrain(integral + abs(error) * ki, min_out, max_out);
 8000a56:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <computePID+0x130>)
 8000a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5c:	ee07 3a90 	vmov	s15, r3
 8000a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a6c:	ee17 3a90 	vmov	r3, s15
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bfb8      	it	lt
 8000a74:	425b      	neglt	r3, r3
 8000a76:	ee07 3a90 	vmov	s15, r3
 8000a7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	ee07 3a10 	vmov	s14, r3
 8000a90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	ee06 3a90 	vmov	s13, r3
 8000a9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000a9e:	eeb0 1a66 	vmov.f32	s2, s13
 8000aa2:	eef0 0a47 	vmov.f32	s1, s14
 8000aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aaa:	f7ff ff9d 	bl	80009e8 <constrain>
 8000aae:	eef0 7a40 	vmov.f32	s15, s0
 8000ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab6:	ee17 3a90 	vmov	r3, s15
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <computePID+0x130>)
 8000abe:	801a      	strh	r2, [r3, #0]
	float derivative = error - prev_error;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <computePID+0x134>)
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	ee07 3a90 	vmov	s15, r3
 8000aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ace:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ad6:	edc7 7a07 	vstr	s15, [r7, #28]
	float output = kp * abs(error) + integral + kd * derivative;
 8000ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae2:	ee17 3a90 	vmov	r3, s15
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <computePID+0x130>)
 8000afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b02:	ee07 3a90 	vmov	s15, r3
 8000b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b0e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1e:	edc7 7a06 	vstr	s15, [r7, #24]
	prev_error = error;
 8000b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b2a:	ee17 3a90 	vmov	r3, s15
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <computePID+0x134>)
 8000b32:	801a      	strh	r2, [r3, #0]

	return constrain(output, min_out, max_out);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	ee07 3a10 	vmov	s14, r3
 8000b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b48:	eeb0 1a47 	vmov.f32	s2, s14
 8000b4c:	eef0 0a67 	vmov.f32	s1, s15
 8000b50:	ed97 0a06 	vldr	s0, [r7, #24]
 8000b54:	f7ff ff48 	bl	80009e8 <constrain>
 8000b58:	eef0 7a40 	vmov.f32	s15, s0
 8000b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b60:	ee17 3a90 	vmov	r3, s15
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200001bc 	.word	0x200001bc
 8000b70:	200001ba 	.word	0x200001ba

08000b74 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d15a      	bne.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0xc8>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1, ADC_BUFFER_SIZE);
 8000b86:	2202      	movs	r2, #2
 8000b88:	492f      	ldr	r1, [pc, #188]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b8a:	4830      	ldr	r0, [pc, #192]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b8c:	f000 fc66 	bl	800145c <HAL_ADC_Start_DMA>

		pot_motor = adc1[0];
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b96:	801a      	strh	r2, [r3, #0]
		pot_control = adc1[1];
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b9a:	885a      	ldrh	r2, [r3, #2]
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b9e:	801a      	strh	r2, [r3, #0]

		error = pot_control - pot_motor;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bb4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, error < 0);
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	0bdb      	lsrs	r3, r3, #15
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4824      	ldr	r0, [pc, #144]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000bca:	f001 fee1 	bl	8002990 <HAL_GPIO_WritePin>

		if (abs(error) < 100) {
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bfb8      	it	lt
 8000bd8:	425b      	neglt	r3, r3
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2b63      	cmp	r3, #99	; 0x63
 8000bde:	d806      	bhi.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x7a>
			output = 0;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
			integral = 0;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	e01f      	b.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0xba>
		} else {
			output = computePID(error, Kp, Ki, Kd, OUT_MIN, OUT_MAX);
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bfe:	ed93 7a00 	vldr	s14, [r3]
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000c04:	edd3 6a00 	vldr	s13, [r3]
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000c0a:	ed93 6a00 	vldr	s12, [r3]
 8000c0e:	2163      	movs	r1, #99	; 0x63
 8000c10:	2000      	movs	r0, #0
 8000c12:	eef0 1a46 	vmov.f32	s3, s12
 8000c16:	eeb0 1a66 	vmov.f32	s2, s13
 8000c1a:	eef0 0a47 	vmov.f32	s1, s14
 8000c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c22:	f7ff ff0b 	bl	8000a3c <computePID>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000c2c:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, output);
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c

		send_telemetry();
 8000c38:	f7ff fea6 	bl	8000988 <send_telemetry>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40001000 	.word	0x40001000
 8000c48:	200001b0 	.word	0x200001b0
 8000c4c:	20000034 	.word	0x20000034
 8000c50:	200001b4 	.word	0x200001b4
 8000c54:	200001b6 	.word	0x200001b6
 8000c58:	200001b8 	.word	0x200001b8
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	200001be 	.word	0x200001be
 8000c64:	200001bc 	.word	0x200001bc
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	20000008 	.word	0x20000008
 8000c74:	200000dc 	.word	0x200000dc

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a3f      	ldr	r2, [pc, #252]	; (8000df0 <HAL_ADC_MspInit+0x11c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d178      	bne.n	8000de8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a3d      	ldr	r2, [pc, #244]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_ADC_MspInit+0x120>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <HAL_ADC_MspInit+0x124>)
 8000d5e:	f001 fc83 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4821      	ldr	r0, [pc, #132]	; (8000dfc <HAL_ADC_MspInit+0x128>)
 8000d76:	f001 fc77 	bl	8002668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_ADC_MspInit+0x130>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000dbe:	f001 f851 	bl	8001e64 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000dc8:	f7ff ff56 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_ADC_MspInit+0x12c>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2012      	movs	r0, #18
 8000dde:	f001 f80a 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000de2:	2012      	movs	r0, #18
 8000de4:	f001 f823 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40012000 	.word	0x40012000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	2000007c 	.word	0x2000007c
 8000e04:	40026410 	.word	0x40026410

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e18:	d116      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_TIM_Base_MspInit+0x80>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_TIM_Base_MspInit+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_TIM_Base_MspInit+0x80>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	201c      	movs	r0, #28
 8000e3c:	f000 ffdb 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e40:	201c      	movs	r0, #28
 8000e42:	f000 fff4 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e46:	e01a      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_TIM_Base_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d115      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_TIM_Base_MspInit+0x80>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_TIM_Base_MspInit+0x80>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0x80>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2036      	movs	r0, #54	; 0x36
 8000e74:	f000 ffbf 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e78:	2036      	movs	r0, #54	; 0x36
 8000e7a:	f000 ffd8 	bl	8001e2e <HAL_NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40001000 	.word	0x40001000

08000e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d11e      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <HAL_TIM_MspPostInit+0x6c>)
 8000eec:	f001 fbbc 	bl	8002668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <HAL_UART_MspInit+0x94>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d133      	bne.n	8000f8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_UART_MspInit+0x98>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x98>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0x98>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x98>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0x98>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_UART_MspInit+0x98>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <HAL_UART_MspInit+0x9c>)
 8000f76:	f001 fb77 	bl	8002668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2026      	movs	r0, #38	; 0x26
 8000f80:	f000 ff39 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f84:	2026      	movs	r0, #38	; 0x26
 8000f86:	f000 ff52 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f8c2 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <ADC_IRQHandler+0x10>)
 8000ffa:	f000 f91e 	bl	800123a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000034 	.word	0x20000034

08001008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <TIM2_IRQHandler+0x10>)
 800100e:	f002 fca1 	bl	8003954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000dc 	.word	0x200000dc

0800101c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <USART2_IRQHandler+0x10>)
 8001022:	f003 fbd1 	bl	80047c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000016c 	.word	0x2000016c

08001030 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM6_DAC_IRQHandler+0x10>)
 8001036:	f002 fc8d 	bl	8003954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000124 	.word	0x20000124

08001044 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA2_Stream0_IRQHandler+0x10>)
 800104a:	f001 f8a3 	bl	8002194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000007c 	.word	0x2000007c

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fac1 	bl	8005630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa2b 	bl	8000508 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80010c0:	080056d0 	.word	0x080056d0
  ldr r2, =_sbss
 80010c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010c8:	200001c4 	.word	0x200001c4

080010cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <CAN1_RX0_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 fe71 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fdbe 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fe89 	bl	8001e4a <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 fe51 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000014 	.word	0x20000014
 8001170:	20000010 	.word	0x20000010

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000014 	.word	0x20000014
 8001198:	200001c0 	.word	0x200001c0

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200001c0 	.word	0x200001c0

080011b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e033      	b.n	8001232 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fd7e 	bl	8000cd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d118      	bne.n	8001224 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011fa:	f023 0302 	bic.w	r3, r3, #2
 80011fe:	f043 0202 	orr.w	r2, r3, #2
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fb92 	bl	8001930 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
 8001222:	e001      	b.n	8001228 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d049      	beq.n	8001304 <HAL_ADC_IRQHandler+0xca>
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d046      	beq.n	8001304 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d12b      	bne.n	80012f4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d127      	bne.n	80012f4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d119      	bne.n	80012f4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0220 	bic.w	r2, r2, #32
 80012ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f9c1 	bl	800167c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f06f 0212 	mvn.w	r2, #18
 8001302:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d057      	beq.n	80013ca <HAL_ADC_IRQHandler+0x190>
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d054      	beq.n	80013ca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d139      	bne.n	80013ba <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12b      	bne.n	80013ba <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800136c:	2b00      	cmp	r3, #0
 800136e:	d124      	bne.n	80013ba <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11d      	bne.n	80013ba <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001382:	2b00      	cmp	r3, #0
 8001384:	d119      	bne.n	80013ba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001394:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fc36 	bl	8001c2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f06f 020c 	mvn.w	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d017      	beq.n	8001410 <HAL_ADC_IRQHandler+0x1d6>
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d014      	beq.n	8001410 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10d      	bne.n	8001410 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f94f 	bl	80016a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f06f 0201 	mvn.w	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800141e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_ADC_IRQHandler+0x218>
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d012      	beq.n	8001452 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f043 0202 	orr.w	r2, r3, #2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f06f 0220 	mvn.w	r2, #32
 8001440:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f938 	bl	80016b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0220 	mvn.w	r2, #32
 8001450:	601a      	str	r2, [r3, #0]
  }
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_ADC_Start_DMA+0x1e>
 8001476:	2302      	movs	r3, #2
 8001478:	e0e9      	b.n	800164e <HAL_ADC_Start_DMA+0x1f2>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b01      	cmp	r3, #1
 800148e:	d018      	beq.n	80014c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_ADC_Start_DMA+0x1fc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6d      	ldr	r2, [pc, #436]	; (800165c <HAL_ADC_Start_DMA+0x200>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0c9a      	lsrs	r2, r3, #18
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014b4:	e002      	b.n	80014bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d0:	d107      	bne.n	80014e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f040 80a1 	bne.w	8001634 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800151c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001530:	d106      	bne.n	8001540 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f023 0206 	bic.w	r2, r3, #6
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
 800153e:	e002      	b.n	8001546 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <HAL_ADC_Start_DMA+0x204>)
 8001550:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	4a43      	ldr	r2, [pc, #268]	; (8001664 <HAL_ADC_Start_DMA+0x208>)
 8001558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <HAL_ADC_Start_DMA+0x20c>)
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	4a41      	ldr	r2, [pc, #260]	; (800166c <HAL_ADC_Start_DMA+0x210>)
 8001568:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001572:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001582:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001592:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	334c      	adds	r3, #76	; 0x4c
 800159e:	4619      	mov	r1, r3
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f000 fd0c 	bl	8001fc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d12a      	bne.n	800160a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <HAL_ADC_Start_DMA+0x214>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d015      	beq.n	80015ea <HAL_ADC_Start_DMA+0x18e>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <HAL_ADC_Start_DMA+0x218>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_Start_DMA+0x178>
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_ADC_Start_DMA+0x204>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_ADC_Start_DMA+0x21c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d136      	bne.n	800164c <HAL_ADC_Start_DMA+0x1f0>
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_ADC_Start_DMA+0x204>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d130      	bne.n	800164c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d129      	bne.n	800164c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	e020      	b.n	800164c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_ADC_Start_DMA+0x214>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d11b      	bne.n	800164c <HAL_ADC_Start_DMA+0x1f0>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d114      	bne.n	800164c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	e00b      	b.n	800164c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f043 0210 	orr.w	r2, r3, #16
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000000c 	.word	0x2000000c
 800165c:	431bde83 	.word	0x431bde83
 8001660:	40012300 	.word	0x40012300
 8001664:	08001b29 	.word	0x08001b29
 8001668:	08001be3 	.word	0x08001be3
 800166c:	08001bff 	.word	0x08001bff
 8001670:	40012000 	.word	0x40012000
 8001674:	40012100 	.word	0x40012100
 8001678:	40012200 	.word	0x40012200

0800167c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e113      	b.n	8001910 <HAL_ADC_ConfigChannel+0x244>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d925      	bls.n	8001744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68d9      	ldr	r1, [r3, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43da      	mvns	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	4603      	mov	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	3b1e      	subs	r3, #30
 8001738:	409a      	lsls	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	e022      	b.n	800178a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6919      	ldr	r1, [r3, #16]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4403      	add	r3, r0
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d824      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	221f      	movs	r2, #31
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	400a      	ands	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b05      	subs	r3, #5
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
 80017da:	e04c      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d824      	bhi.n	800182e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b23      	subs	r3, #35	; 0x23
 80017f6:	221f      	movs	r2, #31
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43da      	mvns	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	400a      	ands	r2, r1
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b23      	subs	r3, #35	; 0x23
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
 800182c:	e023      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b41      	subs	r3, #65	; 0x41
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b41      	subs	r3, #65	; 0x41
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_ADC_ConfigChannel+0x250>)
 8001878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a28      	ldr	r2, [pc, #160]	; (8001920 <HAL_ADC_ConfigChannel+0x254>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d10f      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d10b      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_ADC_ConfigChannel+0x254>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12b      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x23a>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <HAL_ADC_ConfigChannel+0x258>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d003      	beq.n	80018c0 <HAL_ADC_ConfigChannel+0x1f4>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b11      	cmp	r3, #17
 80018be:	d122      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_ADC_ConfigChannel+0x258>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d111      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_ADC_ConfigChannel+0x25c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_ADC_ConfigChannel+0x260>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9a      	lsrs	r2, r3, #18
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018f8:	e002      	b.n	8001900 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40012300 	.word	0x40012300
 8001920:	40012000 	.word	0x40012000
 8001924:	10000012 	.word	0x10000012
 8001928:	2000000c 	.word	0x2000000c
 800192c:	431bde83 	.word	0x431bde83

08001930 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001938:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <ADC_Init+0x1f0>)
 800193a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	431a      	orrs	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	021a      	lsls	r2, r3, #8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <ADC_Init+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	e00f      	b.n	8001a2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0202 	bic.w	r2, r2, #2
 8001a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6899      	ldr	r1, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e1b      	ldrb	r3, [r3, #24]
 8001a48:	005a      	lsls	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01b      	beq.n	8001a94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6859      	ldr	r1, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	3b01      	subs	r3, #1
 8001a88:	035a      	lsls	r2, r3, #13
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	e007      	b.n	8001aa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	051a      	lsls	r2, r3, #20
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae6:	025a      	lsls	r2, r3, #9
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	029a      	lsls	r2, r3, #10
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40012300 	.word	0x40012300
 8001b24:	0f000001 	.word	0x0f000001

08001b28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d13c      	bne.n	8001bbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d12b      	bne.n	8001bb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d127      	bne.n	8001bb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d119      	bne.n	8001bb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0220 	bic.w	r2, r2, #32
 8001b8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff fd61 	bl	800167c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bba:	e00e      	b.n	8001bda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff fd75 	bl	80016b8 <HAL_ADC_ErrorCallback>
}
 8001bce:	e004      	b.n	8001bda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fd4d 	bl	8001690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f043 0204 	orr.w	r2, r3, #4
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f7ff fd4a 	bl	80016b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff f994 	bl	800119c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff f97b 	bl	800119c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fb01 	bl	8002570 <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fab8 	bl	8002504 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fa4a 	bl	80024a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207e:	f7ff f88d 	bl	800119c <HAL_GetTick>
 8002082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e052      	b.n	8002148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0216 	bic.w	r2, r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_DMA_Abort+0x62>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0208 	bic.w	r2, r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f2:	e013      	b.n	800211c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f4:	f7ff f852 	bl	800119c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d90c      	bls.n	800211c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e015      	b.n	8002148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e4      	bne.n	80020f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	223f      	movs	r2, #63	; 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00c      	b.n	8002188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2205      	movs	r2, #5
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a0:	4b8e      	ldr	r3, [pc, #568]	; (80023dc <HAL_DMA_IRQHandler+0x248>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a8e      	ldr	r2, [pc, #568]	; (80023e0 <HAL_DMA_IRQHandler+0x24c>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a9b      	lsrs	r3, r3, #10
 80021ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2208      	movs	r2, #8
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01a      	beq.n	8002200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2208      	movs	r2, #8
 80021ee:	409a      	lsls	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	2201      	movs	r2, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0202 	orr.w	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	2204      	movs	r2, #4
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d012      	beq.n	800226c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00b      	beq.n	800226c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2204      	movs	r2, #4
 800225a:	409a      	lsls	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2210      	movs	r2, #16
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d043      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03c      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2210      	movs	r2, #16
 8002290:	409a      	lsls	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d018      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d024      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
 80022c2:	e01f      	b.n	8002304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
 80022d4:	e016      	b.n	8002304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0208 	bic.w	r2, r2, #8
 80022f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2220      	movs	r2, #32
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 808f 	beq.w	8002434 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8087 	beq.w	8002434 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2220      	movs	r2, #32
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b05      	cmp	r3, #5
 800233c:	d136      	bne.n	80023ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0216 	bic.w	r2, r2, #22
 800234c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800235c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <HAL_DMA_IRQHandler+0x1da>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0208 	bic.w	r2, r2, #8
 800237c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	223f      	movs	r2, #63	; 0x3f
 8002384:	409a      	lsls	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d07e      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
        }
        return;
 80023aa:	e079      	b.n	80024a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01d      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10d      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d031      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e02c      	b.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
 80023da:	bf00      	nop
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e01e      	b.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10f      	bne.n	8002424 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0210 	bic.w	r2, r2, #16
 8002412:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	2b00      	cmp	r3, #0
 800243a:	d032      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d022      	beq.n	800248e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2205      	movs	r2, #5
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	3301      	adds	r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	d307      	bcc.n	800247c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f2      	bne.n	8002460 <HAL_DMA_IRQHandler+0x2cc>
 800247a:	e000      	b.n	800247e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800247c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
 800249e:	e000      	b.n	80024a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024a0:	bf00      	nop
    }
  }
}
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d108      	bne.n	80024e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024e6:	e007      	b.n	80024f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3b10      	subs	r3, #16
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <DMA_CalcBaseAndBitshift+0x64>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <DMA_CalcBaseAndBitshift+0x68>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d909      	bls.n	8002546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	659a      	str	r2, [r3, #88]	; 0x58
 8002544:	e007      	b.n	8002556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	aaaaaaab 	.word	0xaaaaaaab
 800256c:	080056b8 	.word	0x080056b8

08002570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11f      	bne.n	80025ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d856      	bhi.n	800263e <DMA_CheckFifoParam+0xce>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <DMA_CheckFifoParam+0x28>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025bb 	.word	0x080025bb
 80025a0:	080025a9 	.word	0x080025a9
 80025a4:	0800263f 	.word	0x0800263f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d046      	beq.n	8002642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e043      	b.n	8002642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c2:	d140      	bne.n	8002646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e03d      	b.n	8002646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d2:	d121      	bne.n	8002618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d837      	bhi.n	800264a <DMA_CheckFifoParam+0xda>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <DMA_CheckFifoParam+0x70>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	080025f7 	.word	0x080025f7
 80025e8:	080025f1 	.word	0x080025f1
 80025ec:	08002609 	.word	0x08002609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e030      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d025      	beq.n	800264e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002606:	e022      	b.n	800264e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002610:	d11f      	bne.n	8002652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002616:	e01c      	b.n	8002652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d903      	bls.n	8002626 <DMA_CheckFifoParam+0xb6>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d003      	beq.n	800262c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002624:	e018      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      break;
 800262a:	e015      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e00b      	b.n	8002656 <DMA_CheckFifoParam+0xe6>
      break;
 800263e:	bf00      	nop
 8002640:	e00a      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e008      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e006      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e004      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;   
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
    }
  } 
  
  return status; 
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e165      	b.n	8002950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	429a      	cmp	r2, r3
 800269e:	f040 8154 	bne.w	800294a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d005      	beq.n	80026ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d130      	bne.n	800271c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 0201 	and.w	r2, r3, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b03      	cmp	r3, #3
 8002726:	d017      	beq.n	8002758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d123      	bne.n	80027ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	08da      	lsrs	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3208      	adds	r2, #8
 800276c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80ae 	beq.w	800294a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_GPIO_Init+0x300>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <HAL_GPIO_Init+0x300>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <HAL_GPIO_Init+0x300>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280a:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_GPIO_Init+0x304>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_GPIO_Init+0x308>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x21a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x30c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x216>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x310>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x212>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_GPIO_Init+0x314>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x20e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <HAL_GPIO_Init+0x318>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x20a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <HAL_GPIO_Init+0x31c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x206>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a49      	ldr	r2, [pc, #292]	; (8002988 <HAL_GPIO_Init+0x320>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x202>
 8002866:	2306      	movs	r3, #6
 8002868:	e00c      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 800286a:	2307      	movs	r3, #7
 800286c:	e00a      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 800286e:	2305      	movs	r3, #5
 8002870:	e008      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 8002872:	2304      	movs	r3, #4
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 8002876:	2303      	movs	r3, #3
 8002878:	e004      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 800287a:	2302      	movs	r3, #2
 800287c:	e002      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x21c>
 8002882:	2300      	movs	r3, #0
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f002 0203 	and.w	r2, r2, #3
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	4093      	lsls	r3, r2
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002894:	4935      	ldr	r1, [pc, #212]	; (800296c <HAL_GPIO_Init+0x304>)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a2:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_GPIO_Init+0x324>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c6:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_GPIO_Init+0x324>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_GPIO_Init+0x324>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f0:	4a26      	ldr	r2, [pc, #152]	; (800298c <HAL_GPIO_Init+0x324>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_GPIO_Init+0x324>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291a:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_GPIO_Init+0x324>)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_GPIO_Init+0x324>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_GPIO_Init+0x324>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3301      	adds	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b0f      	cmp	r3, #15
 8002954:	f67f ae96 	bls.w	8002684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40013800 	.word	0x40013800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40021400 	.word	0x40021400
 8002988:	40021800 	.word	0x40021800
 800298c:	40013c00 	.word	0x40013c00

08002990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
 800299c:	4613      	mov	r3, r2
 800299e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a0:	787b      	ldrb	r3, [r7, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029ac:	e003      	b.n	80029b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	041a      	lsls	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	619a      	str	r2, [r3, #24]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fb72 	bl	800119c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fb6e 	bl	800119c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f855 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fad2 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	080056a0 	.word	0x080056a0
 8002b88:	2000000c 	.word	0x2000000c
 8002b8c:	20000010 	.word	0x20000010

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a9b      	lsrs	r3, r3, #10
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	080056b0 	.word	0x080056b0

08002bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bd4:	f7ff ffdc 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0b5b      	lsrs	r3, r3, #13
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	080056b0 	.word	0x080056b0

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b0ae      	sub	sp, #184	; 0xb8
 8002bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1e:	4bcb      	ldr	r3, [pc, #812]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	f200 8204 	bhi.w	8003034 <HAL_RCC_GetSysClockFreq+0x43c>
 8002c2c:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c69 	.word	0x08002c69
 8002c38:	08003035 	.word	0x08003035
 8002c3c:	08003035 	.word	0x08003035
 8002c40:	08003035 	.word	0x08003035
 8002c44:	08002c71 	.word	0x08002c71
 8002c48:	08003035 	.word	0x08003035
 8002c4c:	08003035 	.word	0x08003035
 8002c50:	08003035 	.word	0x08003035
 8002c54:	08002c79 	.word	0x08002c79
 8002c58:	08003035 	.word	0x08003035
 8002c5c:	08003035 	.word	0x08003035
 8002c60:	08003035 	.word	0x08003035
 8002c64:	08002e69 	.word	0x08002e69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4bb9      	ldr	r3, [pc, #740]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c6e:	e1e5      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c70:	4bb7      	ldr	r3, [pc, #732]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c76:	e1e1      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c78:	4bb4      	ldr	r3, [pc, #720]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c84:	4bb1      	ldr	r3, [pc, #708]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d071      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c90:	4bae      	ldr	r3, [pc, #696]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	462b      	mov	r3, r5
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	0159      	lsls	r1, r3, #5
 8002cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc8:	0150      	lsls	r0, r2, #5
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4621      	mov	r1, r4
 8002cd0:	1a51      	subs	r1, r2, r1
 8002cd2:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ce8:	4649      	mov	r1, r9
 8002cea:	018b      	lsls	r3, r1, #6
 8002cec:	4641      	mov	r1, r8
 8002cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	018a      	lsls	r2, r1, #6
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	1a51      	subs	r1, r2, r1
 8002cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d10:	4649      	mov	r1, r9
 8002d12:	00cb      	lsls	r3, r1, #3
 8002d14:	4641      	mov	r1, r8
 8002d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	00ca      	lsls	r2, r1, #3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	4622      	mov	r2, r4
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	eb42 0303 	adc.w	r3, r2, r3
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d40:	4629      	mov	r1, r5
 8002d42:	028b      	lsls	r3, r1, #10
 8002d44:	4621      	mov	r1, r4
 8002d46:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	028a      	lsls	r2, r1, #10
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d64:	f7fd fa4e 	bl	8000204 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d72:	e067      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d74:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d8e:	2300      	movs	r3, #0
 8002d90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d96:	4622      	mov	r2, r4
 8002d98:	462b      	mov	r3, r5
 8002d9a:	f04f 0000 	mov.w	r0, #0
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	0159      	lsls	r1, r3, #5
 8002da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da8:	0150      	lsls	r0, r2, #5
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4621      	mov	r1, r4
 8002db0:	1a51      	subs	r1, r2, r1
 8002db2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002db4:	4629      	mov	r1, r5
 8002db6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dc8:	4649      	mov	r1, r9
 8002dca:	018b      	lsls	r3, r1, #6
 8002dcc:	4641      	mov	r1, r8
 8002dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	018a      	lsls	r2, r1, #6
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ddc:	4649      	mov	r1, r9
 8002dde:	eb63 0b01 	sbc.w	fp, r3, r1
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002df2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df6:	4692      	mov	sl, r2
 8002df8:	469b      	mov	fp, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	eb1a 0303 	adds.w	r3, sl, r3
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	462b      	mov	r3, r5
 8002e04:	eb4b 0303 	adc.w	r3, fp, r3
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e16:	4629      	mov	r1, r5
 8002e18:	028b      	lsls	r3, r1, #10
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e20:	4621      	mov	r1, r4
 8002e22:	028a      	lsls	r2, r1, #10
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e30:	677a      	str	r2, [r7, #116]	; 0x74
 8002e32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e36:	f7fd f9e5 	bl	8000204 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e66:	e0e9      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e68:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d069      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e80:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	2200      	movs	r2, #0
 8002e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e92:	663b      	str	r3, [r7, #96]	; 0x60
 8002e94:	2300      	movs	r3, #0
 8002e96:	667b      	str	r3, [r7, #100]	; 0x64
 8002e98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	f04f 0000 	mov.w	r0, #0
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	0159      	lsls	r1, r3, #5
 8002eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eae:	0150      	lsls	r0, r2, #5
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	1a51      	subs	r1, r2, r1
 8002eb8:	61b9      	str	r1, [r7, #24]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ece:	4659      	mov	r1, fp
 8002ed0:	018b      	lsls	r3, r1, #6
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed8:	4651      	mov	r1, sl
 8002eda:	018a      	lsls	r2, r1, #6
 8002edc:	4651      	mov	r1, sl
 8002ede:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee2:	4659      	mov	r1, fp
 8002ee4:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efc:	4690      	mov	r8, r2
 8002efe:	4699      	mov	r9, r3
 8002f00:	4623      	mov	r3, r4
 8002f02:	eb18 0303 	adds.w	r3, r8, r3
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	462b      	mov	r3, r5
 8002f0a:	eb49 0303 	adc.w	r3, r9, r3
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	028b      	lsls	r3, r1, #10
 8002f20:	4621      	mov	r1, r4
 8002f22:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f26:	4621      	mov	r1, r4
 8002f28:	028a      	lsls	r2, r1, #10
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f32:	2200      	movs	r2, #0
 8002f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f3c:	f7fd f962 	bl	8000204 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f4a:	e063      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x41c>
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCC_GetSysClockFreq+0x454>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4611      	mov	r1, r2
 8002f60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f64:	653b      	str	r3, [r7, #80]	; 0x50
 8002f66:	2300      	movs	r3, #0
 8002f68:	657b      	str	r3, [r7, #84]	; 0x54
 8002f6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f6e:	4642      	mov	r2, r8
 8002f70:	464b      	mov	r3, r9
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f80:	0150      	lsls	r0, r2, #5
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4641      	mov	r1, r8
 8002f88:	1a51      	subs	r1, r2, r1
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002faa:	4651      	mov	r1, sl
 8002fac:	018a      	lsls	r2, r1, #6
 8002fae:	4651      	mov	r1, sl
 8002fb0:	1a54      	subs	r4, r2, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	eb63 0501 	sbc.w	r5, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	eb45 0303 	adc.w	r3, r5, r3
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	028b      	lsls	r3, r1, #10
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	028a      	lsls	r2, r1, #10
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003000:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003006:	f7fd f8fd 	bl	8000204 <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4613      	mov	r3, r2
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_GetSysClockFreq+0x454>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0f1b      	lsrs	r3, r3, #28
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003032:	e003      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_GetSysClockFreq+0x458>)
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800303a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003040:	4618      	mov	r0, r3
 8003042:	37b8      	adds	r7, #184	; 0xb8
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	00f42400 	.word	0x00f42400

08003054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e28d      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8083 	beq.w	800317a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003074:	4b94      	ldr	r3, [pc, #592]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d019      	beq.n	80030b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003080:	4b91      	ldr	r3, [pc, #580]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003088:	2b08      	cmp	r3, #8
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800308c:	4b8e      	ldr	r3, [pc, #568]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003098:	d00c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309a:	4b8b      	ldr	r3, [pc, #556]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d112      	bne.n	80030cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b2:	d10b      	bne.n	80030cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	4b84      	ldr	r3, [pc, #528]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d05b      	beq.n	8003178 <HAL_RCC_OscConfig+0x124>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d157      	bne.n	8003178 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e25a      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x90>
 80030d6:	4b7c      	ldr	r3, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7b      	ldr	r2, [pc, #492]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xcc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0xb4>
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a72      	ldr	r2, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xcc>
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6e      	ldr	r2, [pc, #440]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6b      	ldr	r2, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f838 	bl	800119c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe f834 	bl	800119c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e21f      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xdc>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f824 	bl	800119c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe f820 	bl	800119c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e20b      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x104>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06f      	beq.n	8003266 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003186:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003192:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800319a:	2b08      	cmp	r3, #8
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x186>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1d3      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x278>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fd ffcd 	bl	800119c <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7fd ffc9 	bl	800119c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1b4      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x278>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd ffac 	bl	800119c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fd ffa8 	bl	800119c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e193      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x27c>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd ff8c 	bl	800119c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fd ff88 	bl	800119c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e173      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x234>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd ff75 	bl	800119c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fd ff71 	bl	800119c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e15c      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b8a      	ldr	r3, [pc, #552]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b83      	ldr	r3, [pc, #524]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a7e      	ldr	r2, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b79      	ldr	r3, [pc, #484]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fd ff31 	bl	800119c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fd ff2d 	bl	800119c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e118      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x31e>
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x358>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x340>
 800337a:	4b61      	ldr	r3, [pc, #388]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a60      	ldr	r2, [pc, #384]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x358>
 8003394:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a59      	ldr	r2, [pc, #356]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a56      	ldr	r2, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fef2 	bl	800119c <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fd feee 	bl	800119c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0d7      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x368>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fd fedc 	bl	800119c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fd fed8 	bl	800119c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0c1      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80ad 	beq.w	8003580 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d060      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d145      	bne.n	80034c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <HAL_RCC_OscConfig+0x4b4>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd feac 	bl	800119c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fd fea8 	bl	800119c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e093      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	071b      	lsls	r3, r3, #28
 8003492:	491b      	ldr	r1, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4b4>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd fe7d 	bl	800119c <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fd fe79 	bl	800119c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e064      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x452>
 80034c4:	e05c      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x4b4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fd fe66 	bl	800119c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd fe62 	bl	800119c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e04d      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x480>
 80034f2:	e045      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e040      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000
 8003508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <HAL_RCC_OscConfig+0x538>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d030      	beq.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d129      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d122      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d119      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d10f      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e041      	b.n	8003626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fc26 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fc7a 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04e      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d01d      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_TIM_Base_Start_IT+0xd0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_Base_Start_IT+0xd4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_TIM_Base_Start_IT+0xd8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_Base_Start_IT+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d111      	bne.n	80036d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d010      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	e007      	b.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40010400 	.word	0x40010400
 8003708:	40014000 	.word	0x40014000
 800370c:	40001800 	.word	0x40001800

08003710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e041      	b.n	80037a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f839 	bl	80037ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 fbba 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <HAL_TIM_PWM_Start+0x24>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e022      	b.n	800382e <HAL_TIM_PWM_Start+0x6a>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d109      	bne.n	8003802 <HAL_TIM_PWM_Start+0x3e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e015      	b.n	800382e <HAL_TIM_PWM_Start+0x6a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d109      	bne.n	800381c <HAL_TIM_PWM_Start+0x58>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e008      	b.n	800382e <HAL_TIM_PWM_Start+0x6a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07c      	b.n	8003930 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Start+0x82>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	e013      	b.n	800386e <HAL_TIM_PWM_Start+0xaa>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start+0x92>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	e00b      	b.n	800386e <HAL_TIM_PWM_Start+0xaa>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start+0xa2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003864:	e003      	b.n	800386e <HAL_TIM_PWM_Start+0xaa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2201      	movs	r2, #1
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fe10 	bl	800449c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <HAL_TIM_PWM_Start+0x174>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_TIM_PWM_Start+0xcc>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2c      	ldr	r2, [pc, #176]	; (800393c <HAL_TIM_PWM_Start+0x178>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_TIM_PWM_Start+0xd0>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_TIM_PWM_Start+0xd2>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_TIM_PWM_Start+0x174>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d01d      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <HAL_TIM_PWM_Start+0x17c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_TIM_PWM_Start+0x180>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_TIM_PWM_Start+0x184>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIM_PWM_Start+0x178>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIM_PWM_Start+0x188>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_PWM_Start+0x136>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <HAL_TIM_PWM_Start+0x18c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d111      	bne.n	800391e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b06      	cmp	r3, #6
 800390a:	d010      	beq.n	800392e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	e007      	b.n	800392e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40014000 	.word	0x40014000
 8003950:	40001800 	.word	0x40001800

08003954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d122      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d11b      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0202 	mvn.w	r2, #2
 8003980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa77 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fa69 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fa7a 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d122      	bne.n	8003a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d11b      	bne.n	8003a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0204 	mvn.w	r2, #4
 80039d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa4d 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa3f 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa50 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0208 	mvn.w	r2, #8
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa23 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa15 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa26 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0210 	mvn.w	r2, #16
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2208      	movs	r2, #8
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9f9 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9eb 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9fc 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0201 	mvn.w	r2, #1
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd f84e 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fd78 	bl	80045f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f9c1 	bl	8003eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0220 	mvn.w	r2, #32
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fd42 	bl	80045e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e0ae      	b.n	8003ce0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	f200 809f 	bhi.w	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003bcd 	.word	0x08003bcd
 8003b9c:	08003cd1 	.word	0x08003cd1
 8003ba0:	08003cd1 	.word	0x08003cd1
 8003ba4:	08003cd1 	.word	0x08003cd1
 8003ba8:	08003c0d 	.word	0x08003c0d
 8003bac:	08003cd1 	.word	0x08003cd1
 8003bb0:	08003cd1 	.word	0x08003cd1
 8003bb4:	08003cd1 	.word	0x08003cd1
 8003bb8:	08003c4f 	.word	0x08003c4f
 8003bbc:	08003cd1 	.word	0x08003cd1
 8003bc0:	08003cd1 	.word	0x08003cd1
 8003bc4:	08003cd1 	.word	0x08003cd1
 8003bc8:	08003c8f 	.word	0x08003c8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fa18 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0208 	orr.w	r2, r2, #8
 8003be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0204 	bic.w	r2, r2, #4
 8003bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6999      	ldr	r1, [r3, #24]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	619a      	str	r2, [r3, #24]
      break;
 8003c0a:	e064      	b.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fa68 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6999      	ldr	r1, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	021a      	lsls	r2, r3, #8
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	619a      	str	r2, [r3, #24]
      break;
 8003c4c:	e043      	b.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fabd 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0208 	orr.w	r2, r2, #8
 8003c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0204 	bic.w	r2, r2, #4
 8003c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69d9      	ldr	r1, [r3, #28]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	61da      	str	r2, [r3, #28]
      break;
 8003c8c:	e023      	b.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fb11 	bl	80042bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	021a      	lsls	r2, r3, #8
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	61da      	str	r2, [r3, #28]
      break;
 8003cce:	e002      	b.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x1c>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0b4      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x186>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d03e      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0xd4>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	f200 8087 	bhi.w	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	f000 8086 	beq.w	8003e5a <HAL_TIM_ConfigClockSource+0x172>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d87f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d54:	2b70      	cmp	r3, #112	; 0x70
 8003d56:	d01a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xa6>
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d87b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d050      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x11a>
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d877      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d64:	2b50      	cmp	r3, #80	; 0x50
 8003d66:	d03c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d873      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d058      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x13a>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d86f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d064      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d86b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d060      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d867      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05c      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d05a      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	e062      	b.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f000 fb5d 	bl	800445c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
      break;
 8003dba:	e04f      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f000 fb46 	bl	800445c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dde:	609a      	str	r2, [r3, #8]
      break;
 8003de0:	e03c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 faba 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2150      	movs	r1, #80	; 0x50
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fb13 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e02c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 fad9 	bl	80043c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2160      	movs	r1, #96	; 0x60
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fb03 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e01c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fa9a 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 faf3 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e00c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f000 faea 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e52:	e003      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d027      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d023      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d017      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <TIM_Base_SetConfig+0x128>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <TIM_Base_SetConfig+0x12c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <TIM_Base_SetConfig+0x130>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0x134>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <TIM_Base_SetConfig+0x138>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <TIM_Base_SetConfig+0x13c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0xf8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	40001800 	.word	0x40001800
 8004000:	40001c00 	.word	0x40001c00
 8004004:	40002000 	.word	0x40002000

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <TIM_OC1_SetConfig+0xd8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0x64>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0308 	bic.w	r3, r3, #8
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <TIM_OC1_SetConfig+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC1_SetConfig+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a17      	ldr	r2, [pc, #92]	; (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x94>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x66>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC3_SetConfig+0x92>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d113      	bne.n	800428e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <TIM_OC4_SetConfig+0xa4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x68>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <TIM_OC4_SetConfig+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	f043 0307 	orr.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e05a      	b.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d01d      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10c      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40001800 	.word	0x40001800

080045e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03f      	b.n	800469a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fc66 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fd7b 	bl	8005148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b08a      	sub	sp, #40	; 0x28
 80046a6:	af02      	add	r7, sp, #8
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d17c      	bne.n	80047bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_UART_Transmit+0x2c>
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e075      	b.n	80047be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Transmit+0x3e>
 80046dc:	2302      	movs	r3, #2
 80046de:	e06e      	b.n	80047be <HAL_UART_Transmit+0x11c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2221      	movs	r2, #33	; 0x21
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046f6:	f7fc fd51 	bl	800119c <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d108      	bne.n	8004724 <HAL_UART_Transmit+0x82>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e003      	b.n	800472c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004734:	e02a      	b.n	800478c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 faf9 	bl	8004d38 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e036      	b.n	80047be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e007      	b.n	800477e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1cf      	bne.n	8004736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2140      	movs	r1, #64	; 0x40
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fac9 	bl	8004d38 <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b0ba      	sub	sp, #232	; 0xe8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_UART_IRQHandler+0x66>
 800481a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fbd3 	bl	8004fd2 <UART_Receive_IT>
      return;
 800482c:	e256      	b.n	8004cdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800482e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80de 	beq.w	80049f4 <HAL_UART_IRQHandler+0x22c>
 8004838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004848:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80d1 	beq.w	80049f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <HAL_UART_IRQHandler+0xae>
 800485e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xd2>
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_UART_IRQHandler+0xf6>
 80048a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d011      	beq.n	80048ee <HAL_UART_IRQHandler+0x126>
 80048ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0208 	orr.w	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 81ed 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_UART_IRQHandler+0x14e>
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb5e 	bl	8004fd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <HAL_UART_IRQHandler+0x17a>
 800493a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04f      	beq.n	80049e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa66 	bl	8004e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d141      	bne.n	80049da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3314      	adds	r3, #20
 800495c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800496c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800498e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800499a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1d9      	bne.n	8004956 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d013      	beq.n	80049d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	4a7d      	ldr	r2, [pc, #500]	; (8004ba4 <HAL_UART_IRQHandler+0x3dc>)
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd fbca 	bl	8002150 <HAL_DMA_Abort_IT>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049cc:	4610      	mov	r0, r2
 80049ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	e00e      	b.n	80049f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f99a 	bl	8004d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	e00a      	b.n	80049f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f996 	bl	8004d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	e006      	b.n	80049f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f992 	bl	8004d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049ee:	e170      	b.n	8004cd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	bf00      	nop
    return;
 80049f2:	e16e      	b.n	8004cd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 814a 	bne.w	8004c92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8143 	beq.w	8004c92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 813c 	beq.w	8004c92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	f040 80b4 	bne.w	8004ba8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8140 	beq.w	8004cd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	f080 8139 	bcs.w	8004cd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	f000 8088 	beq.w	8004b8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1d9      	bne.n	8004a7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004aea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004aee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e1      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e3      	bne.n	8004b02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5a:	f023 0310 	bic.w	r3, r3, #16
 8004b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e3      	bne.n	8004b48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fa73 	bl	8002070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8c0 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ba0:	e099      	b.n	8004cd6 <HAL_UART_IRQHandler+0x50e>
 8004ba2:	bf00      	nop
 8004ba4:	08004edb 	.word	0x08004edb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 808b 	beq.w	8004cda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8086 	beq.w	8004cda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8004bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e3      	bne.n	8004bce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	623b      	str	r3, [r7, #32]
   return(result);
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e3      	bne.n	8004c06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0310 	bic.w	r3, r3, #16
 8004c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c70:	61fa      	str	r2, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e3      	bne.n	8004c4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f848 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c90:	e023      	b.n	8004cda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x4ea>
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f929 	bl	8004f02 <UART_Transmit_IT>
    return;
 8004cb0:	e014      	b.n	8004cdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <HAL_UART_IRQHandler+0x514>
 8004cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f969 	bl	8004fa2 <UART_EndTransmit_IT>
    return;
 8004cd0:	e004      	b.n	8004cdc <HAL_UART_IRQHandler+0x514>
    return;
 8004cd2:	bf00      	nop
 8004cd4:	e002      	b.n	8004cdc <HAL_UART_IRQHandler+0x514>
      return;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <HAL_UART_IRQHandler+0x514>
      return;
 8004cda:	bf00      	nop
  }
}
 8004cdc:	37e8      	adds	r7, #232	; 0xe8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop

08004ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b090      	sub	sp, #64	; 0x40
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d48:	e050      	b.n	8004dec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d04c      	beq.n	8004dec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d58:	f7fc fa20 	bl	800119c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d241      	bcs.n	8004dec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d88:	637a      	str	r2, [r7, #52]	; 0x34
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dbc:	623a      	str	r2, [r7, #32]
 8004dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	69f9      	ldr	r1, [r7, #28]
 8004dc2:	6a3a      	ldr	r2, [r7, #32]
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e5      	bne.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e00f      	b.n	8004e0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d09f      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3740      	adds	r7, #64	; 0x40
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b095      	sub	sp, #84	; 0x54
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e3c:	643a      	str	r2, [r7, #64]	; 0x40
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e5      	bne.n	8004e1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d119      	bne.n	8004ec0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0310 	bic.w	r3, r3, #16
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eac:	61ba      	str	r2, [r7, #24]
 8004eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ece:	bf00      	nop
 8004ed0:	3754      	adds	r7, #84	; 0x54
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff ff09 	bl	8004d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b21      	cmp	r3, #33	; 0x21
 8004f14:	d13e      	bne.n	8004f94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d114      	bne.n	8004f4a <UART_Transmit_IT+0x48>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d110      	bne.n	8004f4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	1c9a      	adds	r2, r3, #2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	621a      	str	r2, [r3, #32]
 8004f48:	e008      	b.n	8004f5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6211      	str	r1, [r2, #32]
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10f      	bne.n	8004f90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe8e 	bl	8004ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b08c      	sub	sp, #48	; 0x30
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b22      	cmp	r3, #34	; 0x22
 8004fe4:	f040 80ab 	bne.w	800513e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff0:	d117      	bne.n	8005022 <UART_Receive_IT+0x50>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d113      	bne.n	8005022 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005010:	b29a      	uxth	r2, r3
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	1c9a      	adds	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28
 8005020:	e026      	b.n	8005070 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005034:	d007      	beq.n	8005046 <UART_Receive_IT+0x74>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <UART_Receive_IT+0x82>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e008      	b.n	8005066 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005060:	b2da      	uxtb	r2, r3
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4619      	mov	r1, r3
 800507e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005080:	2b00      	cmp	r3, #0
 8005082:	d15a      	bne.n	800513a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0220 	bic.w	r2, r2, #32
 8005092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d135      	bne.n	8005130 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f023 0310 	bic.w	r3, r3, #16
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ea:	623a      	str	r2, [r7, #32]
 80050ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	69f9      	ldr	r1, [r7, #28]
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d10a      	bne.n	8005122 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fdf9 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
 800512e:	e002      	b.n	8005136 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fde1 	bl	8004cf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e002      	b.n	8005140 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e000      	b.n	8005140 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800513e:	2302      	movs	r3, #2
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	3730      	adds	r7, #48	; 0x30
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b0c0      	sub	sp, #256	; 0x100
 800514e:	af00      	add	r7, sp, #0
 8005150:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	68d9      	ldr	r1, [r3, #12]
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	ea40 0301 	orr.w	r3, r0, r1
 8005170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051a0:	f021 010c 	bic.w	r1, r1, #12
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ae:	430b      	orrs	r3, r1
 80051b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c2:	6999      	ldr	r1, [r3, #24]
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	ea40 0301 	orr.w	r3, r0, r1
 80051ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b8f      	ldr	r3, [pc, #572]	; (8005414 <UART_SetConfig+0x2cc>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d005      	beq.n	80051e8 <UART_SetConfig+0xa0>
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b8d      	ldr	r3, [pc, #564]	; (8005418 <UART_SetConfig+0x2d0>)
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d104      	bne.n	80051f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051e8:	f7fd fcf2 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 80051ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051f0:	e003      	b.n	80051fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051f2:	f7fd fcd9 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80051f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	f040 810c 	bne.w	8005420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800520c:	2200      	movs	r2, #0
 800520e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005212:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	1891      	adds	r1, r2, r2
 8005220:	65b9      	str	r1, [r7, #88]	; 0x58
 8005222:	415b      	adcs	r3, r3
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800522a:	4621      	mov	r1, r4
 800522c:	eb12 0801 	adds.w	r8, r2, r1
 8005230:	4629      	mov	r1, r5
 8005232:	eb43 0901 	adc.w	r9, r3, r1
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800524a:	4690      	mov	r8, r2
 800524c:	4699      	mov	r9, r3
 800524e:	4623      	mov	r3, r4
 8005250:	eb18 0303 	adds.w	r3, r8, r3
 8005254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005258:	462b      	mov	r3, r5
 800525a:	eb49 0303 	adc.w	r3, r9, r3
 800525e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800526e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005276:	460b      	mov	r3, r1
 8005278:	18db      	adds	r3, r3, r3
 800527a:	653b      	str	r3, [r7, #80]	; 0x50
 800527c:	4613      	mov	r3, r2
 800527e:	eb42 0303 	adc.w	r3, r2, r3
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
 8005284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800528c:	f7fa ffba 	bl	8000204 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <UART_SetConfig+0x2d4>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	011c      	lsls	r4, r3, #4
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052b8:	415b      	adcs	r3, r3
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052c0:	4641      	mov	r1, r8
 80052c2:	eb12 0a01 	adds.w	sl, r2, r1
 80052c6:	4649      	mov	r1, r9
 80052c8:	eb43 0b01 	adc.w	fp, r3, r1
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e0:	4692      	mov	sl, r2
 80052e2:	469b      	mov	fp, r3
 80052e4:	4643      	mov	r3, r8
 80052e6:	eb1a 0303 	adds.w	r3, sl, r3
 80052ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052ee:	464b      	mov	r3, r9
 80052f0:	eb4b 0303 	adc.w	r3, fp, r3
 80052f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005304:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800530c:	460b      	mov	r3, r1
 800530e:	18db      	adds	r3, r3, r3
 8005310:	643b      	str	r3, [r7, #64]	; 0x40
 8005312:	4613      	mov	r3, r2
 8005314:	eb42 0303 	adc.w	r3, r2, r3
 8005318:	647b      	str	r3, [r7, #68]	; 0x44
 800531a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800531e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005322:	f7fa ff6f 	bl	8000204 <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4611      	mov	r1, r2
 800532c:	4b3b      	ldr	r3, [pc, #236]	; (800541c <UART_SetConfig+0x2d4>)
 800532e:	fba3 2301 	umull	r2, r3, r3, r1
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2264      	movs	r2, #100	; 0x64
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	1acb      	subs	r3, r1, r3
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005342:	4b36      	ldr	r3, [pc, #216]	; (800541c <UART_SetConfig+0x2d4>)
 8005344:	fba3 2302 	umull	r2, r3, r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005350:	441c      	add	r4, r3
 8005352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800535c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	63b9      	str	r1, [r7, #56]	; 0x38
 800536c:	415b      	adcs	r3, r3
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005374:	4641      	mov	r1, r8
 8005376:	1851      	adds	r1, r2, r1
 8005378:	6339      	str	r1, [r7, #48]	; 0x30
 800537a:	4649      	mov	r1, r9
 800537c:	414b      	adcs	r3, r1
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800538c:	4659      	mov	r1, fp
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4651      	mov	r1, sl
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4642      	mov	r2, r8
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053a8:	464b      	mov	r3, r9
 80053aa:	460a      	mov	r2, r1
 80053ac:	eb42 0303 	adc.w	r3, r2, r3
 80053b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053c8:	460b      	mov	r3, r1
 80053ca:	18db      	adds	r3, r3, r3
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ce:	4613      	mov	r3, r2
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053de:	f7fa ff11 	bl	8000204 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <UART_SetConfig+0x2d4>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2164      	movs	r1, #100	; 0x64
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	3332      	adds	r3, #50	; 0x32
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <UART_SetConfig+0x2d4>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f003 0207 	and.w	r2, r3, #7
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4422      	add	r2, r4
 800540e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005410:	e105      	b.n	800561e <UART_SetConfig+0x4d6>
 8005412:	bf00      	nop
 8005414:	40011000 	.word	0x40011000
 8005418:	40011400 	.word	0x40011400
 800541c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005424:	2200      	movs	r2, #0
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800542a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800542e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005432:	4642      	mov	r2, r8
 8005434:	464b      	mov	r3, r9
 8005436:	1891      	adds	r1, r2, r2
 8005438:	6239      	str	r1, [r7, #32]
 800543a:	415b      	adcs	r3, r3
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
 800543e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005442:	4641      	mov	r1, r8
 8005444:	1854      	adds	r4, r2, r1
 8005446:	4649      	mov	r1, r9
 8005448:	eb43 0501 	adc.w	r5, r3, r1
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	00eb      	lsls	r3, r5, #3
 8005456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800545a:	00e2      	lsls	r2, r4, #3
 800545c:	4614      	mov	r4, r2
 800545e:	461d      	mov	r5, r3
 8005460:	4643      	mov	r3, r8
 8005462:	18e3      	adds	r3, r4, r3
 8005464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005468:	464b      	mov	r3, r9
 800546a:	eb45 0303 	adc.w	r3, r5, r3
 800546e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800547e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800548e:	4629      	mov	r1, r5
 8005490:	008b      	lsls	r3, r1, #2
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005498:	4621      	mov	r1, r4
 800549a:	008a      	lsls	r2, r1, #2
 800549c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054a0:	f7fa feb0 	bl	8000204 <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4b60      	ldr	r3, [pc, #384]	; (800562c <UART_SetConfig+0x4e4>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	011c      	lsls	r4, r3, #4
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	61b9      	str	r1, [r7, #24]
 80054cc:	415b      	adcs	r3, r3
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d4:	4641      	mov	r1, r8
 80054d6:	1851      	adds	r1, r2, r1
 80054d8:	6139      	str	r1, [r7, #16]
 80054da:	4649      	mov	r1, r9
 80054dc:	414b      	adcs	r3, r1
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ec:	4659      	mov	r1, fp
 80054ee:	00cb      	lsls	r3, r1, #3
 80054f0:	4651      	mov	r1, sl
 80054f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f6:	4651      	mov	r1, sl
 80054f8:	00ca      	lsls	r2, r1, #3
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	4642      	mov	r2, r8
 8005502:	189b      	adds	r3, r3, r2
 8005504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005508:	464b      	mov	r3, r9
 800550a:	460a      	mov	r2, r1
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	67bb      	str	r3, [r7, #120]	; 0x78
 800551e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800552c:	4649      	mov	r1, r9
 800552e:	008b      	lsls	r3, r1, #2
 8005530:	4641      	mov	r1, r8
 8005532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005536:	4641      	mov	r1, r8
 8005538:	008a      	lsls	r2, r1, #2
 800553a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800553e:	f7fa fe61 	bl	8000204 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <UART_SetConfig+0x4e4>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	3332      	adds	r3, #50	; 0x32
 800555a:	4a34      	ldr	r2, [pc, #208]	; (800562c <UART_SetConfig+0x4e4>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005566:	441c      	add	r4, r3
 8005568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556c:	2200      	movs	r2, #0
 800556e:	673b      	str	r3, [r7, #112]	; 0x70
 8005570:	677a      	str	r2, [r7, #116]	; 0x74
 8005572:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005576:	4642      	mov	r2, r8
 8005578:	464b      	mov	r3, r9
 800557a:	1891      	adds	r1, r2, r2
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	415b      	adcs	r3, r3
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005586:	4641      	mov	r1, r8
 8005588:	1851      	adds	r1, r2, r1
 800558a:	6039      	str	r1, [r7, #0]
 800558c:	4649      	mov	r1, r9
 800558e:	414b      	adcs	r3, r1
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800559e:	4659      	mov	r1, fp
 80055a0:	00cb      	lsls	r3, r1, #3
 80055a2:	4651      	mov	r1, sl
 80055a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a8:	4651      	mov	r1, sl
 80055aa:	00ca      	lsls	r2, r1, #3
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	4642      	mov	r2, r8
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b8:	464b      	mov	r3, r9
 80055ba:	460a      	mov	r2, r1
 80055bc:	eb42 0303 	adc.w	r3, r2, r3
 80055c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	663b      	str	r3, [r7, #96]	; 0x60
 80055cc:	667a      	str	r2, [r7, #100]	; 0x64
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055da:	4649      	mov	r1, r9
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	4641      	mov	r1, r8
 80055e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e4:	4641      	mov	r1, r8
 80055e6:	008a      	lsls	r2, r1, #2
 80055e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055ec:	f7fa fe0a 	bl	8000204 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <UART_SetConfig+0x4e4>)
 80055f6:	fba3 1302 	umull	r1, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2164      	movs	r1, #100	; 0x64
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	; 0x32
 8005608:	4a08      	ldr	r2, [pc, #32]	; (800562c <UART_SetConfig+0x4e4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 020f 	and.w	r2, r3, #15
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4422      	add	r2, r4
 800561c:	609a      	str	r2, [r3, #8]
}
 800561e:	bf00      	nop
 8005620:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562a:	bf00      	nop
 800562c:	51eb851f 	.word	0x51eb851f

08005630 <__libc_init_array>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4d0d      	ldr	r5, [pc, #52]	; (8005668 <__libc_init_array+0x38>)
 8005634:	4c0d      	ldr	r4, [pc, #52]	; (800566c <__libc_init_array+0x3c>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	2600      	movs	r6, #0
 800563c:	42a6      	cmp	r6, r4
 800563e:	d109      	bne.n	8005654 <__libc_init_array+0x24>
 8005640:	4d0b      	ldr	r5, [pc, #44]	; (8005670 <__libc_init_array+0x40>)
 8005642:	4c0c      	ldr	r4, [pc, #48]	; (8005674 <__libc_init_array+0x44>)
 8005644:	f000 f820 	bl	8005688 <_init>
 8005648:	1b64      	subs	r4, r4, r5
 800564a:	10a4      	asrs	r4, r4, #2
 800564c:	2600      	movs	r6, #0
 800564e:	42a6      	cmp	r6, r4
 8005650:	d105      	bne.n	800565e <__libc_init_array+0x2e>
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	f855 3b04 	ldr.w	r3, [r5], #4
 8005658:	4798      	blx	r3
 800565a:	3601      	adds	r6, #1
 800565c:	e7ee      	b.n	800563c <__libc_init_array+0xc>
 800565e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005662:	4798      	blx	r3
 8005664:	3601      	adds	r6, #1
 8005666:	e7f2      	b.n	800564e <__libc_init_array+0x1e>
 8005668:	080056c8 	.word	0x080056c8
 800566c:	080056c8 	.word	0x080056c8
 8005670:	080056c8 	.word	0x080056c8
 8005674:	080056cc 	.word	0x080056cc

08005678 <memset>:
 8005678:	4402      	add	r2, r0
 800567a:	4603      	mov	r3, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	d100      	bne.n	8005682 <memset+0xa>
 8005680:	4770      	bx	lr
 8005682:	f803 1b01 	strb.w	r1, [r3], #1
 8005686:	e7f9      	b.n	800567c <memset+0x4>

08005688 <_init>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr

08005694 <_fini>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr
