
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08008f98  08008f98  00018f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200001e4  08009978  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b6c  08009978  00020b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001192d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260d  00000000  00000000  00031b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00035120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002486e  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d38  00000000  00000000  0005a866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0cd6  00000000  00000000  0006d59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  0014e2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008f80 	.word	0x08008f80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008f80 	.word	0x08008f80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <generate_sin>:
void handle_command(char* command);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_sin(float ampl, float offset, float freq) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f9e:	ed87 1a01 	vstr	s2, [r7, #4]
	float omega = 2.0f * M_PI * freq / SAMPLE_RATE * 2;
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff faf0 	bl	8000588 <__aeabi_f2d>
 8000fa8:	a335      	add	r3, pc, #212	; (adr r3, 8001080 <generate_sin+0xf0>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fb43 	bl	8000638 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <generate_sin+0xe0>)
 8000fc0:	f7ff fc64 	bl	800088c <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	f7ff f97c 	bl	80002cc <__adddf3>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fe04 	bl	8000be8 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < SAMPLE_RATE; i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e036      	b.n	8001058 <generate_sin+0xc8>
		float value = offset + ampl * sinf(omega * i);
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8001000:	f007 fa62 	bl	80084c8 <sinf>
 8001004:	eeb0 7a40 	vmov.f32	s14, s0
 8001008:	edd7 7a03 	vldr	s15, [r7, #12]
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	ed97 7a02 	vldr	s14, [r7, #8]
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	edc7 7a05 	vstr	s15, [r7, #20]
		value = (value + ampl) / (2 * VREF);
 800101c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001020:	edd7 7a03 	vldr	s15, [r7, #12]
 8001024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001028:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001074 <generate_sin+0xe4>
 800102c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001030:	edc7 7a05 	vstr	s15, [r7, #20]
		sine[i] = (uint16_t)(value * 4095);
 8001034:	edd7 7a05 	vldr	s15, [r7, #20]
 8001038:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001078 <generate_sin+0xe8>
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001044:	ee17 3a90 	vmov	r3, s15
 8001048:	b299      	uxth	r1, r3
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <generate_sin+0xec>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SAMPLE_RATE; i++) {
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105e:	dbc4      	blt.n	8000fea <generate_sin+0x5a>
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	408f4000 	.word	0x408f4000
 8001074:	40d33333 	.word	0x40d33333
 8001078:	457ff000 	.word	0x457ff000
 800107c:	20000348 	.word	0x20000348
 8001080:	54442d18 	.word	0x54442d18
 8001084:	401921fb 	.word	0x401921fb

08001088 <handle_invalid_command>:


void handle_invalid_command() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)INVALID_COMMAND, strlen(INVALID_COMMAND));
 800108c:	220f      	movs	r2, #15
 800108e:	4903      	ldr	r1, [pc, #12]	; (800109c <handle_invalid_command+0x14>)
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <handle_invalid_command+0x18>)
 8001092:	f003 fb70 	bl	8004776 <HAL_UART_Transmit_IT>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08008f98 	.word	0x08008f98
 80010a0:	20000304 	.word	0x20000304
 80010a4:	00000000 	.word	0x00000000

080010a8 <handle_command>:


void handle_command(char* command) {
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if (command[0] == FREQUENCY_SYMBOL && command[4] == AMPLITUDE_SYMBOL) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b46      	cmp	r3, #70	; 0x46
 80010b6:	d169      	bne.n	800118c <handle_command+0xe4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3304      	adds	r3, #4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b41      	cmp	r3, #65	; 0x41
 80010c0:	d164      	bne.n	800118c <handle_command+0xe4>
		f = (float)((command[1] - '0') * 100 + (command[2] - '0') * 10 + command[3] - '0');
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3301      	adds	r3, #1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3b30      	subs	r3, #48	; 0x30
 80010ca:	2264      	movs	r2, #100	; 0x64
 80010cc:	fb02 f103 	mul.w	r1, r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3302      	adds	r3, #2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	440b      	add	r3, r1
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	3203      	adds	r2, #3
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	3b30      	subs	r3, #48	; 0x30
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <handle_command+0x100>)
 80010f8:	edc3 7a00 	vstr	s15, [r3]
		amplitude = command[5] - '0' + (command[7] - '0') * 0.1;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3305      	adds	r3, #5
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3b30      	subs	r3, #48	; 0x30
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa2d 	bl	8000564 <__aeabi_i2d>
 800110a:	4604      	mov	r4, r0
 800110c:	460d      	mov	r5, r1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3307      	adds	r3, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3b30      	subs	r3, #48	; 0x30
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa24 	bl	8000564 <__aeabi_i2d>
 800111c:	a320      	add	r3, pc, #128	; (adr r3, 80011a0 <handle_command+0xf8>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa89 	bl	8000638 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f8cd 	bl	80002cc <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd55 	bl	8000be8 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <handle_command+0x104>)
 8001142:	6013      	str	r3, [r2, #0]
		if (amplitude > VREF) {
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <handle_command+0x104>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011b0 <handle_command+0x108>
 800114e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	dd02      	ble.n	800115e <handle_command+0xb6>
			amplitude = VREF;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <handle_command+0x104>)
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <handle_command+0x10c>)
 800115c:	601a      	str	r2, [r3, #0]
		}
		generate_sin(amplitude, offs, f);
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <handle_command+0x104>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <handle_command+0x110>)
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <handle_command+0x100>)
 800116c:	edd3 6a00 	vldr	s13, [r3]
 8001170:	eeb0 1a66 	vmov.f32	s2, s13
 8001174:	eef0 0a47 	vmov.f32	s1, s14
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	f7ff ff08 	bl	8000f90 <generate_sin>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)SUCCESSFUL, strlen(SUCCESSFUL));
 8001180:	220a      	movs	r2, #10
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <handle_command+0x114>)
 8001184:	480e      	ldr	r0, [pc, #56]	; (80011c0 <handle_command+0x118>)
 8001186:	f003 faf6 	bl	8004776 <HAL_UART_Transmit_IT>
 800118a:	e002      	b.n	8001192 <handle_command+0xea>
	} else {
		handle_invalid_command();
 800118c:	f7ff ff7c 	bl	8001088 <handle_invalid_command>
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bdb0      	pop	{r4, r5, r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	9999999a 	.word	0x9999999a
 80011a4:	3fb99999 	.word	0x3fb99999
 80011a8:	20000004 	.word	0x20000004
 80011ac:	20000000 	.word	0x20000000
 80011b0:	40533333 	.word	0x40533333
 80011b4:	40533333 	.word	0x40533333
 80011b8:	20000b1c 	.word	0x20000b1c
 80011bc:	08008fa8 	.word	0x08008fa8
 80011c0:	20000304 	.word	0x20000304
 80011c4:	00000000 	.word	0x00000000

080011c8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_ADC_ConvCpltCallback+0x90>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d134      	bne.n	8001244 <HAL_ADC_ConvCpltCallback+0x7c>
    	adc_voltage = (2 * VREF) * adcData[0] / 4095.0 - amplitude;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_ADC_ConvCpltCallback+0x94>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001260 <HAL_ADC_ConvCpltCallback+0x98>
 80011ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f9c9 	bl	8000588 <__aeabi_f2d>
 80011f6:	a316      	add	r3, pc, #88	; (adr r3, 8001250 <HAL_ADC_ConvCpltCallback+0x88>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb46 	bl	800088c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	461d      	mov	r5, r3
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_ADC_ConvCpltCallback+0x9c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9bb 	bl	8000588 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f855 	bl	80002c8 <__aeabi_dsub>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fcdf 	bl	8000be8 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_ADC_ConvCpltCallback+0xa0>)
 800122e:	6013      	str	r3, [r2, #0]
    	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_BUFFER_SIZE) != HAL_OK) {
 8001230:	2201      	movs	r2, #1
 8001232:	490a      	ldr	r1, [pc, #40]	; (800125c <HAL_ADC_ConvCpltCallback+0x94>)
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001236:	f000 fdfd 	bl	8001e34 <HAL_ADC_Start_DMA>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_ADC_ConvCpltCallback+0x7c>
    		  Error_Handler();
 8001240:	f000 fa8c 	bl	800175c <Error_Handler>
    	}
    }
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bdb0      	pop	{r4, r5, r7, pc}
 800124c:	f3af 8000 	nop.w
 8001250:	00000000 	.word	0x00000000
 8001254:	40affe00 	.word	0x40affe00
 8001258:	40012000 	.word	0x40012000
 800125c:	20000b4c 	.word	0x20000b4c
 8001260:	40d33333 	.word	0x40d33333
 8001264:	20000000 	.word	0x20000000
 8001268:	20000b50 	.word	0x20000b50
 800126c:	20000200 	.word	0x20000200

08001270 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d133      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x7a>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine[sample_index]);
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800128a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	481b      	ldr	r0, [pc, #108]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001294:	f001 fb81 	bl	800299a <HAL_DAC_SetValue>
		sample_index = (sample_index + 1) % SAMPLE_RATE;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80012a0:	fb82 1203 	smull	r1, r2, r2, r3
 80012a4:	1191      	asrs	r1, r2, #6
 80012a6:	17da      	asrs	r2, r3, #31
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ae:	fb01 f202 	mul.w	r2, r1, r2
 80012b2:	1a9a      	subs	r2, r3, r2
 80012b4:	b292      	uxth	r2, r2
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80012b8:	801a      	strh	r2, [r3, #0]

		snprintf((char*)txData, sizeof(txData), "v:%f\r\n", adc_voltage);
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f962 	bl	8000588 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	e9cd 2300 	strd	r2, r3, [sp]
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012ce:	2120      	movs	r1, #32
 80012d0:	480f      	ldr	r0, [pc, #60]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012d2:	f004 fe5b 	bl	8005f8c <sniprintf>
		HAL_UART_Transmit_IT(&huart2, txData, strlen((char*)txData));
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012d8:	f7fe ff9a 	bl	8000210 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29b      	uxth	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	490b      	ldr	r1, [pc, #44]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012e6:	f003 fa46 	bl	8004776 <HAL_UART_Transmit_IT>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40001000 	.word	0x40001000
 80012f8:	20000b18 	.word	0x20000b18
 80012fc:	20000348 	.word	0x20000348
 8001300:	200002a8 	.word	0x200002a8
 8001304:	10624dd3 	.word	0x10624dd3
 8001308:	20000b50 	.word	0x20000b50
 800130c:	08008fb4 	.word	0x08008fb4
 8001310:	20000b2c 	.word	0x20000b2c
 8001314:	20000304 	.word	0x20000304

08001318 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_UART_RxCpltCallback+0x60>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d122      	bne.n	8001370 <HAL_UART_RxCpltCallback+0x58>
		if (rxData[0] == START_SYMBOL && rxData[9] == END_SYMBOL) {
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_UART_RxCpltCallback+0x64>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b53      	cmp	r3, #83	; 0x53
 8001330:	d112      	bne.n	8001358 <HAL_UART_RxCpltCallback+0x40>
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_UART_RxCpltCallback+0x64>)
 8001334:	7a5b      	ldrb	r3, [r3, #9]
 8001336:	2b45      	cmp	r3, #69	; 0x45
 8001338:	d10e      	bne.n	8001358 <HAL_UART_RxCpltCallback+0x40>
			char command[COMMAND_SIZE + 1];
			strncpy(command, (char *)&rxData[1], COMMAND_SIZE);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2208      	movs	r2, #8
 8001340:	490f      	ldr	r1, [pc, #60]	; (8001380 <HAL_UART_RxCpltCallback+0x68>)
 8001342:	4618      	mov	r0, r3
 8001344:	f004 fe56 	bl	8005ff4 <strncpy>
			command[COMMAND_SIZE] = '\0';
 8001348:	2300      	movs	r3, #0
 800134a:	753b      	strb	r3, [r7, #20]
			handle_command(command);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fea9 	bl	80010a8 <handle_command>
		if (rxData[0] == START_SYMBOL && rxData[9] == END_SYMBOL) {
 8001356:	e001      	b.n	800135c <HAL_UART_RxCpltCallback+0x44>
		} else {
			handle_invalid_command();
 8001358:	f7ff fe96 	bl	8001088 <handle_invalid_command>
		}
		memset(rxData, 0, sizeof(rxData));
 800135c:	220a      	movs	r2, #10
 800135e:	2100      	movs	r1, #0
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_UART_RxCpltCallback+0x64>)
 8001362:	f004 f9a1 	bl	80056a8 <memset>
		HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8001366:	220a      	movs	r2, #10
 8001368:	4904      	ldr	r1, [pc, #16]	; (800137c <HAL_UART_RxCpltCallback+0x64>)
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_UART_RxCpltCallback+0x6c>)
 800136c:	f003 fa48 	bl	8004800 <HAL_UART_Receive_IT>
	}
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40004400 	.word	0x40004400
 800137c:	20000b20 	.word	0x20000b20
 8001380:	20000b21 	.word	0x20000b21
 8001384:	20000304 	.word	0x20000304

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fc9c 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f846 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f000 f9ac 	bl	80016f0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001398:	f000 f92a 	bl	80015f0 <MX_TIM6_Init>
  MX_DAC_Init();
 800139c:	f000 f8fe 	bl	800159c <MX_DAC_Init>
  MX_DMA_Init();
 80013a0:	f000 f986 	bl	80016b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80013a4:	f000 f8a8 	bl	80014f8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80013a8:	f000 f958 	bl	800165c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  generate_sin(amplitude, offs, f);
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <main+0x74>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <main+0x78>)
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <main+0x7c>)
 80013ba:	edd3 6a00 	vldr	s13, [r3]
 80013be:	eeb0 1a66 	vmov.f32	s2, s13
 80013c2:	eef0 0a47 	vmov.f32	s1, s14
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	f7ff fde1 	bl	8000f90 <generate_sin>

  HAL_TIM_Base_Start_IT(&htim6);
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <main+0x80>)
 80013d0:	f002 feb4 	bl	800413c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 80013d4:	220a      	movs	r2, #10
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <main+0x84>)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <main+0x88>)
 80013da:	f003 fa11 	bl	8004800 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <main+0x8c>)
 80013e2:	f001 fa2e 	bl	8002842 <HAL_DAC_Start>

  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_BUFFER_SIZE) != HAL_OK) {
 80013e6:	2201      	movs	r2, #1
 80013e8:	490b      	ldr	r1, [pc, #44]	; (8001418 <main+0x90>)
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <main+0x94>)
 80013ec:	f000 fd22 	bl	8001e34 <HAL_ADC_Start_DMA>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <main+0x72>
          Error_Handler();
 80013f6:	f000 f9b1 	bl	800175c <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <main+0x72>
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000b1c 	.word	0x20000b1c
 8001404:	20000004 	.word	0x20000004
 8001408:	200002bc 	.word	0x200002bc
 800140c:	20000b20 	.word	0x20000b20
 8001410:	20000304 	.word	0x20000304
 8001414:	200002a8 	.word	0x200002a8
 8001418:	20000b4c 	.word	0x20000b4c
 800141c:	20000200 	.word	0x20000200

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2234      	movs	r2, #52	; 0x34
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f004 f93a 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <SystemClock_Config+0xd0>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <SystemClock_Config+0xd0>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <SystemClock_Config+0xd0>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <SystemClock_Config+0xd4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <SystemClock_Config+0xd4>)
 800146a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <SystemClock_Config+0xd4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001484:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001490:	230a      	movs	r3, #10
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001494:	2396      	movs	r3, #150	; 0x96
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800149c:	2302      	movs	r3, #2
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fb59 	bl	8003b60 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b4:	f000 f952 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2302      	movs	r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2104      	movs	r1, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 f87e 	bl	80035d8 <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014e2:	f000 f93b 	bl	800175c <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3750      	adds	r7, #80	; 0x50
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_ADC1_Init+0x98>)
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_ADC1_Init+0x9c>)
 800150e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_ADC1_Init+0x98>)
 8001512:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001516:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC1_Init+0x98>)
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <MX_ADC1_Init+0xa0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_ADC1_Init+0x98>)
 8001546:	2201      	movs	r2, #1
 8001548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_ADC1_Init+0x98>)
 8001554:	2201      	movs	r2, #1
 8001556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_ADC1_Init+0x98>)
 800155a:	f000 fc27 	bl	8001dac <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 f8fa 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001568:	230c      	movs	r3, #12
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_ADC1_Init+0x98>)
 800157a:	f000 fd7f 	bl	800207c <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001584:	f000 f8ea 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000200 	.word	0x20000200
 8001594:	40012000 	.word	0x40012000
 8001598:	0f000001 	.word	0x0f000001

0800159c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_DAC_Init+0x4c>)
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <MX_DAC_Init+0x50>)
 80015ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_DAC_Init+0x4c>)
 80015b2:	f001 f924 	bl	80027fe <HAL_DAC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015bc:	f000 f8ce 	bl	800175c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_DAC_Init+0x4c>)
 80015d0:	f001 fa12 	bl	80029f8 <HAL_DAC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015da:	f000 f8bf 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002a8 	.word	0x200002a8
 80015ec:	40007400 	.word	0x40007400

080015f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_TIM6_Init+0x64>)
 8001600:	4a15      	ldr	r2, [pc, #84]	; (8001658 <MX_TIM6_Init+0x68>)
 8001602:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_TIM6_Init+0x64>)
 8001606:	2202      	movs	r2, #2
 8001608:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_TIM6_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_TIM6_Init+0x64>)
 8001612:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001616:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_TIM6_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_TIM6_Init+0x64>)
 8001620:	f002 fd3c 	bl	800409c <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800162a:	f000 f897 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_TIM6_Init+0x64>)
 800163c:	f002 ffbe 	bl	80045bc <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001646:	f000 f889 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002bc 	.word	0x200002bc
 8001658:	40001000 	.word	0x40001000

0800165c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <MX_USART2_UART_Init+0x50>)
 800166a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 8001680:	220c      	movs	r2, #12
 8001682:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_USART2_UART_Init+0x48>)
 8001692:	f003 f823 	bl	80046dc <HAL_UART_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800169c:	f000 f85e 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000304 	.word	0x20000304
 80016a8:	40004400 	.word	0x40004400
 80016ac:	000186a0 	.word	0x000186a0

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_DMA_Init+0x3c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <MX_DMA_Init+0x3c>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_DMA_Init+0x3c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2038      	movs	r0, #56	; 0x38
 80016d8:	f001 f85b 	bl	8002792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016dc:	2038      	movs	r0, #56	; 0x38
 80016de:	f001 f874 	bl	80027ca <HAL_NVIC_EnableIRQ>

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_GPIO_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <MX_GPIO_Init+0x68>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_GPIO_Init+0x68>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_GPIO_Init+0x68>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <MX_GPIO_Init+0x68>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <MX_GPIO_Init+0x68>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_GPIO_Init+0x68>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <MX_GPIO_Init+0x68>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_GPIO_Init+0x68>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2e      	ldr	r2, [pc, #184]	; (8001890 <HAL_ADC_MspInit+0xd8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d156      	bne.n	8001888 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_ADC_MspInit+0xdc>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <HAL_ADC_MspInit+0xdc>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_ADC_MspInit+0xdc>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_ADC_MspInit+0xdc>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_ADC_MspInit+0xdc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001812:	2304      	movs	r3, #4
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2303      	movs	r3, #3
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	481c      	ldr	r0, [pc, #112]	; (8001898 <HAL_ADC_MspInit+0xe0>)
 8001826:	f001 fd43 	bl	80032b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_ADC_MspInit+0xe4>)
 800182c:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 800182e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_ADC_MspInit+0xe4>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001848:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_ADC_MspInit+0xe4>)
 800184c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001850:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001858:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_ADC_MspInit+0xe4>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <HAL_ADC_MspInit+0xe4>)
 800186e:	f001 f91d 	bl	8002aac <HAL_DMA_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001878:	f7ff ff70 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_ADC_MspInit+0xe4>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40012000 	.word	0x40012000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020800 	.word	0x40020800
 800189c:	20000248 	.word	0x20000248
 80018a0:	40026410 	.word	0x40026410

080018a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_DAC_MspInit+0x8c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12f      	bne.n	8001926 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_DAC_MspInit+0x90>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a19      	ldr	r2, [pc, #100]	; (8001934 <HAL_DAC_MspInit+0x90>)
 80018d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_DAC_MspInit+0x90>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_DAC_MspInit+0x90>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_DAC_MspInit+0x90>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_DAC_MspInit+0x90>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018fe:	2310      	movs	r3, #16
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001902:	2303      	movs	r3, #3
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <HAL_DAC_MspInit+0x94>)
 8001912:	f001 fccd 	bl	80032b0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2036      	movs	r0, #54	; 0x36
 800191c:	f000 ff39 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001920:	2036      	movs	r0, #54	; 0x36
 8001922:	f000 ff52 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40007400 	.word	0x40007400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_TIM_Base_MspInit+0x48>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d115      	bne.n	800197a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_TIM_Base_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_TIM_Base_MspInit+0x4c>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_TIM_Base_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2036      	movs	r0, #54	; 0x36
 8001970:	f000 ff0f 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001974:	2036      	movs	r0, #54	; 0x36
 8001976:	f000 ff28 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40001000 	.word	0x40001000
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_UART_MspInit+0x94>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d133      	bne.n	8001a16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e6:	230c      	movs	r3, #12
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f6:	2307      	movs	r3, #7
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_UART_MspInit+0x9c>)
 8001a02:	f001 fc55 	bl	80032b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2026      	movs	r0, #38	; 0x26
 8001a0c:	f000 fec1 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a10:	2026      	movs	r0, #38	; 0x26
 8001a12:	f000 feda 	bl	80027ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 f978 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART2_IRQHandler+0x10>)
 8001a86:	f002 feeb 	bl	8004860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000304 	.word	0x20000304

08001a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <TIM6_DAC_IRQHandler+0x14>)
 8001a9a:	f000 ff24 	bl	80028e6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <TIM6_DAC_IRQHandler+0x18>)
 8001aa0:	f002 fbbc 	bl	800421c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002a8 	.word	0x200002a8
 8001aac:	200002bc 	.word	0x200002bc

08001ab0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ab6:	f001 f991 	bl	8002ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000248 	.word	0x20000248

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ade:	f003 fdb9 	bl	8005654 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
	}

return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
	}
	return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f003 fd1e 	bl	8005654 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20020000 	.word	0x20020000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	20000b54 	.word	0x20000b54
 8001c4c:	20000b70 	.word	0x20000b70

08001c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c7a:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c90:	4c0b      	ldr	r4, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9e:	f7ff ffd7 	bl	8001c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f003 fcdd 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fb6f 	bl	8001388 <main>
  bx  lr    
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cb8:	08009794 	.word	0x08009794
  ldr r2, =_sbss
 8001cbc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cc0:	20000b6c 	.word	0x20000b6c

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_Init+0x40>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_Init+0x40>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_Init+0x40>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 fd43 	bl	800277c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fd34 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fd5b 	bl	80027e6 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 fd23 	bl	8002792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000010 	.word	0x20000010
 8001d68:	2000000c 	.word	0x2000000c

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000b58 	.word	0x20000b58

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000b58 	.word	0x20000b58

08001dac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e033      	b.n	8001e2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fcf4 	bl	80017b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001df2:	f023 0302 	bic.w	r3, r3, #2
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa6e 	bl	80022e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
 8001e1a:	e001      	b.n	8001e20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Start_DMA+0x1e>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0e9      	b.n	8002026 <HAL_ADC_Start_DMA+0x1f2>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d018      	beq.n	8001e9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e78:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_ADC_Start_DMA+0x1fc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6d      	ldr	r2, [pc, #436]	; (8002034 <HAL_ADC_Start_DMA+0x200>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9a      	lsrs	r2, r3, #18
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea8:	d107      	bne.n	8001eba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 80a1 	bne.w	800200c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f08:	d106      	bne.n	8001f18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f023 0206 	bic.w	r2, r3, #6
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_ADC_Start_DMA+0x204>)
 8001f28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	4a43      	ldr	r2, [pc, #268]	; (800203c <HAL_ADC_Start_DMA+0x208>)
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <HAL_ADC_Start_DMA+0x20c>)
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	4a41      	ldr	r2, [pc, #260]	; (8002044 <HAL_ADC_Start_DMA+0x210>)
 8001f40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	334c      	adds	r3, #76	; 0x4c
 8001f76:	4619      	mov	r1, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f000 fe44 	bl	8002c08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d12a      	bne.n	8001fe2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <HAL_ADC_Start_DMA+0x214>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d015      	beq.n	8001fc2 <HAL_ADC_Start_DMA+0x18e>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	; (800204c <HAL_ADC_Start_DMA+0x218>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d105      	bne.n	8001fac <HAL_ADC_Start_DMA+0x178>
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_ADC_Start_DMA+0x204>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_ADC_Start_DMA+0x21c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d136      	bne.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_ADC_Start_DMA+0x204>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d130      	bne.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d129      	bne.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	e020      	b.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <HAL_ADC_Start_DMA+0x214>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d11b      	bne.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d114      	bne.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	e00b      	b.n	8002024 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	431bde83 	.word	0x431bde83
 8002038:	40012300 	.word	0x40012300
 800203c:	080024d9 	.word	0x080024d9
 8002040:	08002593 	.word	0x08002593
 8002044:	080025af 	.word	0x080025af
 8002048:	40012000 	.word	0x40012000
 800204c:	40012100 	.word	0x40012100
 8002050:	40012200 	.word	0x40012200

08002054 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1c>
 8002094:	2302      	movs	r3, #2
 8002096:	e113      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x244>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d925      	bls.n	80020f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	3b1e      	subs	r3, #30
 80020be:	2207      	movs	r2, #7
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43da      	mvns	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	400a      	ands	r2, r1
 80020cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68d9      	ldr	r1, [r3, #12]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4403      	add	r3, r0
 80020e6:	3b1e      	subs	r3, #30
 80020e8:	409a      	lsls	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	e022      	b.n	800213a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	2207      	movs	r2, #7
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	400a      	ands	r2, r1
 8002116:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	4603      	mov	r3, r0
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4403      	add	r3, r0
 8002130:	409a      	lsls	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b06      	cmp	r3, #6
 8002140:	d824      	bhi.n	800218c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b05      	subs	r3, #5
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b05      	subs	r3, #5
 800217e:	fa00 f203 	lsl.w	r2, r0, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
 800218a:	e04c      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	d824      	bhi.n	80021de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b23      	subs	r3, #35	; 0x23
 80021a6:	221f      	movs	r2, #31
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43da      	mvns	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	400a      	ands	r2, r1
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b23      	subs	r3, #35	; 0x23
 80021d0:	fa00 f203 	lsl.w	r2, r0, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
 80021dc:	e023      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b41      	subs	r3, #65	; 0x41
 80021f0:	221f      	movs	r2, #31
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	400a      	ands	r2, r1
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b41      	subs	r3, #65	; 0x41
 800221a:	fa00 f203 	lsl.w	r2, r0, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_ADC_ConfigChannel+0x250>)
 8002228:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_ADC_ConfigChannel+0x254>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d10f      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x1d8>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b12      	cmp	r3, #18
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_ADC_ConfigChannel+0x254>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x23a>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_ADC_ConfigChannel+0x258>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x1f4>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b11      	cmp	r3, #17
 800226e:	d122      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_ADC_ConfigChannel+0x258>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d111      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_ADC_ConfigChannel+0x260>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9a      	lsrs	r2, r3, #18
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	40012000 	.word	0x40012000
 80022d4:	10000012 	.word	0x10000012
 80022d8:	20000008 	.word	0x20000008
 80022dc:	431bde83 	.word	0x431bde83

080022e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e8:	4b79      	ldr	r3, [pc, #484]	; (80024d0 <ADC_Init+0x1f0>)
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	021a      	lsls	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <ADC_Init+0x1f4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d022      	beq.n	80023be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	e00f      	b.n	80023de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0202 	bic.w	r2, r2, #2
 80023ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e1b      	ldrb	r3, [r3, #24]
 80023f8:	005a      	lsls	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800242a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	3b01      	subs	r3, #1
 8002438:	035a      	lsls	r2, r3, #13
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	e007      	b.n	8002454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	3b01      	subs	r3, #1
 8002470:	051a      	lsls	r2, r3, #20
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002496:	025a      	lsls	r2, r3, #9
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	029a      	lsls	r2, r3, #10
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40012300 	.word	0x40012300
 80024d4:	0f000001 	.word	0x0f000001

080024d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d13c      	bne.n	800256c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d12b      	bne.n	8002564 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d127      	bne.n	8002564 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0220 	bic.w	r2, r2, #32
 800253e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7fe fe2f 	bl	80011c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800256a:	e00e      	b.n	800258a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fd75 	bl	8002068 <HAL_ADC_ErrorCallback>
}
 800257e:	e004      	b.n	800258a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fd57 	bl	8002054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fd4a 	bl	8002068 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4907      	ldr	r1, [pc, #28]	; (8002678 <__NVIC_EnableIRQ+0x38>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100

0800267c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	db0a      	blt.n	80026a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	490c      	ldr	r1, [pc, #48]	; (80026c8 <__NVIC_SetPriority+0x4c>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	440b      	add	r3, r1
 80026a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a4:	e00a      	b.n	80026bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <__NVIC_SetPriority+0x50>)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	3b04      	subs	r3, #4
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	440b      	add	r3, r1
 80026ba:	761a      	strb	r2, [r3, #24]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f1c3 0307 	rsb	r3, r3, #7
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf28      	it	cs
 80026ee:	2304      	movcs	r3, #4
 80026f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d902      	bls.n	8002700 <NVIC_EncodePriority+0x30>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3b03      	subs	r3, #3
 80026fe:	e000      	b.n	8002702 <NVIC_EncodePriority+0x32>
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43d9      	mvns	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	4313      	orrs	r3, r2
         );
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	; 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d301      	bcc.n	800274e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <SysTick_Config+0x40>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002756:	210f      	movs	r1, #15
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f7ff ff8e 	bl	800267c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <SysTick_Config+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SysTick_Config+0x40>)
 8002768:	2207      	movs	r2, #7
 800276a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff29 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff3e 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff8e 	bl	80026d0 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5d 	bl	800267c <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff31 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa2 	bl	8002738 <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e014      	b.n	800283a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff f83f 	bl	80018a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	795b      	ldrb	r3, [r3, #5]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_DAC_Start+0x16>
 8002854:	2302      	movs	r3, #2
 8002856:	e040      	b.n	80028da <HAL_DAC_Start+0x98>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2201      	movs	r2, #1
 8002872:	409a      	lsls	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800288c:	2b3c      	cmp	r3, #60	; 0x3c
 800288e:	d11d      	bne.n	80028cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	e014      	b.n	80028cc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	213c      	movs	r1, #60	; 0x3c
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0202 	orr.w	r2, r2, #2
 80028ca:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fc:	d120      	bne.n	8002940 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290c:	d118      	bne.n	8002940 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2204      	movs	r2, #4
 8002912:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002938:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f852 	bl	80029e4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294e:	d120      	bne.n	8002992 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295e:	d118      	bne.n	8002992 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2204      	movs	r2, #4
 8002964:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f043 0202 	orr.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800297a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800298a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f882 	bl	8002a96 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	3308      	adds	r3, #8
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e004      	b.n	80029ce <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3314      	adds	r3, #20
 80029cc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	461a      	mov	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	795b      	ldrb	r3, [r3, #5]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_DAC_ConfigChannel+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e03c      	b.n	8002a8a <HAL_DAC_ConfigChannel+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4013      	ands	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	22c0      	movs	r2, #192	; 0xc0
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	400a      	ands	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff f96c 	bl	8001d94 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e099      	b.n	8002bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae8:	e00f      	b.n	8002b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aea:	f7ff f953 	bl	8001d94 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d908      	bls.n	8002b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e078      	b.n	8002bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e8      	bne.n	8002aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_DMA_Init+0x158>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d107      	bne.n	8002b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0307 	bic.w	r3, r3, #7
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d117      	bne.n	8002bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fb01 	bl	80031b8 <DMA_CheckFifoParam>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2240      	movs	r2, #64	; 0x40
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e016      	b.n	8002bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fab8 	bl	800314c <DMA_CalcBaseAndBitshift>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	223f      	movs	r2, #63	; 0x3f
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	f010803f 	.word	0xf010803f

08002c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_DMA_Start_IT+0x26>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e040      	b.n	8002cb0 <HAL_DMA_Start_IT+0xa8>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d12f      	bne.n	8002ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa4a 	bl	80030f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0216 	orr.w	r2, r2, #22
 8002c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0208 	orr.w	r2, r2, #8
 8002c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e005      	b.n	8002cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
 8002cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cc6:	f7ff f865 	bl	8001d94 <HAL_GetTick>
 8002cca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d008      	beq.n	8002cea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e052      	b.n	8002d90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0216 	bic.w	r2, r2, #22
 8002cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_DMA_Abort+0x62>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0208 	bic.w	r2, r2, #8
 8002d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3a:	e013      	b.n	8002d64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d3c:	f7ff f82a 	bl	8001d94 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d90c      	bls.n	8002d64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2203      	movs	r2, #3
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e015      	b.n	8002d90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e4      	bne.n	8002d3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	223f      	movs	r2, #63	; 0x3f
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d004      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00c      	b.n	8002dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2205      	movs	r2, #5
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002de8:	4b8e      	ldr	r3, [pc, #568]	; (8003024 <HAL_DMA_IRQHandler+0x248>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a8e      	ldr	r2, [pc, #568]	; (8003028 <HAL_DMA_IRQHandler+0x24c>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a9b      	lsrs	r3, r3, #10
 8002df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	2208      	movs	r2, #8
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01a      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0204 	bic.w	r2, r2, #4
 8002e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	2208      	movs	r2, #8
 8002e36:	409a      	lsls	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d012      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2204      	movs	r2, #4
 8002e84:	409a      	lsls	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d012      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0204 	orr.w	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2210      	movs	r2, #16
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d043      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03c      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d018      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d108      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d024      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
 8002f0a:	e01f      	b.n	8002f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01b      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e016      	b.n	8002f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0208 	bic.w	r2, r2, #8
 8002f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	2220      	movs	r2, #32
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 808f 	beq.w	800307c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8087 	beq.w	800307c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2220      	movs	r2, #32
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d136      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0216 	bic.w	r2, r2, #22
 8002f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x1da>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0208 	bic.w	r2, r2, #8
 8002fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	223f      	movs	r2, #63	; 0x3f
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d07e      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
        }
        return;
 8002ff2:	e079      	b.n	80030e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01d      	beq.n	800303e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	2b00      	cmp	r3, #0
 8003016:	d031      	beq.n	800307c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
 8003020:	e02c      	b.n	800307c <HAL_DMA_IRQHandler+0x2a0>
 8003022:	bf00      	nop
 8003024:	20000008 	.word	0x20000008
 8003028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d023      	beq.n	800307c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
 800303c:	e01e      	b.n	800307c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10f      	bne.n	800306c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0210 	bic.w	r2, r2, #16
 800305a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	2b00      	cmp	r3, #0
 8003082:	d032      	beq.n	80030ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2205      	movs	r2, #5
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	3301      	adds	r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d307      	bcc.n	80030c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f2      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x2cc>
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
 80030e6:	e000      	b.n	80030ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80030e8:	bf00      	nop
    }
  }
}
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800310c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d108      	bne.n	8003130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800312e:	e007      	b.n	8003140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	3b10      	subs	r3, #16
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <DMA_CalcBaseAndBitshift+0x64>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d909      	bls.n	800318e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	659a      	str	r2, [r3, #88]	; 0x58
 800318c:	e007      	b.n	800319e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	aaaaaaab 	.word	0xaaaaaaab
 80031b4:	08008fd4 	.word	0x08008fd4

080031b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11f      	bne.n	8003212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d856      	bhi.n	8003286 <DMA_CheckFifoParam+0xce>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <DMA_CheckFifoParam+0x28>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	08003203 	.word	0x08003203
 80031e8:	080031f1 	.word	0x080031f1
 80031ec:	08003287 	.word	0x08003287
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d046      	beq.n	800328a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003200:	e043      	b.n	800328a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800320a:	d140      	bne.n	800328e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003210:	e03d      	b.n	800328e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	d121      	bne.n	8003260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d837      	bhi.n	8003292 <DMA_CheckFifoParam+0xda>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <DMA_CheckFifoParam+0x70>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	08003239 	.word	0x08003239
 800322c:	0800323f 	.word	0x0800323f
 8003230:	08003239 	.word	0x08003239
 8003234:	08003251 	.word	0x08003251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      break;
 800323c:	e030      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d025      	beq.n	8003296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324e:	e022      	b.n	8003296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003258:	d11f      	bne.n	800329a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800325e:	e01c      	b.n	800329a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d903      	bls.n	800326e <DMA_CheckFifoParam+0xb6>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d003      	beq.n	8003274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800326c:	e018      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      break;
 8003272:	e015      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e00b      	b.n	800329e <DMA_CheckFifoParam+0xe6>
      break;
 8003286:	bf00      	nop
 8003288:	e00a      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
 800328c:	e008      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e006      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003292:	bf00      	nop
 8003294:	e004      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <DMA_CheckFifoParam+0xe8>
      break;
 800329e:	bf00      	nop
    }
  } 
  
  return status; 
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e165      	b.n	8003598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f040 8154 	bne.w	8003592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d005      	beq.n	8003302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d130      	bne.n	8003364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0201 	and.w	r2, r3, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d017      	beq.n	80033a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d123      	bne.n	80033f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0203 	and.w	r2, r3, #3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ae 	beq.w	8003592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_GPIO_Init+0x300>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a5c      	ldr	r2, [pc, #368]	; (80035b0 <HAL_GPIO_Init+0x300>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <HAL_GPIO_Init+0x300>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003452:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4f      	ldr	r2, [pc, #316]	; (80035b8 <HAL_GPIO_Init+0x308>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x21a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4e      	ldr	r2, [pc, #312]	; (80035bc <HAL_GPIO_Init+0x30c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x216>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4d      	ldr	r2, [pc, #308]	; (80035c0 <HAL_GPIO_Init+0x310>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x212>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4c      	ldr	r2, [pc, #304]	; (80035c4 <HAL_GPIO_Init+0x314>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x20e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4b      	ldr	r2, [pc, #300]	; (80035c8 <HAL_GPIO_Init+0x318>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x20a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_GPIO_Init+0x31c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x206>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a49      	ldr	r2, [pc, #292]	; (80035d0 <HAL_GPIO_Init+0x320>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x202>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034ca:	2300      	movs	r3, #0
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034dc:	4935      	ldr	r1, [pc, #212]	; (80035b4 <HAL_GPIO_Init+0x304>)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ea:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <HAL_GPIO_Init+0x324>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_GPIO_Init+0x324>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HAL_GPIO_Init+0x324>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800358c:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <HAL_GPIO_Init+0x324>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	f67f ae96 	bls.w	80032cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3724      	adds	r7, #36	; 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40013c00 	.word	0x40013c00

080035d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0cc      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b68      	ldr	r3, [pc, #416]	; (8003790 <HAL_RCC_ClockConfig+0x1b8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d90c      	bls.n	8003614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0b8      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800364e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	494d      	ldr	r1, [pc, #308]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d044      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d119      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d003      	beq.n	8003696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003692:	2b03      	cmp	r3, #3
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e067      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4934      	ldr	r1, [pc, #208]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c8:	f7fe fb64 	bl	8001d94 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fe fb60 	bl	8001d94 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e04f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_RCC_ClockConfig+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d20c      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e032      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4916      	ldr	r1, [pc, #88]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800375e:	f000 f855 	bl	800380c <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	4a09      	ldr	r2, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fac4 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023c00 	.word	0x40023c00
 8003794:	40023800 	.word	0x40023800
 8003798:	08008fbc 	.word	0x08008fbc
 800379c:	20000008 	.word	0x20000008
 80037a0:	2000000c 	.word	0x2000000c

080037a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000008 	.word	0x20000008

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f7ff fff0 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08008fcc 	.word	0x08008fcc

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037e8:	f7ff ffdc 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0b5b      	lsrs	r3, r3, #13
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	08008fcc 	.word	0x08008fcc

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003810:	b0a6      	sub	sp, #152	; 0x98
 8003812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003832:	4bc8      	ldr	r3, [pc, #800]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b0c      	cmp	r3, #12
 800383c:	f200 817e 	bhi.w	8003b3c <HAL_RCC_GetSysClockFreq+0x330>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	0800387d 	.word	0x0800387d
 800384c:	08003b3d 	.word	0x08003b3d
 8003850:	08003b3d 	.word	0x08003b3d
 8003854:	08003b3d 	.word	0x08003b3d
 8003858:	08003885 	.word	0x08003885
 800385c:	08003b3d 	.word	0x08003b3d
 8003860:	08003b3d 	.word	0x08003b3d
 8003864:	08003b3d 	.word	0x08003b3d
 8003868:	0800388d 	.word	0x0800388d
 800386c:	08003b3d 	.word	0x08003b3d
 8003870:	08003b3d 	.word	0x08003b3d
 8003874:	08003b3d 	.word	0x08003b3d
 8003878:	080039f7 	.word	0x080039f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4bb6      	ldr	r3, [pc, #728]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x34c>)
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003882:	e15f      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003884:	4bb5      	ldr	r3, [pc, #724]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x350>)
 8003886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800388a:	e15b      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388c:	4bb1      	ldr	r3, [pc, #708]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003898:	4bae      	ldr	r3, [pc, #696]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d031      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a4:	4bab      	ldr	r3, [pc, #684]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	2200      	movs	r2, #0
 80038ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	663b      	str	r3, [r7, #96]	; 0x60
 80038b8:	2300      	movs	r3, #0
 80038ba:	667b      	str	r3, [r7, #100]	; 0x64
 80038bc:	4ba7      	ldr	r3, [pc, #668]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x350>)
 80038be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80038c2:	462a      	mov	r2, r5
 80038c4:	fb03 f202 	mul.w	r2, r3, r2
 80038c8:	2300      	movs	r3, #0
 80038ca:	4621      	mov	r1, r4
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	4aa2      	ldr	r2, [pc, #648]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x350>)
 80038d4:	4621      	mov	r1, r4
 80038d6:	fba1 1202 	umull	r1, r2, r1, r2
 80038da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038dc:	460a      	mov	r2, r1
 80038de:	67ba      	str	r2, [r7, #120]	; 0x78
 80038e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038e2:	4413      	add	r3, r2
 80038e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ea:	2200      	movs	r2, #0
 80038ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80038ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80038f8:	f7fd f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003906:	e064      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003908:	4b92      	ldr	r3, [pc, #584]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	2200      	movs	r2, #0
 8003910:	653b      	str	r3, [r7, #80]	; 0x50
 8003912:	657a      	str	r2, [r7, #84]	; 0x54
 8003914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391a:	64bb      	str	r3, [r7, #72]	; 0x48
 800391c:	2300      	movs	r3, #0
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003920:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	f04f 0000 	mov.w	r0, #0
 800392c:	f04f 0100 	mov.w	r1, #0
 8003930:	0159      	lsls	r1, r3, #5
 8003932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003936:	0150      	lsls	r0, r2, #5
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4621      	mov	r1, r4
 800393e:	1a51      	subs	r1, r2, r1
 8003940:	6139      	str	r1, [r7, #16]
 8003942:	4629      	mov	r1, r5
 8003944:	eb63 0301 	sbc.w	r3, r3, r1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003956:	4659      	mov	r1, fp
 8003958:	018b      	lsls	r3, r1, #6
 800395a:	4651      	mov	r1, sl
 800395c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003960:	4651      	mov	r1, sl
 8003962:	018a      	lsls	r2, r1, #6
 8003964:	4651      	mov	r1, sl
 8003966:	ebb2 0801 	subs.w	r8, r2, r1
 800396a:	4659      	mov	r1, fp
 800396c:	eb63 0901 	sbc.w	r9, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003980:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003984:	4690      	mov	r8, r2
 8003986:	4699      	mov	r9, r3
 8003988:	4623      	mov	r3, r4
 800398a:	eb18 0303 	adds.w	r3, r8, r3
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	462b      	mov	r3, r5
 8003992:	eb49 0303 	adc.w	r3, r9, r3
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039a4:	4629      	mov	r1, r5
 80039a6:	028b      	lsls	r3, r1, #10
 80039a8:	4621      	mov	r1, r4
 80039aa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ae:	4621      	mov	r1, r4
 80039b0:	028a      	lsls	r2, r1, #10
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ba:	2200      	movs	r2, #0
 80039bc:	643b      	str	r3, [r7, #64]	; 0x40
 80039be:	647a      	str	r2, [r7, #68]	; 0x44
 80039c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039c4:	f7fd f960 	bl	8000c88 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d2:	4b60      	ldr	r3, [pc, #384]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0c1b      	lsrs	r3, r3, #16
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	3301      	adds	r3, #1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80039e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80039f4:	e0a6      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f6:	4b57      	ldr	r3, [pc, #348]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a02:	4b54      	ldr	r3, [pc, #336]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02a      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	2200      	movs	r2, #0
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a20:	2100      	movs	r1, #0
 8003a22:	4b4e      	ldr	r3, [pc, #312]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a24:	fb03 f201 	mul.w	r2, r3, r1
 8003a28:	2300      	movs	r3, #0
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	4a4a      	ldr	r2, [pc, #296]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a32:	fba0 1202 	umull	r1, r2, r0, r2
 8003a36:	677a      	str	r2, [r7, #116]	; 0x74
 8003a38:	460a      	mov	r2, r1
 8003a3a:	673a      	str	r2, [r7, #112]	; 0x70
 8003a3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a3e:	4413      	add	r3, r2
 8003a40:	677b      	str	r3, [r7, #116]	; 0x74
 8003a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a46:	2200      	movs	r2, #0
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a50:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003a54:	f7fd f918 	bl	8000c88 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a62:	e05b      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a64:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	623b      	str	r3, [r7, #32]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	0159      	lsls	r1, r3, #5
 8003a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a92:	0150      	lsls	r0, r2, #5
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4641      	mov	r1, r8
 8003a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8003abc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	00eb      	lsls	r3, r5, #3
 8003aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ace:	00e2      	lsls	r2, r4, #3
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	18e3      	adds	r3, r4, r3
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	464b      	mov	r3, r9
 8003adc:	eb45 0303 	adc.w	r3, r5, r3
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b04:	2200      	movs	r2, #0
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	61fa      	str	r2, [r7, #28]
 8003b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0e:	f7fd f8bb 	bl	8000c88 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4613      	mov	r3, r2
 8003b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0f1b      	lsrs	r3, r3, #28
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b3a:	e003      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3798      	adds	r7, #152	; 0x98
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	01312d00 	.word	0x01312d00

08003b60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e28d      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8083 	beq.w	8003c86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b80:	4b94      	ldr	r3, [pc, #592]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d019      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8c:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b98:	4b8e      	ldr	r3, [pc, #568]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b8b      	ldr	r3, [pc, #556]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	d112      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b84      	ldr	r3, [pc, #528]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x124>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e25a      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x90>
 8003be2:	4b7c      	ldr	r3, [pc, #496]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7b      	ldr	r2, [pc, #492]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xcc>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0xb4>
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xcc>
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6e      	ldr	r2, [pc, #440]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6b      	ldr	r2, [pc, #428]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f8ae 	bl	8001d94 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe f8aa 	bl	8001d94 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e21f      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xdc>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe f89a 	bl	8001d94 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fe f896 	bl	8001d94 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e20b      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x104>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06f      	beq.n	8003d72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c92:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9e:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d105      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x186>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1d3      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4937      	ldr	r1, [pc, #220]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_OscConfig+0x278>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f843 	bl	8001d94 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fe f83f 	bl	8001d94 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1b4      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x278>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f822 	bl	8001d94 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fe f81e 	bl	8001d94 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e193      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d036      	beq.n	8003dec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe f802 	bl	8001d94 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fffe 	bl	8001d94 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e173      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x234>
 8003db2:	e01b      	b.n	8003dec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd ffeb 	bl	8001d94 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e00e      	b.n	8003de0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd ffe7 	bl	8001d94 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d907      	bls.n	8003de0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e15c      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	42470000 	.word	0x42470000
 8003ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b8a      	ldr	r3, [pc, #552]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ea      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8097 	beq.w	8003f28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b83      	ldr	r3, [pc, #524]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a7e      	ldr	r2, [pc, #504]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b7c      	ldr	r3, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b79      	ldr	r3, [pc, #484]	; (8004010 <HAL_RCC_OscConfig+0x4b0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCC_OscConfig+0x4b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	; (8004010 <HAL_RCC_OscConfig+0x4b0>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd ffa7 	bl	8001d94 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd ffa3 	bl	8001d94 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e118      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCC_OscConfig+0x4b0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x31e>
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a65      	ldr	r2, [pc, #404]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x358>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x340>
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a60      	ldr	r2, [pc, #384]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b5e      	ldr	r3, [pc, #376]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a5d      	ldr	r2, [pc, #372]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x358>
 8003ea0:	4b5a      	ldr	r3, [pc, #360]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a59      	ldr	r2, [pc, #356]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b57      	ldr	r3, [pc, #348]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a56      	ldr	r2, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd ff68 	bl	8001d94 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd ff64 	bl	8001d94 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0d7      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x368>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd ff52 	bl	8001d94 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd ff4e 	bl	8001d94 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0c1      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a3a      	ldr	r2, [pc, #232]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80ad 	beq.w	800408c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f32:	4b36      	ldr	r3, [pc, #216]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d060      	beq.n	8004000 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d145      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_RCC_OscConfig+0x4b4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd ff22 	bl	8001d94 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd ff1e 	bl	8001d94 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e093      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	071b      	lsls	r3, r3, #28
 8003f9e:	491b      	ldr	r1, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCC_OscConfig+0x4b4>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fef3 	bl	8001d94 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fd feef 	bl	8001d94 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e064      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x452>
 8003fd0:	e05c      	b.n	800408c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <HAL_RCC_OscConfig+0x4b4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fedc 	bl	8001d94 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fd fed8 	bl	8001d94 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e04d      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x480>
 8003ffe:	e045      	b.n	800408c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e040      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004018:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <HAL_RCC_OscConfig+0x538>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d030      	beq.n	8004088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d129      	bne.n	8004088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d122      	bne.n	8004088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800404e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004050:	4293      	cmp	r3, r2
 8004052:	d119      	bne.n	8004088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	3b01      	subs	r3, #1
 8004062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d10f      	bne.n	8004088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800

0800409c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e041      	b.n	8004132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd fc3a 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f000 f9ce 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e04e      	b.n	80041f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <HAL_TIM_Base_Start_IT+0xc4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d01d      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_TIM_Base_Start_IT+0xc8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_TIM_Base_Start_IT+0xcc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_TIM_Base_Start_IT+0xd0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <HAL_TIM_Base_Start_IT+0xd4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_TIM_Base_Start_IT+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_TIM_Base_Start_IT+0xdc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d010      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	e007      	b.n	80041f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40010400 	.word	0x40010400
 8004214:	40014000 	.word	0x40014000
 8004218:	40001800 	.word	0x40001800

0800421c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d122      	bne.n	8004278 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0202 	mvn.w	r2, #2
 8004248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8ee 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8e0 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8f1 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b04      	cmp	r3, #4
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0204 	mvn.w	r2, #4
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8c4 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8b6 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8c7 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0208 	mvn.w	r2, #8
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f89a 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f88c 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f89d 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b10      	cmp	r3, #16
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b10      	cmp	r3, #16
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0210 	mvn.w	r2, #16
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2208      	movs	r2, #8
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f870 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f862 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f873 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0201 	mvn.w	r2, #1
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fc ff68 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b80      	cmp	r3, #128	; 0x80
 80043ac:	d10e      	bne.n	80043cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b80      	cmp	r3, #128	; 0x80
 80043ba:	d107      	bne.n	80043cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f97e 	bl	80046c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d107      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f838 	bl	8004468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b20      	cmp	r3, #32
 8004404:	d10e      	bne.n	8004424 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b20      	cmp	r3, #32
 8004412:	d107      	bne.n	8004424 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0220 	mvn.w	r2, #32
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f948 	bl	80046b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a40      	ldr	r2, [pc, #256]	; (8004590 <TIM_Base_SetConfig+0x114>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3d      	ldr	r2, [pc, #244]	; (8004594 <TIM_Base_SetConfig+0x118>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <TIM_Base_SetConfig+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3b      	ldr	r2, [pc, #236]	; (800459c <TIM_Base_SetConfig+0x120>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <TIM_Base_SetConfig+0x114>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d027      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <TIM_Base_SetConfig+0x118>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d023      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <TIM_Base_SetConfig+0x11c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2a      	ldr	r2, [pc, #168]	; (800459c <TIM_Base_SetConfig+0x120>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d017      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <TIM_Base_SetConfig+0x128>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <TIM_Base_SetConfig+0x12c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <TIM_Base_SetConfig+0x130>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a25      	ldr	r2, [pc, #148]	; (80045b0 <TIM_Base_SetConfig+0x134>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <TIM_Base_SetConfig+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <TIM_Base_SetConfig+0x13c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <TIM_Base_SetConfig+0x114>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0xf8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	615a      	str	r2, [r3, #20]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800
 80045b0:	40001800 	.word	0x40001800
 80045b4:	40001c00 	.word	0x40001c00
 80045b8:	40002000 	.word	0x40002000

080045bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e05a      	b.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a21      	ldr	r2, [pc, #132]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004620:	d01d      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10c      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4313      	orrs	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40001800 	.word	0x40001800

080046b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e03f      	b.n	800476e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fd f942 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800471e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fd23 	bl	800516c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	4613      	mov	r3, r2
 8004782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	d130      	bne.n	80047f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_UART_Transmit_IT+0x26>
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e029      	b.n	80047f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Transmit_IT+0x38>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e022      	b.n	80047f4 <HAL_UART_Transmit_IT+0x7e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	d11d      	bne.n	8004856 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_UART_Receive_IT+0x26>
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e016      	b.n	8004858 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_UART_Receive_IT+0x38>
 8004834:	2302      	movs	r3, #2
 8004836:	e00f      	b.n	8004858 <HAL_UART_Receive_IT+0x58>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	461a      	mov	r2, r3
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fab5 	bl	8004dbc <UART_Start_Receive_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	e000      	b.n	8004858 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b0ba      	sub	sp, #232	; 0xe8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800489e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_UART_IRQHandler+0x66>
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fb99 	bl	8004ff6 <UART_Receive_IT>
      return;
 80048c4:	e256      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80de 	beq.w	8004a8c <HAL_UART_IRQHandler+0x22c>
 80048d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80d1 	beq.w	8004a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_UART_IRQHandler+0xae>
 80048f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <HAL_UART_IRQHandler+0xd2>
 800491a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f043 0202 	orr.w	r2, r3, #2
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_UART_IRQHandler+0xf6>
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f043 0204 	orr.w	r2, r3, #4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <HAL_UART_IRQHandler+0x126>
 8004962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800496e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0208 	orr.w	r2, r3, #8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 81ed 	beq.w	8004d6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_UART_IRQHandler+0x14e>
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb24 	bl	8004ff6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_UART_IRQHandler+0x17a>
 80049d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d04f      	beq.n	8004a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa2c 	bl	8004e38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d141      	bne.n	8004a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	4a7d      	ldr	r2, [pc, #500]	; (8004c3c <HAL_UART_IRQHandler+0x3dc>)
 8004a48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe f9a2 	bl	8002d98 <HAL_DMA_Abort_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e00e      	b.n	8004a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f990 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e00a      	b.n	8004a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f98c 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e006      	b.n	8004a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f988 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a86:	e170      	b.n	8004d6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	bf00      	nop
    return;
 8004a8a:	e16e      	b.n	8004d6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	f040 814a 	bne.w	8004d2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8143 	beq.w	8004d2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 813c 	beq.w	8004d2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	f040 80b4 	bne.w	8004c40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8140 	beq.w	8004d6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	429a      	cmp	r2, r3
 8004af8:	f080 8139 	bcs.w	8004d6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	f000 8088 	beq.w	8004c22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1d9      	bne.n	8004b12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e1      	bne.n	8004b5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e3      	bne.n	8004b9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e3      	bne.n	8004be0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe f84b 	bl	8002cb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8b6 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c38:	e099      	b.n	8004d6e <HAL_UART_IRQHandler+0x50e>
 8004c3a:	bf00      	nop
 8004c3c:	08004eff 	.word	0x08004eff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 808b 	beq.w	8004d72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8086 	beq.w	8004d72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e3      	bne.n	8004c66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	623b      	str	r3, [r7, #32]
   return(result);
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e3      	bne.n	8004c9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0310 	bic.w	r3, r3, #16
 8004cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d08:	61fa      	str	r2, [r7, #28]
 8004d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	69b9      	ldr	r1, [r7, #24]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	617b      	str	r3, [r7, #20]
   return(result);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e3      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f83e 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d28:	e023      	b.n	8004d72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_UART_IRQHandler+0x4ea>
 8004d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8ef 	bl	8004f26 <UART_Transmit_IT>
    return;
 8004d48:	e014      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <HAL_UART_IRQHandler+0x514>
 8004d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f92f 	bl	8004fc6 <UART_EndTransmit_IT>
    return;
 8004d68:	e004      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
    return;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
      return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
      return;
 8004d72:	bf00      	nop
  }
}
 8004d74:	37e8      	adds	r7, #232	; 0xe8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2222      	movs	r2, #34	; 0x22
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0220 	orr.w	r2, r2, #32
 8004e28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b095      	sub	sp, #84	; 0x54
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e60:	643a      	str	r2, [r7, #64]	; 0x40
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3314      	adds	r3, #20
 8004e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d119      	bne.n	8004ee4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed0:	61ba      	str	r2, [r7, #24]
 8004ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ef2:	bf00      	nop
 8004ef4:	3754      	adds	r7, #84	; 0x54
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff ff39 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b21      	cmp	r3, #33	; 0x21
 8004f38:	d13e      	bne.n	8004fb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d114      	bne.n	8004f6e <UART_Transmit_IT+0x48>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d110      	bne.n	8004f6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]
 8004f6c:	e008      	b.n	8004f80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6211      	str	r1, [r2, #32]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10f      	bne.n	8004fb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fec8 	bl	8004d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b08c      	sub	sp, #48	; 0x30
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b22      	cmp	r3, #34	; 0x22
 8005008:	f040 80ab 	bne.w	8005162 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005014:	d117      	bne.n	8005046 <UART_Receive_IT+0x50>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d113      	bne.n	8005046 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005034:	b29a      	uxth	r2, r3
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	1c9a      	adds	r2, r3, #2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
 8005044:	e026      	b.n	8005094 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d007      	beq.n	800506a <UART_Receive_IT+0x74>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <UART_Receive_IT+0x82>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e008      	b.n	800508a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005084:	b2da      	uxtb	r2, r3
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4619      	mov	r1, r3
 80050a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d15a      	bne.n	800515e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0220 	bic.w	r2, r2, #32
 80050b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d135      	bne.n	8005154 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	613b      	str	r3, [r7, #16]
   return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510e:	623a      	str	r2, [r7, #32]
 8005110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69f9      	ldr	r1, [r7, #28]
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	61bb      	str	r3, [r7, #24]
   return(result);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b10      	cmp	r3, #16
 800512e:	d10a      	bne.n	8005146 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff fe29 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
 8005152:	e002      	b.n	800515a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fc f8df 	bl	8001318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e002      	b.n	8005164 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3730      	adds	r7, #48	; 0x30
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b0c0      	sub	sp, #256	; 0x100
 8005172:	af00      	add	r7, sp, #0
 8005174:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	68d9      	ldr	r1, [r3, #12]
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	ea40 0301 	orr.w	r3, r0, r1
 8005194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051c4:	f021 010c 	bic.w	r1, r1, #12
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051d2:	430b      	orrs	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	6999      	ldr	r1, [r3, #24]
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	ea40 0301 	orr.w	r3, r0, r1
 80051f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b8f      	ldr	r3, [pc, #572]	; (8005438 <UART_SetConfig+0x2cc>)
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d005      	beq.n	800520c <UART_SetConfig+0xa0>
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b8d      	ldr	r3, [pc, #564]	; (800543c <UART_SetConfig+0x2d0>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d104      	bne.n	8005216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe faea 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8005210:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005214:	e003      	b.n	800521e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005216:	f7fe fad1 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 800521a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005228:	f040 810c 	bne.w	8005444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005236:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800523a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800523e:	4622      	mov	r2, r4
 8005240:	462b      	mov	r3, r5
 8005242:	1891      	adds	r1, r2, r2
 8005244:	65b9      	str	r1, [r7, #88]	; 0x58
 8005246:	415b      	adcs	r3, r3
 8005248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800524a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800524e:	4621      	mov	r1, r4
 8005250:	eb12 0801 	adds.w	r8, r2, r1
 8005254:	4629      	mov	r1, r5
 8005256:	eb43 0901 	adc.w	r9, r3, r1
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526e:	4690      	mov	r8, r2
 8005270:	4699      	mov	r9, r3
 8005272:	4623      	mov	r3, r4
 8005274:	eb18 0303 	adds.w	r3, r8, r3
 8005278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800527c:	462b      	mov	r3, r5
 800527e:	eb49 0303 	adc.w	r3, r9, r3
 8005282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005292:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800529a:	460b      	mov	r3, r1
 800529c:	18db      	adds	r3, r3, r3
 800529e:	653b      	str	r3, [r7, #80]	; 0x50
 80052a0:	4613      	mov	r3, r2
 80052a2:	eb42 0303 	adc.w	r3, r2, r3
 80052a6:	657b      	str	r3, [r7, #84]	; 0x54
 80052a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052b0:	f7fb fcea 	bl	8000c88 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4b61      	ldr	r3, [pc, #388]	; (8005440 <UART_SetConfig+0x2d4>)
 80052ba:	fba3 2302 	umull	r2, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	011c      	lsls	r4, r3, #4
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	1891      	adds	r1, r2, r2
 80052da:	64b9      	str	r1, [r7, #72]	; 0x48
 80052dc:	415b      	adcs	r3, r3
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052e4:	4641      	mov	r1, r8
 80052e6:	eb12 0a01 	adds.w	sl, r2, r1
 80052ea:	4649      	mov	r1, r9
 80052ec:	eb43 0b01 	adc.w	fp, r3, r1
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005304:	4692      	mov	sl, r2
 8005306:	469b      	mov	fp, r3
 8005308:	4643      	mov	r3, r8
 800530a:	eb1a 0303 	adds.w	r3, sl, r3
 800530e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005312:	464b      	mov	r3, r9
 8005314:	eb4b 0303 	adc.w	r3, fp, r3
 8005318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005328:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800532c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005330:	460b      	mov	r3, r1
 8005332:	18db      	adds	r3, r3, r3
 8005334:	643b      	str	r3, [r7, #64]	; 0x40
 8005336:	4613      	mov	r3, r2
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
 800533e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005346:	f7fb fc9f 	bl	8000c88 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4611      	mov	r1, r2
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <UART_SetConfig+0x2d4>)
 8005352:	fba3 2301 	umull	r2, r3, r3, r1
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2264      	movs	r2, #100	; 0x64
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	1acb      	subs	r3, r1, r3
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <UART_SetConfig+0x2d4>)
 8005368:	fba3 2302 	umull	r2, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005374:	441c      	add	r4, r3
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005390:	415b      	adcs	r3, r3
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005398:	4641      	mov	r1, r8
 800539a:	1851      	adds	r1, r2, r1
 800539c:	6339      	str	r1, [r7, #48]	; 0x30
 800539e:	4649      	mov	r1, r9
 80053a0:	414b      	adcs	r3, r1
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053b0:	4659      	mov	r1, fp
 80053b2:	00cb      	lsls	r3, r1, #3
 80053b4:	4651      	mov	r1, sl
 80053b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ba:	4651      	mov	r1, sl
 80053bc:	00ca      	lsls	r2, r1, #3
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	4642      	mov	r2, r8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053cc:	464b      	mov	r3, r9
 80053ce:	460a      	mov	r2, r1
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053ec:	460b      	mov	r3, r1
 80053ee:	18db      	adds	r3, r3, r3
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f2:	4613      	mov	r3, r2
 80053f4:	eb42 0303 	adc.w	r3, r2, r3
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005402:	f7fb fc41 	bl	8000c88 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <UART_SetConfig+0x2d4>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2164      	movs	r1, #100	; 0x64
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	3332      	adds	r3, #50	; 0x32
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <UART_SetConfig+0x2d4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 0207 	and.w	r2, r3, #7
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4422      	add	r2, r4
 8005432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005434:	e105      	b.n	8005642 <UART_SetConfig+0x4d6>
 8005436:	bf00      	nop
 8005438:	40011000 	.word	0x40011000
 800543c:	40011400 	.word	0x40011400
 8005440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800544e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005456:	4642      	mov	r2, r8
 8005458:	464b      	mov	r3, r9
 800545a:	1891      	adds	r1, r2, r2
 800545c:	6239      	str	r1, [r7, #32]
 800545e:	415b      	adcs	r3, r3
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005466:	4641      	mov	r1, r8
 8005468:	1854      	adds	r4, r2, r1
 800546a:	4649      	mov	r1, r9
 800546c:	eb43 0501 	adc.w	r5, r3, r1
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	00eb      	lsls	r3, r5, #3
 800547a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547e:	00e2      	lsls	r2, r4, #3
 8005480:	4614      	mov	r4, r2
 8005482:	461d      	mov	r5, r3
 8005484:	4643      	mov	r3, r8
 8005486:	18e3      	adds	r3, r4, r3
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800548c:	464b      	mov	r3, r9
 800548e:	eb45 0303 	adc.w	r3, r5, r3
 8005492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054b2:	4629      	mov	r1, r5
 80054b4:	008b      	lsls	r3, r1, #2
 80054b6:	4621      	mov	r1, r4
 80054b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054bc:	4621      	mov	r1, r4
 80054be:	008a      	lsls	r2, r1, #2
 80054c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054c4:	f7fb fbe0 	bl	8000c88 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4b60      	ldr	r3, [pc, #384]	; (8005650 <UART_SetConfig+0x4e4>)
 80054ce:	fba3 2302 	umull	r2, r3, r3, r2
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	011c      	lsls	r4, r3, #4
 80054d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054e8:	4642      	mov	r2, r8
 80054ea:	464b      	mov	r3, r9
 80054ec:	1891      	adds	r1, r2, r2
 80054ee:	61b9      	str	r1, [r7, #24]
 80054f0:	415b      	adcs	r3, r3
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f8:	4641      	mov	r1, r8
 80054fa:	1851      	adds	r1, r2, r1
 80054fc:	6139      	str	r1, [r7, #16]
 80054fe:	4649      	mov	r1, r9
 8005500:	414b      	adcs	r3, r1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005510:	4659      	mov	r1, fp
 8005512:	00cb      	lsls	r3, r1, #3
 8005514:	4651      	mov	r1, sl
 8005516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800551a:	4651      	mov	r1, sl
 800551c:	00ca      	lsls	r2, r1, #3
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	4603      	mov	r3, r0
 8005524:	4642      	mov	r2, r8
 8005526:	189b      	adds	r3, r3, r2
 8005528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800552c:	464b      	mov	r3, r9
 800552e:	460a      	mov	r2, r1
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	67bb      	str	r3, [r7, #120]	; 0x78
 8005542:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005550:	4649      	mov	r1, r9
 8005552:	008b      	lsls	r3, r1, #2
 8005554:	4641      	mov	r1, r8
 8005556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800555a:	4641      	mov	r1, r8
 800555c:	008a      	lsls	r2, r1, #2
 800555e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005562:	f7fb fb91 	bl	8000c88 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <UART_SetConfig+0x4e4>)
 800556c:	fba3 1302 	umull	r1, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	2164      	movs	r1, #100	; 0x64
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	3332      	adds	r3, #50	; 0x32
 800557e:	4a34      	ldr	r2, [pc, #208]	; (8005650 <UART_SetConfig+0x4e4>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800558a:	441c      	add	r4, r3
 800558c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005590:	2200      	movs	r2, #0
 8005592:	673b      	str	r3, [r7, #112]	; 0x70
 8005594:	677a      	str	r2, [r7, #116]	; 0x74
 8005596:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	1891      	adds	r1, r2, r2
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	415b      	adcs	r3, r3
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055aa:	4641      	mov	r1, r8
 80055ac:	1851      	adds	r1, r2, r1
 80055ae:	6039      	str	r1, [r7, #0]
 80055b0:	4649      	mov	r1, r9
 80055b2:	414b      	adcs	r3, r1
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055c2:	4659      	mov	r1, fp
 80055c4:	00cb      	lsls	r3, r1, #3
 80055c6:	4651      	mov	r1, sl
 80055c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055cc:	4651      	mov	r1, sl
 80055ce:	00ca      	lsls	r2, r1, #3
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	4642      	mov	r2, r8
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	66bb      	str	r3, [r7, #104]	; 0x68
 80055dc:	464b      	mov	r3, r9
 80055de:	460a      	mov	r2, r1
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	663b      	str	r3, [r7, #96]	; 0x60
 80055f0:	667a      	str	r2, [r7, #100]	; 0x64
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055fe:	4649      	mov	r1, r9
 8005600:	008b      	lsls	r3, r1, #2
 8005602:	4641      	mov	r1, r8
 8005604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005608:	4641      	mov	r1, r8
 800560a:	008a      	lsls	r2, r1, #2
 800560c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005610:	f7fb fb3a 	bl	8000c88 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <UART_SetConfig+0x4e4>)
 800561a:	fba3 1302 	umull	r1, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2164      	movs	r1, #100	; 0x64
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	3332      	adds	r3, #50	; 0x32
 800562c:	4a08      	ldr	r2, [pc, #32]	; (8005650 <UART_SetConfig+0x4e4>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4422      	add	r2, r4
 8005640:	609a      	str	r2, [r3, #8]
}
 8005642:	bf00      	nop
 8005644:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005648:	46bd      	mov	sp, r7
 800564a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564e:	bf00      	nop
 8005650:	51eb851f 	.word	0x51eb851f

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000014 	.word	0x20000014

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4d0d      	ldr	r5, [pc, #52]	; (8005698 <__libc_init_array+0x38>)
 8005664:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005666:	1b64      	subs	r4, r4, r5
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	2600      	movs	r6, #0
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	4d0b      	ldr	r5, [pc, #44]	; (80056a0 <__libc_init_array+0x40>)
 8005672:	4c0c      	ldr	r4, [pc, #48]	; (80056a4 <__libc_init_array+0x44>)
 8005674:	f003 fc84 	bl	8008f80 <_init>
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	2600      	movs	r6, #0
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	0800978c 	.word	0x0800978c
 800569c:	0800978c 	.word	0x0800978c
 80056a0:	0800978c 	.word	0x0800978c
 80056a4:	08009790 	.word	0x08009790

080056a8 <memset>:
 80056a8:	4402      	add	r2, r0
 80056aa:	4603      	mov	r3, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <__cvt>:
 80056b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	ec55 4b10 	vmov	r4, r5, d0
 80056c0:	2d00      	cmp	r5, #0
 80056c2:	460e      	mov	r6, r1
 80056c4:	4619      	mov	r1, r3
 80056c6:	462b      	mov	r3, r5
 80056c8:	bfbb      	ittet	lt
 80056ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056ce:	461d      	movlt	r5, r3
 80056d0:	2300      	movge	r3, #0
 80056d2:	232d      	movlt	r3, #45	; 0x2d
 80056d4:	700b      	strb	r3, [r1, #0]
 80056d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056dc:	4691      	mov	r9, r2
 80056de:	f023 0820 	bic.w	r8, r3, #32
 80056e2:	bfbc      	itt	lt
 80056e4:	4622      	movlt	r2, r4
 80056e6:	4614      	movlt	r4, r2
 80056e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056ec:	d005      	beq.n	80056fa <__cvt+0x42>
 80056ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056f2:	d100      	bne.n	80056f6 <__cvt+0x3e>
 80056f4:	3601      	adds	r6, #1
 80056f6:	2102      	movs	r1, #2
 80056f8:	e000      	b.n	80056fc <__cvt+0x44>
 80056fa:	2103      	movs	r1, #3
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	ab02      	add	r3, sp, #8
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	ec45 4b10 	vmov	d0, r4, r5
 8005708:	4653      	mov	r3, sl
 800570a:	4632      	mov	r2, r6
 800570c:	f000 fd10 	bl	8006130 <_dtoa_r>
 8005710:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005714:	4607      	mov	r7, r0
 8005716:	d102      	bne.n	800571e <__cvt+0x66>
 8005718:	f019 0f01 	tst.w	r9, #1
 800571c:	d022      	beq.n	8005764 <__cvt+0xac>
 800571e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005722:	eb07 0906 	add.w	r9, r7, r6
 8005726:	d110      	bne.n	800574a <__cvt+0x92>
 8005728:	783b      	ldrb	r3, [r7, #0]
 800572a:	2b30      	cmp	r3, #48	; 0x30
 800572c:	d10a      	bne.n	8005744 <__cvt+0x8c>
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f7fb f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800573a:	b918      	cbnz	r0, 8005744 <__cvt+0x8c>
 800573c:	f1c6 0601 	rsb	r6, r6, #1
 8005740:	f8ca 6000 	str.w	r6, [sl]
 8005744:	f8da 3000 	ldr.w	r3, [sl]
 8005748:	4499      	add	r9, r3
 800574a:	2200      	movs	r2, #0
 800574c:	2300      	movs	r3, #0
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fb f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8005756:	b108      	cbz	r0, 800575c <__cvt+0xa4>
 8005758:	f8cd 900c 	str.w	r9, [sp, #12]
 800575c:	2230      	movs	r2, #48	; 0x30
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	454b      	cmp	r3, r9
 8005762:	d307      	bcc.n	8005774 <__cvt+0xbc>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005768:	1bdb      	subs	r3, r3, r7
 800576a:	4638      	mov	r0, r7
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	b004      	add	sp, #16
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	9103      	str	r1, [sp, #12]
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e7f0      	b.n	800575e <__cvt+0xa6>

0800577c <__exponent>:
 800577c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800577e:	4603      	mov	r3, r0
 8005780:	2900      	cmp	r1, #0
 8005782:	bfb8      	it	lt
 8005784:	4249      	neglt	r1, r1
 8005786:	f803 2b02 	strb.w	r2, [r3], #2
 800578a:	bfb4      	ite	lt
 800578c:	222d      	movlt	r2, #45	; 0x2d
 800578e:	222b      	movge	r2, #43	; 0x2b
 8005790:	2909      	cmp	r1, #9
 8005792:	7042      	strb	r2, [r0, #1]
 8005794:	dd2a      	ble.n	80057ec <__exponent+0x70>
 8005796:	f10d 0407 	add.w	r4, sp, #7
 800579a:	46a4      	mov	ip, r4
 800579c:	270a      	movs	r7, #10
 800579e:	46a6      	mov	lr, r4
 80057a0:	460a      	mov	r2, r1
 80057a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80057a6:	fb07 1516 	mls	r5, r7, r6, r1
 80057aa:	3530      	adds	r5, #48	; 0x30
 80057ac:	2a63      	cmp	r2, #99	; 0x63
 80057ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80057b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057b6:	4631      	mov	r1, r6
 80057b8:	dcf1      	bgt.n	800579e <__exponent+0x22>
 80057ba:	3130      	adds	r1, #48	; 0x30
 80057bc:	f1ae 0502 	sub.w	r5, lr, #2
 80057c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057c4:	1c44      	adds	r4, r0, #1
 80057c6:	4629      	mov	r1, r5
 80057c8:	4561      	cmp	r1, ip
 80057ca:	d30a      	bcc.n	80057e2 <__exponent+0x66>
 80057cc:	f10d 0209 	add.w	r2, sp, #9
 80057d0:	eba2 020e 	sub.w	r2, r2, lr
 80057d4:	4565      	cmp	r5, ip
 80057d6:	bf88      	it	hi
 80057d8:	2200      	movhi	r2, #0
 80057da:	4413      	add	r3, r2
 80057dc:	1a18      	subs	r0, r3, r0
 80057de:	b003      	add	sp, #12
 80057e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057ea:	e7ed      	b.n	80057c8 <__exponent+0x4c>
 80057ec:	2330      	movs	r3, #48	; 0x30
 80057ee:	3130      	adds	r1, #48	; 0x30
 80057f0:	7083      	strb	r3, [r0, #2]
 80057f2:	70c1      	strb	r1, [r0, #3]
 80057f4:	1d03      	adds	r3, r0, #4
 80057f6:	e7f1      	b.n	80057dc <__exponent+0x60>

080057f8 <_printf_float>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	ed2d 8b02 	vpush	{d8}
 8005800:	b08d      	sub	sp, #52	; 0x34
 8005802:	460c      	mov	r4, r1
 8005804:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005808:	4616      	mov	r6, r2
 800580a:	461f      	mov	r7, r3
 800580c:	4605      	mov	r5, r0
 800580e:	f001 fa7d 	bl	8006d0c <_localeconv_r>
 8005812:	f8d0 a000 	ldr.w	sl, [r0]
 8005816:	4650      	mov	r0, sl
 8005818:	f7fa fcfa 	bl	8000210 <strlen>
 800581c:	2300      	movs	r3, #0
 800581e:	930a      	str	r3, [sp, #40]	; 0x28
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	f8d8 3000 	ldr.w	r3, [r8]
 8005828:	f894 b018 	ldrb.w	fp, [r4, #24]
 800582c:	3307      	adds	r3, #7
 800582e:	f023 0307 	bic.w	r3, r3, #7
 8005832:	f103 0208 	add.w	r2, r3, #8
 8005836:	f8c8 2000 	str.w	r2, [r8]
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005842:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005846:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800584a:	9307      	str	r3, [sp, #28]
 800584c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005850:	ee08 0a10 	vmov	s16, r0
 8005854:	4b9f      	ldr	r3, [pc, #636]	; (8005ad4 <_printf_float+0x2dc>)
 8005856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	f7fb f985 	bl	8000b6c <__aeabi_dcmpun>
 8005862:	bb88      	cbnz	r0, 80058c8 <_printf_float+0xd0>
 8005864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005868:	4b9a      	ldr	r3, [pc, #616]	; (8005ad4 <_printf_float+0x2dc>)
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	f7fb f95f 	bl	8000b30 <__aeabi_dcmple>
 8005872:	bb48      	cbnz	r0, 80058c8 <_printf_float+0xd0>
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	f7fb f94e 	bl	8000b1c <__aeabi_dcmplt>
 8005880:	b110      	cbz	r0, 8005888 <_printf_float+0x90>
 8005882:	232d      	movs	r3, #45	; 0x2d
 8005884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005888:	4b93      	ldr	r3, [pc, #588]	; (8005ad8 <_printf_float+0x2e0>)
 800588a:	4894      	ldr	r0, [pc, #592]	; (8005adc <_printf_float+0x2e4>)
 800588c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005890:	bf94      	ite	ls
 8005892:	4698      	movls	r8, r3
 8005894:	4680      	movhi	r8, r0
 8005896:	2303      	movs	r3, #3
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	9b05      	ldr	r3, [sp, #20]
 800589c:	f023 0204 	bic.w	r2, r3, #4
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	f04f 0900 	mov.w	r9, #0
 80058a6:	9700      	str	r7, [sp, #0]
 80058a8:	4633      	mov	r3, r6
 80058aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80058ac:	4621      	mov	r1, r4
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f9d8 	bl	8005c64 <_printf_common>
 80058b4:	3001      	adds	r0, #1
 80058b6:	f040 8090 	bne.w	80059da <_printf_float+0x1e2>
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295
 80058be:	b00d      	add	sp, #52	; 0x34
 80058c0:	ecbd 8b02 	vpop	{d8}
 80058c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	4649      	mov	r1, r9
 80058d0:	f7fb f94c 	bl	8000b6c <__aeabi_dcmpun>
 80058d4:	b140      	cbz	r0, 80058e8 <_printf_float+0xf0>
 80058d6:	464b      	mov	r3, r9
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfbc      	itt	lt
 80058dc:	232d      	movlt	r3, #45	; 0x2d
 80058de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058e2:	487f      	ldr	r0, [pc, #508]	; (8005ae0 <_printf_float+0x2e8>)
 80058e4:	4b7f      	ldr	r3, [pc, #508]	; (8005ae4 <_printf_float+0x2ec>)
 80058e6:	e7d1      	b.n	800588c <_printf_float+0x94>
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058ee:	9206      	str	r2, [sp, #24]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	d13f      	bne.n	8005974 <_printf_float+0x17c>
 80058f4:	2306      	movs	r3, #6
 80058f6:	6063      	str	r3, [r4, #4]
 80058f8:	9b05      	ldr	r3, [sp, #20]
 80058fa:	6861      	ldr	r1, [r4, #4]
 80058fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005900:	2300      	movs	r3, #0
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	ab0a      	add	r3, sp, #40	; 0x28
 8005906:	e9cd b301 	strd	fp, r3, [sp, #4]
 800590a:	ab09      	add	r3, sp, #36	; 0x24
 800590c:	ec49 8b10 	vmov	d0, r8, r9
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6022      	str	r2, [r4, #0]
 8005914:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005918:	4628      	mov	r0, r5
 800591a:	f7ff fecd 	bl	80056b8 <__cvt>
 800591e:	9b06      	ldr	r3, [sp, #24]
 8005920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005922:	2b47      	cmp	r3, #71	; 0x47
 8005924:	4680      	mov	r8, r0
 8005926:	d108      	bne.n	800593a <_printf_float+0x142>
 8005928:	1cc8      	adds	r0, r1, #3
 800592a:	db02      	blt.n	8005932 <_printf_float+0x13a>
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	4299      	cmp	r1, r3
 8005930:	dd41      	ble.n	80059b6 <_printf_float+0x1be>
 8005932:	f1ab 0b02 	sub.w	fp, fp, #2
 8005936:	fa5f fb8b 	uxtb.w	fp, fp
 800593a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800593e:	d820      	bhi.n	8005982 <_printf_float+0x18a>
 8005940:	3901      	subs	r1, #1
 8005942:	465a      	mov	r2, fp
 8005944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005948:	9109      	str	r1, [sp, #36]	; 0x24
 800594a:	f7ff ff17 	bl	800577c <__exponent>
 800594e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005950:	1813      	adds	r3, r2, r0
 8005952:	2a01      	cmp	r2, #1
 8005954:	4681      	mov	r9, r0
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	dc02      	bgt.n	8005960 <_printf_float+0x168>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	07d2      	lsls	r2, r2, #31
 800595e:	d501      	bpl.n	8005964 <_printf_float+0x16c>
 8005960:	3301      	adds	r3, #1
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005968:	2b00      	cmp	r3, #0
 800596a:	d09c      	beq.n	80058a6 <_printf_float+0xae>
 800596c:	232d      	movs	r3, #45	; 0x2d
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005972:	e798      	b.n	80058a6 <_printf_float+0xae>
 8005974:	9a06      	ldr	r2, [sp, #24]
 8005976:	2a47      	cmp	r2, #71	; 0x47
 8005978:	d1be      	bne.n	80058f8 <_printf_float+0x100>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1bc      	bne.n	80058f8 <_printf_float+0x100>
 800597e:	2301      	movs	r3, #1
 8005980:	e7b9      	b.n	80058f6 <_printf_float+0xfe>
 8005982:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005986:	d118      	bne.n	80059ba <_printf_float+0x1c2>
 8005988:	2900      	cmp	r1, #0
 800598a:	6863      	ldr	r3, [r4, #4]
 800598c:	dd0b      	ble.n	80059a6 <_printf_float+0x1ae>
 800598e:	6121      	str	r1, [r4, #16]
 8005990:	b913      	cbnz	r3, 8005998 <_printf_float+0x1a0>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	07d0      	lsls	r0, r2, #31
 8005996:	d502      	bpl.n	800599e <_printf_float+0x1a6>
 8005998:	3301      	adds	r3, #1
 800599a:	440b      	add	r3, r1
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	65a1      	str	r1, [r4, #88]	; 0x58
 80059a0:	f04f 0900 	mov.w	r9, #0
 80059a4:	e7de      	b.n	8005964 <_printf_float+0x16c>
 80059a6:	b913      	cbnz	r3, 80059ae <_printf_float+0x1b6>
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	07d2      	lsls	r2, r2, #31
 80059ac:	d501      	bpl.n	80059b2 <_printf_float+0x1ba>
 80059ae:	3302      	adds	r3, #2
 80059b0:	e7f4      	b.n	800599c <_printf_float+0x1a4>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e7f2      	b.n	800599c <_printf_float+0x1a4>
 80059b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059bc:	4299      	cmp	r1, r3
 80059be:	db05      	blt.n	80059cc <_printf_float+0x1d4>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	6121      	str	r1, [r4, #16]
 80059c4:	07d8      	lsls	r0, r3, #31
 80059c6:	d5ea      	bpl.n	800599e <_printf_float+0x1a6>
 80059c8:	1c4b      	adds	r3, r1, #1
 80059ca:	e7e7      	b.n	800599c <_printf_float+0x1a4>
 80059cc:	2900      	cmp	r1, #0
 80059ce:	bfd4      	ite	le
 80059d0:	f1c1 0202 	rsble	r2, r1, #2
 80059d4:	2201      	movgt	r2, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	e7e0      	b.n	800599c <_printf_float+0x1a4>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	055a      	lsls	r2, r3, #21
 80059de:	d407      	bmi.n	80059f0 <_printf_float+0x1f8>
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	4642      	mov	r2, r8
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	d12c      	bne.n	8005a48 <_printf_float+0x250>
 80059ee:	e764      	b.n	80058ba <_printf_float+0xc2>
 80059f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059f4:	f240 80e0 	bls.w	8005bb8 <_printf_float+0x3c0>
 80059f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059fc:	2200      	movs	r2, #0
 80059fe:	2300      	movs	r3, #0
 8005a00:	f7fb f882 	bl	8000b08 <__aeabi_dcmpeq>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d034      	beq.n	8005a72 <_printf_float+0x27a>
 8005a08:	4a37      	ldr	r2, [pc, #220]	; (8005ae8 <_printf_float+0x2f0>)
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f af51 	beq.w	80058ba <_printf_float+0xc2>
 8005a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	db02      	blt.n	8005a26 <_printf_float+0x22e>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	07d8      	lsls	r0, r3, #31
 8005a24:	d510      	bpl.n	8005a48 <_printf_float+0x250>
 8005a26:	ee18 3a10 	vmov	r3, s16
 8005a2a:	4652      	mov	r2, sl
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f af41 	beq.w	80058ba <_printf_float+0xc2>
 8005a38:	f04f 0800 	mov.w	r8, #0
 8005a3c:	f104 091a 	add.w	r9, r4, #26
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	3b01      	subs	r3, #1
 8005a44:	4543      	cmp	r3, r8
 8005a46:	dc09      	bgt.n	8005a5c <_printf_float+0x264>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	079b      	lsls	r3, r3, #30
 8005a4c:	f100 8105 	bmi.w	8005c5a <_printf_float+0x462>
 8005a50:	68e0      	ldr	r0, [r4, #12]
 8005a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a54:	4298      	cmp	r0, r3
 8005a56:	bfb8      	it	lt
 8005a58:	4618      	movlt	r0, r3
 8005a5a:	e730      	b.n	80058be <_printf_float+0xc6>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	464a      	mov	r2, r9
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f af27 	beq.w	80058ba <_printf_float+0xc2>
 8005a6c:	f108 0801 	add.w	r8, r8, #1
 8005a70:	e7e6      	b.n	8005a40 <_printf_float+0x248>
 8005a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dc39      	bgt.n	8005aec <_printf_float+0x2f4>
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <_printf_float+0x2f0>)
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f af19 	beq.w	80058ba <_printf_float+0xc2>
 8005a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d102      	bne.n	8005a96 <_printf_float+0x29e>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	07d9      	lsls	r1, r3, #31
 8005a94:	d5d8      	bpl.n	8005a48 <_printf_float+0x250>
 8005a96:	ee18 3a10 	vmov	r3, s16
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f af09 	beq.w	80058ba <_printf_float+0xc2>
 8005aa8:	f04f 0900 	mov.w	r9, #0
 8005aac:	f104 0a1a 	add.w	sl, r4, #26
 8005ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab2:	425b      	negs	r3, r3
 8005ab4:	454b      	cmp	r3, r9
 8005ab6:	dc01      	bgt.n	8005abc <_printf_float+0x2c4>
 8005ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aba:	e792      	b.n	80059e2 <_printf_float+0x1ea>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4652      	mov	r2, sl
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f aef7 	beq.w	80058ba <_printf_float+0xc2>
 8005acc:	f109 0901 	add.w	r9, r9, #1
 8005ad0:	e7ee      	b.n	8005ab0 <_printf_float+0x2b8>
 8005ad2:	bf00      	nop
 8005ad4:	7fefffff 	.word	0x7fefffff
 8005ad8:	08008fe0 	.word	0x08008fe0
 8005adc:	08008fe4 	.word	0x08008fe4
 8005ae0:	08008fec 	.word	0x08008fec
 8005ae4:	08008fe8 	.word	0x08008fe8
 8005ae8:	08008ff0 	.word	0x08008ff0
 8005aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005af0:	429a      	cmp	r2, r3
 8005af2:	bfa8      	it	ge
 8005af4:	461a      	movge	r2, r3
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	4691      	mov	r9, r2
 8005afa:	dc37      	bgt.n	8005b6c <_printf_float+0x374>
 8005afc:	f04f 0b00 	mov.w	fp, #0
 8005b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b04:	f104 021a 	add.w	r2, r4, #26
 8005b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b0a:	9305      	str	r3, [sp, #20]
 8005b0c:	eba3 0309 	sub.w	r3, r3, r9
 8005b10:	455b      	cmp	r3, fp
 8005b12:	dc33      	bgt.n	8005b7c <_printf_float+0x384>
 8005b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	db3b      	blt.n	8005b94 <_printf_float+0x39c>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	07da      	lsls	r2, r3, #31
 8005b20:	d438      	bmi.n	8005b94 <_printf_float+0x39c>
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	9a05      	ldr	r2, [sp, #20]
 8005b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b28:	1a9a      	subs	r2, r3, r2
 8005b2a:	eba3 0901 	sub.w	r9, r3, r1
 8005b2e:	4591      	cmp	r9, r2
 8005b30:	bfa8      	it	ge
 8005b32:	4691      	movge	r9, r2
 8005b34:	f1b9 0f00 	cmp.w	r9, #0
 8005b38:	dc35      	bgt.n	8005ba6 <_printf_float+0x3ae>
 8005b3a:	f04f 0800 	mov.w	r8, #0
 8005b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b42:	f104 0a1a 	add.w	sl, r4, #26
 8005b46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	eba3 0309 	sub.w	r3, r3, r9
 8005b50:	4543      	cmp	r3, r8
 8005b52:	f77f af79 	ble.w	8005a48 <_printf_float+0x250>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4652      	mov	r2, sl
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f aeaa 	beq.w	80058ba <_printf_float+0xc2>
 8005b66:	f108 0801 	add.w	r8, r8, #1
 8005b6a:	e7ec      	b.n	8005b46 <_printf_float+0x34e>
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4642      	mov	r2, r8
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	d1c0      	bne.n	8005afc <_printf_float+0x304>
 8005b7a:	e69e      	b.n	80058ba <_printf_float+0xc2>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	9205      	str	r2, [sp, #20]
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f ae97 	beq.w	80058ba <_printf_float+0xc2>
 8005b8c:	9a05      	ldr	r2, [sp, #20]
 8005b8e:	f10b 0b01 	add.w	fp, fp, #1
 8005b92:	e7b9      	b.n	8005b08 <_printf_float+0x310>
 8005b94:	ee18 3a10 	vmov	r3, s16
 8005b98:	4652      	mov	r2, sl
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d1be      	bne.n	8005b22 <_printf_float+0x32a>
 8005ba4:	e689      	b.n	80058ba <_printf_float+0xc2>
 8005ba6:	9a05      	ldr	r2, [sp, #20]
 8005ba8:	464b      	mov	r3, r9
 8005baa:	4442      	add	r2, r8
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	47b8      	blx	r7
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d1c1      	bne.n	8005b3a <_printf_float+0x342>
 8005bb6:	e680      	b.n	80058ba <_printf_float+0xc2>
 8005bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bba:	2a01      	cmp	r2, #1
 8005bbc:	dc01      	bgt.n	8005bc2 <_printf_float+0x3ca>
 8005bbe:	07db      	lsls	r3, r3, #31
 8005bc0:	d538      	bpl.n	8005c34 <_printf_float+0x43c>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f ae74 	beq.w	80058ba <_printf_float+0xc2>
 8005bd2:	ee18 3a10 	vmov	r3, s16
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f ae6b 	beq.w	80058ba <_printf_float+0xc2>
 8005be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005be8:	2200      	movs	r2, #0
 8005bea:	2300      	movs	r3, #0
 8005bec:	f7fa ff8c 	bl	8000b08 <__aeabi_dcmpeq>
 8005bf0:	b9d8      	cbnz	r0, 8005c2a <_printf_float+0x432>
 8005bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf4:	f108 0201 	add.w	r2, r8, #1
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	d10e      	bne.n	8005c22 <_printf_float+0x42a>
 8005c04:	e659      	b.n	80058ba <_printf_float+0xc2>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4652      	mov	r2, sl
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae52 	beq.w	80058ba <_printf_float+0xc2>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	4543      	cmp	r3, r8
 8005c20:	dcf1      	bgt.n	8005c06 <_printf_float+0x40e>
 8005c22:	464b      	mov	r3, r9
 8005c24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c28:	e6dc      	b.n	80059e4 <_printf_float+0x1ec>
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	f104 0a1a 	add.w	sl, r4, #26
 8005c32:	e7f2      	b.n	8005c1a <_printf_float+0x422>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4642      	mov	r2, r8
 8005c38:	e7df      	b.n	8005bfa <_printf_float+0x402>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f ae38 	beq.w	80058ba <_printf_float+0xc2>
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c52:	1a5b      	subs	r3, r3, r1
 8005c54:	4543      	cmp	r3, r8
 8005c56:	dcf0      	bgt.n	8005c3a <_printf_float+0x442>
 8005c58:	e6fa      	b.n	8005a50 <_printf_float+0x258>
 8005c5a:	f04f 0800 	mov.w	r8, #0
 8005c5e:	f104 0919 	add.w	r9, r4, #25
 8005c62:	e7f4      	b.n	8005c4e <_printf_float+0x456>

08005c64 <_printf_common>:
 8005c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	4616      	mov	r6, r2
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	688a      	ldr	r2, [r1, #8]
 8005c6e:	690b      	ldr	r3, [r1, #16]
 8005c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bfb8      	it	lt
 8005c78:	4613      	movlt	r3, r2
 8005c7a:	6033      	str	r3, [r6, #0]
 8005c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c80:	4607      	mov	r7, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	b10a      	cbz	r2, 8005c8a <_printf_common+0x26>
 8005c86:	3301      	adds	r3, #1
 8005c88:	6033      	str	r3, [r6, #0]
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	0699      	lsls	r1, r3, #26
 8005c8e:	bf42      	ittt	mi
 8005c90:	6833      	ldrmi	r3, [r6, #0]
 8005c92:	3302      	addmi	r3, #2
 8005c94:	6033      	strmi	r3, [r6, #0]
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	f015 0506 	ands.w	r5, r5, #6
 8005c9c:	d106      	bne.n	8005cac <_printf_common+0x48>
 8005c9e:	f104 0a19 	add.w	sl, r4, #25
 8005ca2:	68e3      	ldr	r3, [r4, #12]
 8005ca4:	6832      	ldr	r2, [r6, #0]
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	dc26      	bgt.n	8005cfa <_printf_common+0x96>
 8005cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb0:	1e13      	subs	r3, r2, #0
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	bf18      	it	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	0692      	lsls	r2, r2, #26
 8005cba:	d42b      	bmi.n	8005d14 <_printf_common+0xb0>
 8005cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d01e      	beq.n	8005d08 <_printf_common+0xa4>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	68e5      	ldr	r5, [r4, #12]
 8005cce:	6832      	ldr	r2, [r6, #0]
 8005cd0:	f003 0306 	and.w	r3, r3, #6
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	bf08      	it	eq
 8005cd8:	1aad      	subeq	r5, r5, r2
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	6922      	ldr	r2, [r4, #16]
 8005cde:	bf0c      	ite	eq
 8005ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce4:	2500      	movne	r5, #0
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bfc4      	itt	gt
 8005cea:	1a9b      	subgt	r3, r3, r2
 8005cec:	18ed      	addgt	r5, r5, r3
 8005cee:	2600      	movs	r6, #0
 8005cf0:	341a      	adds	r4, #26
 8005cf2:	42b5      	cmp	r5, r6
 8005cf4:	d11a      	bne.n	8005d2c <_printf_common+0xc8>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e008      	b.n	8005d0c <_printf_common+0xa8>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4638      	mov	r0, r7
 8005d02:	47c0      	blx	r8
 8005d04:	3001      	adds	r0, #1
 8005d06:	d103      	bne.n	8005d10 <_printf_common+0xac>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d10:	3501      	adds	r5, #1
 8005d12:	e7c6      	b.n	8005ca2 <_printf_common+0x3e>
 8005d14:	18e1      	adds	r1, r4, r3
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	2030      	movs	r0, #48	; 0x30
 8005d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d1e:	4422      	add	r2, r4
 8005d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d28:	3302      	adds	r3, #2
 8005d2a:	e7c7      	b.n	8005cbc <_printf_common+0x58>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4622      	mov	r2, r4
 8005d30:	4649      	mov	r1, r9
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c0      	blx	r8
 8005d36:	3001      	adds	r0, #1
 8005d38:	d0e6      	beq.n	8005d08 <_printf_common+0xa4>
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7d9      	b.n	8005cf2 <_printf_common+0x8e>
	...

08005d40 <_printf_i>:
 8005d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	7e0f      	ldrb	r7, [r1, #24]
 8005d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d48:	2f78      	cmp	r7, #120	; 0x78
 8005d4a:	4691      	mov	r9, r2
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	469a      	mov	sl, r3
 8005d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d56:	d807      	bhi.n	8005d68 <_printf_i+0x28>
 8005d58:	2f62      	cmp	r7, #98	; 0x62
 8005d5a:	d80a      	bhi.n	8005d72 <_printf_i+0x32>
 8005d5c:	2f00      	cmp	r7, #0
 8005d5e:	f000 80d8 	beq.w	8005f12 <_printf_i+0x1d2>
 8005d62:	2f58      	cmp	r7, #88	; 0x58
 8005d64:	f000 80a3 	beq.w	8005eae <_printf_i+0x16e>
 8005d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d70:	e03a      	b.n	8005de8 <_printf_i+0xa8>
 8005d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d76:	2b15      	cmp	r3, #21
 8005d78:	d8f6      	bhi.n	8005d68 <_printf_i+0x28>
 8005d7a:	a101      	add	r1, pc, #4	; (adr r1, 8005d80 <_printf_i+0x40>)
 8005d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005ded 	.word	0x08005ded
 8005d88:	08005d69 	.word	0x08005d69
 8005d8c:	08005d69 	.word	0x08005d69
 8005d90:	08005d69 	.word	0x08005d69
 8005d94:	08005d69 	.word	0x08005d69
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005d69 	.word	0x08005d69
 8005da0:	08005d69 	.word	0x08005d69
 8005da4:	08005d69 	.word	0x08005d69
 8005da8:	08005d69 	.word	0x08005d69
 8005dac:	08005ef9 	.word	0x08005ef9
 8005db0:	08005e1d 	.word	0x08005e1d
 8005db4:	08005edb 	.word	0x08005edb
 8005db8:	08005d69 	.word	0x08005d69
 8005dbc:	08005d69 	.word	0x08005d69
 8005dc0:	08005f1b 	.word	0x08005f1b
 8005dc4:	08005d69 	.word	0x08005d69
 8005dc8:	08005e1d 	.word	0x08005e1d
 8005dcc:	08005d69 	.word	0x08005d69
 8005dd0:	08005d69 	.word	0x08005d69
 8005dd4:	08005ee3 	.word	0x08005ee3
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	602a      	str	r2, [r5, #0]
 8005de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0a3      	b.n	8005f34 <_printf_i+0x1f4>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	6829      	ldr	r1, [r5, #0]
 8005df0:	0606      	lsls	r6, r0, #24
 8005df2:	f101 0304 	add.w	r3, r1, #4
 8005df6:	d50a      	bpl.n	8005e0e <_printf_i+0xce>
 8005df8:	680e      	ldr	r6, [r1, #0]
 8005dfa:	602b      	str	r3, [r5, #0]
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	da03      	bge.n	8005e08 <_printf_i+0xc8>
 8005e00:	232d      	movs	r3, #45	; 0x2d
 8005e02:	4276      	negs	r6, r6
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e08:	485e      	ldr	r0, [pc, #376]	; (8005f84 <_printf_i+0x244>)
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	e019      	b.n	8005e42 <_printf_i+0x102>
 8005e0e:	680e      	ldr	r6, [r1, #0]
 8005e10:	602b      	str	r3, [r5, #0]
 8005e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e16:	bf18      	it	ne
 8005e18:	b236      	sxthne	r6, r6
 8005e1a:	e7ef      	b.n	8005dfc <_printf_i+0xbc>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	6820      	ldr	r0, [r4, #0]
 8005e20:	1d19      	adds	r1, r3, #4
 8005e22:	6029      	str	r1, [r5, #0]
 8005e24:	0601      	lsls	r1, r0, #24
 8005e26:	d501      	bpl.n	8005e2c <_printf_i+0xec>
 8005e28:	681e      	ldr	r6, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <_printf_i+0xf2>
 8005e2c:	0646      	lsls	r6, r0, #25
 8005e2e:	d5fb      	bpl.n	8005e28 <_printf_i+0xe8>
 8005e30:	881e      	ldrh	r6, [r3, #0]
 8005e32:	4854      	ldr	r0, [pc, #336]	; (8005f84 <_printf_i+0x244>)
 8005e34:	2f6f      	cmp	r7, #111	; 0x6f
 8005e36:	bf0c      	ite	eq
 8005e38:	2308      	moveq	r3, #8
 8005e3a:	230a      	movne	r3, #10
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e42:	6865      	ldr	r5, [r4, #4]
 8005e44:	60a5      	str	r5, [r4, #8]
 8005e46:	2d00      	cmp	r5, #0
 8005e48:	bfa2      	ittt	ge
 8005e4a:	6821      	ldrge	r1, [r4, #0]
 8005e4c:	f021 0104 	bicge.w	r1, r1, #4
 8005e50:	6021      	strge	r1, [r4, #0]
 8005e52:	b90e      	cbnz	r6, 8005e58 <_printf_i+0x118>
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	d04d      	beq.n	8005ef4 <_printf_i+0x1b4>
 8005e58:	4615      	mov	r5, r2
 8005e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e62:	5dc7      	ldrb	r7, [r0, r7]
 8005e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e68:	4637      	mov	r7, r6
 8005e6a:	42bb      	cmp	r3, r7
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	d9f4      	bls.n	8005e5a <_printf_i+0x11a>
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d10b      	bne.n	8005e8c <_printf_i+0x14c>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07de      	lsls	r6, r3, #31
 8005e78:	d508      	bpl.n	8005e8c <_printf_i+0x14c>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6861      	ldr	r1, [r4, #4]
 8005e7e:	4299      	cmp	r1, r3
 8005e80:	bfde      	ittt	le
 8005e82:	2330      	movle	r3, #48	; 0x30
 8005e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e8c:	1b52      	subs	r2, r2, r5
 8005e8e:	6122      	str	r2, [r4, #16]
 8005e90:	f8cd a000 	str.w	sl, [sp]
 8005e94:	464b      	mov	r3, r9
 8005e96:	aa03      	add	r2, sp, #12
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f7ff fee2 	bl	8005c64 <_printf_common>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d14c      	bne.n	8005f3e <_printf_i+0x1fe>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	b004      	add	sp, #16
 8005eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eae:	4835      	ldr	r0, [pc, #212]	; (8005f84 <_printf_i+0x244>)
 8005eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005eb4:	6829      	ldr	r1, [r5, #0]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ebc:	6029      	str	r1, [r5, #0]
 8005ebe:	061d      	lsls	r5, r3, #24
 8005ec0:	d514      	bpl.n	8005eec <_printf_i+0x1ac>
 8005ec2:	07df      	lsls	r7, r3, #31
 8005ec4:	bf44      	itt	mi
 8005ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eca:	6023      	strmi	r3, [r4, #0]
 8005ecc:	b91e      	cbnz	r6, 8005ed6 <_printf_i+0x196>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f023 0320 	bic.w	r3, r3, #32
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	e7b0      	b.n	8005e3c <_printf_i+0xfc>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f043 0320 	orr.w	r3, r3, #32
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	2378      	movs	r3, #120	; 0x78
 8005ee4:	4828      	ldr	r0, [pc, #160]	; (8005f88 <_printf_i+0x248>)
 8005ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eea:	e7e3      	b.n	8005eb4 <_printf_i+0x174>
 8005eec:	0659      	lsls	r1, r3, #25
 8005eee:	bf48      	it	mi
 8005ef0:	b2b6      	uxthmi	r6, r6
 8005ef2:	e7e6      	b.n	8005ec2 <_printf_i+0x182>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	e7bb      	b.n	8005e70 <_printf_i+0x130>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	6826      	ldr	r6, [r4, #0]
 8005efc:	6961      	ldr	r1, [r4, #20]
 8005efe:	1d18      	adds	r0, r3, #4
 8005f00:	6028      	str	r0, [r5, #0]
 8005f02:	0635      	lsls	r5, r6, #24
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	d501      	bpl.n	8005f0c <_printf_i+0x1cc>
 8005f08:	6019      	str	r1, [r3, #0]
 8005f0a:	e002      	b.n	8005f12 <_printf_i+0x1d2>
 8005f0c:	0670      	lsls	r0, r6, #25
 8005f0e:	d5fb      	bpl.n	8005f08 <_printf_i+0x1c8>
 8005f10:	8019      	strh	r1, [r3, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	4615      	mov	r5, r2
 8005f18:	e7ba      	b.n	8005e90 <_printf_i+0x150>
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	1d1a      	adds	r2, r3, #4
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	681d      	ldr	r5, [r3, #0]
 8005f22:	6862      	ldr	r2, [r4, #4]
 8005f24:	2100      	movs	r1, #0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f7fa f97a 	bl	8000220 <memchr>
 8005f2c:	b108      	cbz	r0, 8005f32 <_printf_i+0x1f2>
 8005f2e:	1b40      	subs	r0, r0, r5
 8005f30:	6060      	str	r0, [r4, #4]
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	2300      	movs	r3, #0
 8005f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3c:	e7a8      	b.n	8005e90 <_printf_i+0x150>
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	462a      	mov	r2, r5
 8005f42:	4649      	mov	r1, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	47d0      	blx	sl
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d0ab      	beq.n	8005ea4 <_printf_i+0x164>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	079b      	lsls	r3, r3, #30
 8005f50:	d413      	bmi.n	8005f7a <_printf_i+0x23a>
 8005f52:	68e0      	ldr	r0, [r4, #12]
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	4298      	cmp	r0, r3
 8005f58:	bfb8      	it	lt
 8005f5a:	4618      	movlt	r0, r3
 8005f5c:	e7a4      	b.n	8005ea8 <_printf_i+0x168>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4632      	mov	r2, r6
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d09b      	beq.n	8005ea4 <_printf_i+0x164>
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	9903      	ldr	r1, [sp, #12]
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	42ab      	cmp	r3, r5
 8005f76:	dcf2      	bgt.n	8005f5e <_printf_i+0x21e>
 8005f78:	e7eb      	b.n	8005f52 <_printf_i+0x212>
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	f104 0619 	add.w	r6, r4, #25
 8005f80:	e7f5      	b.n	8005f6e <_printf_i+0x22e>
 8005f82:	bf00      	nop
 8005f84:	08008ff2 	.word	0x08008ff2
 8005f88:	08009003 	.word	0x08009003

08005f8c <sniprintf>:
 8005f8c:	b40c      	push	{r2, r3}
 8005f8e:	b530      	push	{r4, r5, lr}
 8005f90:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <sniprintf+0x64>)
 8005f92:	1e0c      	subs	r4, r1, #0
 8005f94:	681d      	ldr	r5, [r3, #0]
 8005f96:	b09d      	sub	sp, #116	; 0x74
 8005f98:	da08      	bge.n	8005fac <sniprintf+0x20>
 8005f9a:	238b      	movs	r3, #139	; 0x8b
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa2:	b01d      	add	sp, #116	; 0x74
 8005fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fa8:	b002      	add	sp, #8
 8005faa:	4770      	bx	lr
 8005fac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fb4:	bf14      	ite	ne
 8005fb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fba:	4623      	moveq	r3, r4
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	9006      	str	r0, [sp, #24]
 8005fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fce:	ab21      	add	r3, sp, #132	; 0x84
 8005fd0:	a902      	add	r1, sp, #8
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	f001 fb89 	bl	80076ec <_svfiprintf_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	bfbc      	itt	lt
 8005fde:	238b      	movlt	r3, #139	; 0x8b
 8005fe0:	602b      	strlt	r3, [r5, #0]
 8005fe2:	2c00      	cmp	r4, #0
 8005fe4:	d0dd      	beq.n	8005fa2 <sniprintf+0x16>
 8005fe6:	9b02      	ldr	r3, [sp, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	e7d9      	b.n	8005fa2 <sniprintf+0x16>
 8005fee:	bf00      	nop
 8005ff0:	20000014 	.word	0x20000014

08005ff4 <strncpy>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	3901      	subs	r1, #1
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b132      	cbz	r2, 800600a <strncpy+0x16>
 8005ffc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006000:	f803 4b01 	strb.w	r4, [r3], #1
 8006004:	3a01      	subs	r2, #1
 8006006:	2c00      	cmp	r4, #0
 8006008:	d1f7      	bne.n	8005ffa <strncpy+0x6>
 800600a:	441a      	add	r2, r3
 800600c:	2100      	movs	r1, #0
 800600e:	4293      	cmp	r3, r2
 8006010:	d100      	bne.n	8006014 <strncpy+0x20>
 8006012:	bd10      	pop	{r4, pc}
 8006014:	f803 1b01 	strb.w	r1, [r3], #1
 8006018:	e7f9      	b.n	800600e <strncpy+0x1a>

0800601a <quorem>:
 800601a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601e:	6903      	ldr	r3, [r0, #16]
 8006020:	690c      	ldr	r4, [r1, #16]
 8006022:	42a3      	cmp	r3, r4
 8006024:	4607      	mov	r7, r0
 8006026:	f2c0 8081 	blt.w	800612c <quorem+0x112>
 800602a:	3c01      	subs	r4, #1
 800602c:	f101 0814 	add.w	r8, r1, #20
 8006030:	f100 0514 	add.w	r5, r0, #20
 8006034:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800603e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006042:	3301      	adds	r3, #1
 8006044:	429a      	cmp	r2, r3
 8006046:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800604a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800604e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006052:	d331      	bcc.n	80060b8 <quorem+0x9e>
 8006054:	f04f 0e00 	mov.w	lr, #0
 8006058:	4640      	mov	r0, r8
 800605a:	46ac      	mov	ip, r5
 800605c:	46f2      	mov	sl, lr
 800605e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006062:	b293      	uxth	r3, r2
 8006064:	fb06 e303 	mla	r3, r6, r3, lr
 8006068:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800606c:	b29b      	uxth	r3, r3
 800606e:	ebaa 0303 	sub.w	r3, sl, r3
 8006072:	f8dc a000 	ldr.w	sl, [ip]
 8006076:	0c12      	lsrs	r2, r2, #16
 8006078:	fa13 f38a 	uxtah	r3, r3, sl
 800607c:	fb06 e202 	mla	r2, r6, r2, lr
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	9b00      	ldr	r3, [sp, #0]
 8006084:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006088:	b292      	uxth	r2, r2
 800608a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800608e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006092:	f8bd 3000 	ldrh.w	r3, [sp]
 8006096:	4581      	cmp	r9, r0
 8006098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800609c:	f84c 3b04 	str.w	r3, [ip], #4
 80060a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060a4:	d2db      	bcs.n	800605e <quorem+0x44>
 80060a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80060aa:	b92b      	cbnz	r3, 80060b8 <quorem+0x9e>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	3b04      	subs	r3, #4
 80060b0:	429d      	cmp	r5, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	d32e      	bcc.n	8006114 <quorem+0xfa>
 80060b6:	613c      	str	r4, [r7, #16]
 80060b8:	4638      	mov	r0, r7
 80060ba:	f001 f8c3 	bl	8007244 <__mcmp>
 80060be:	2800      	cmp	r0, #0
 80060c0:	db24      	blt.n	800610c <quorem+0xf2>
 80060c2:	3601      	adds	r6, #1
 80060c4:	4628      	mov	r0, r5
 80060c6:	f04f 0c00 	mov.w	ip, #0
 80060ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ce:	f8d0 e000 	ldr.w	lr, [r0]
 80060d2:	b293      	uxth	r3, r2
 80060d4:	ebac 0303 	sub.w	r3, ip, r3
 80060d8:	0c12      	lsrs	r2, r2, #16
 80060da:	fa13 f38e 	uxtah	r3, r3, lr
 80060de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ec:	45c1      	cmp	r9, r8
 80060ee:	f840 3b04 	str.w	r3, [r0], #4
 80060f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060f6:	d2e8      	bcs.n	80060ca <quorem+0xb0>
 80060f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006100:	b922      	cbnz	r2, 800610c <quorem+0xf2>
 8006102:	3b04      	subs	r3, #4
 8006104:	429d      	cmp	r5, r3
 8006106:	461a      	mov	r2, r3
 8006108:	d30a      	bcc.n	8006120 <quorem+0x106>
 800610a:	613c      	str	r4, [r7, #16]
 800610c:	4630      	mov	r0, r6
 800610e:	b003      	add	sp, #12
 8006110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	3b04      	subs	r3, #4
 8006118:	2a00      	cmp	r2, #0
 800611a:	d1cc      	bne.n	80060b6 <quorem+0x9c>
 800611c:	3c01      	subs	r4, #1
 800611e:	e7c7      	b.n	80060b0 <quorem+0x96>
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	3b04      	subs	r3, #4
 8006124:	2a00      	cmp	r2, #0
 8006126:	d1f0      	bne.n	800610a <quorem+0xf0>
 8006128:	3c01      	subs	r4, #1
 800612a:	e7eb      	b.n	8006104 <quorem+0xea>
 800612c:	2000      	movs	r0, #0
 800612e:	e7ee      	b.n	800610e <quorem+0xf4>

08006130 <_dtoa_r>:
 8006130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	ed2d 8b04 	vpush	{d8-d9}
 8006138:	ec57 6b10 	vmov	r6, r7, d0
 800613c:	b093      	sub	sp, #76	; 0x4c
 800613e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006144:	9106      	str	r1, [sp, #24]
 8006146:	ee10 aa10 	vmov	sl, s0
 800614a:	4604      	mov	r4, r0
 800614c:	9209      	str	r2, [sp, #36]	; 0x24
 800614e:	930c      	str	r3, [sp, #48]	; 0x30
 8006150:	46bb      	mov	fp, r7
 8006152:	b975      	cbnz	r5, 8006172 <_dtoa_r+0x42>
 8006154:	2010      	movs	r0, #16
 8006156:	f000 fddd 	bl	8006d14 <malloc>
 800615a:	4602      	mov	r2, r0
 800615c:	6260      	str	r0, [r4, #36]	; 0x24
 800615e:	b920      	cbnz	r0, 800616a <_dtoa_r+0x3a>
 8006160:	4ba7      	ldr	r3, [pc, #668]	; (8006400 <_dtoa_r+0x2d0>)
 8006162:	21ea      	movs	r1, #234	; 0xea
 8006164:	48a7      	ldr	r0, [pc, #668]	; (8006404 <_dtoa_r+0x2d4>)
 8006166:	f001 fbd1 	bl	800790c <__assert_func>
 800616a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800616e:	6005      	str	r5, [r0, #0]
 8006170:	60c5      	str	r5, [r0, #12]
 8006172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	b151      	cbz	r1, 800618e <_dtoa_r+0x5e>
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	604a      	str	r2, [r1, #4]
 800617c:	2301      	movs	r3, #1
 800617e:	4093      	lsls	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
 8006182:	4620      	mov	r0, r4
 8006184:	f000 fe1c 	bl	8006dc0 <_Bfree>
 8006188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	1e3b      	subs	r3, r7, #0
 8006190:	bfaa      	itet	ge
 8006192:	2300      	movge	r3, #0
 8006194:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006198:	f8c8 3000 	strge.w	r3, [r8]
 800619c:	4b9a      	ldr	r3, [pc, #616]	; (8006408 <_dtoa_r+0x2d8>)
 800619e:	bfbc      	itt	lt
 80061a0:	2201      	movlt	r2, #1
 80061a2:	f8c8 2000 	strlt.w	r2, [r8]
 80061a6:	ea33 030b 	bics.w	r3, r3, fp
 80061aa:	d11b      	bne.n	80061e4 <_dtoa_r+0xb4>
 80061ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061b8:	4333      	orrs	r3, r6
 80061ba:	f000 8592 	beq.w	8006ce2 <_dtoa_r+0xbb2>
 80061be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c0:	b963      	cbnz	r3, 80061dc <_dtoa_r+0xac>
 80061c2:	4b92      	ldr	r3, [pc, #584]	; (800640c <_dtoa_r+0x2dc>)
 80061c4:	e022      	b.n	800620c <_dtoa_r+0xdc>
 80061c6:	4b92      	ldr	r3, [pc, #584]	; (8006410 <_dtoa_r+0x2e0>)
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	3308      	adds	r3, #8
 80061cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	b013      	add	sp, #76	; 0x4c
 80061d4:	ecbd 8b04 	vpop	{d8-d9}
 80061d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061dc:	4b8b      	ldr	r3, [pc, #556]	; (800640c <_dtoa_r+0x2dc>)
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	3303      	adds	r3, #3
 80061e2:	e7f3      	b.n	80061cc <_dtoa_r+0x9c>
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	4650      	mov	r0, sl
 80061ea:	4659      	mov	r1, fp
 80061ec:	f7fa fc8c 	bl	8000b08 <__aeabi_dcmpeq>
 80061f0:	ec4b ab19 	vmov	d9, sl, fp
 80061f4:	4680      	mov	r8, r0
 80061f6:	b158      	cbz	r0, 8006210 <_dtoa_r+0xe0>
 80061f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061fa:	2301      	movs	r3, #1
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 856b 	beq.w	8006cdc <_dtoa_r+0xbac>
 8006206:	4883      	ldr	r0, [pc, #524]	; (8006414 <_dtoa_r+0x2e4>)
 8006208:	6018      	str	r0, [r3, #0]
 800620a:	1e43      	subs	r3, r0, #1
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	e7df      	b.n	80061d0 <_dtoa_r+0xa0>
 8006210:	ec4b ab10 	vmov	d0, sl, fp
 8006214:	aa10      	add	r2, sp, #64	; 0x40
 8006216:	a911      	add	r1, sp, #68	; 0x44
 8006218:	4620      	mov	r0, r4
 800621a:	f001 f8b9 	bl	8007390 <__d2b>
 800621e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006222:	ee08 0a10 	vmov	s16, r0
 8006226:	2d00      	cmp	r5, #0
 8006228:	f000 8084 	beq.w	8006334 <_dtoa_r+0x204>
 800622c:	ee19 3a90 	vmov	r3, s19
 8006230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006234:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006238:	4656      	mov	r6, sl
 800623a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800623e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006242:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006246:	4b74      	ldr	r3, [pc, #464]	; (8006418 <_dtoa_r+0x2e8>)
 8006248:	2200      	movs	r2, #0
 800624a:	4630      	mov	r0, r6
 800624c:	4639      	mov	r1, r7
 800624e:	f7fa f83b 	bl	80002c8 <__aeabi_dsub>
 8006252:	a365      	add	r3, pc, #404	; (adr r3, 80063e8 <_dtoa_r+0x2b8>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa f9ee 	bl	8000638 <__aeabi_dmul>
 800625c:	a364      	add	r3, pc, #400	; (adr r3, 80063f0 <_dtoa_r+0x2c0>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7fa f833 	bl	80002cc <__adddf3>
 8006266:	4606      	mov	r6, r0
 8006268:	4628      	mov	r0, r5
 800626a:	460f      	mov	r7, r1
 800626c:	f7fa f97a 	bl	8000564 <__aeabi_i2d>
 8006270:	a361      	add	r3, pc, #388	; (adr r3, 80063f8 <_dtoa_r+0x2c8>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7fa f9df 	bl	8000638 <__aeabi_dmul>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4630      	mov	r0, r6
 8006280:	4639      	mov	r1, r7
 8006282:	f7fa f823 	bl	80002cc <__adddf3>
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	f7fa fc85 	bl	8000b98 <__aeabi_d2iz>
 800628e:	2200      	movs	r2, #0
 8006290:	9000      	str	r0, [sp, #0]
 8006292:	2300      	movs	r3, #0
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa fc40 	bl	8000b1c <__aeabi_dcmplt>
 800629c:	b150      	cbz	r0, 80062b4 <_dtoa_r+0x184>
 800629e:	9800      	ldr	r0, [sp, #0]
 80062a0:	f7fa f960 	bl	8000564 <__aeabi_i2d>
 80062a4:	4632      	mov	r2, r6
 80062a6:	463b      	mov	r3, r7
 80062a8:	f7fa fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 80062ac:	b910      	cbnz	r0, 80062b4 <_dtoa_r+0x184>
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	9b00      	ldr	r3, [sp, #0]
 80062b6:	2b16      	cmp	r3, #22
 80062b8:	d85a      	bhi.n	8006370 <_dtoa_r+0x240>
 80062ba:	9a00      	ldr	r2, [sp, #0]
 80062bc:	4b57      	ldr	r3, [pc, #348]	; (800641c <_dtoa_r+0x2ec>)
 80062be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	ec51 0b19 	vmov	r0, r1, d9
 80062ca:	f7fa fc27 	bl	8000b1c <__aeabi_dcmplt>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d050      	beq.n	8006374 <_dtoa_r+0x244>
 80062d2:	9b00      	ldr	r3, [sp, #0]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	930b      	str	r3, [sp, #44]	; 0x2c
 80062dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062de:	1b5d      	subs	r5, r3, r5
 80062e0:	1e6b      	subs	r3, r5, #1
 80062e2:	9305      	str	r3, [sp, #20]
 80062e4:	bf45      	ittet	mi
 80062e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80062ea:	9304      	strmi	r3, [sp, #16]
 80062ec:	2300      	movpl	r3, #0
 80062ee:	2300      	movmi	r3, #0
 80062f0:	bf4c      	ite	mi
 80062f2:	9305      	strmi	r3, [sp, #20]
 80062f4:	9304      	strpl	r3, [sp, #16]
 80062f6:	9b00      	ldr	r3, [sp, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	db3d      	blt.n	8006378 <_dtoa_r+0x248>
 80062fc:	9b05      	ldr	r3, [sp, #20]
 80062fe:	9a00      	ldr	r2, [sp, #0]
 8006300:	920a      	str	r2, [sp, #40]	; 0x28
 8006302:	4413      	add	r3, r2
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	2300      	movs	r3, #0
 8006308:	9307      	str	r3, [sp, #28]
 800630a:	9b06      	ldr	r3, [sp, #24]
 800630c:	2b09      	cmp	r3, #9
 800630e:	f200 8089 	bhi.w	8006424 <_dtoa_r+0x2f4>
 8006312:	2b05      	cmp	r3, #5
 8006314:	bfc4      	itt	gt
 8006316:	3b04      	subgt	r3, #4
 8006318:	9306      	strgt	r3, [sp, #24]
 800631a:	9b06      	ldr	r3, [sp, #24]
 800631c:	f1a3 0302 	sub.w	r3, r3, #2
 8006320:	bfcc      	ite	gt
 8006322:	2500      	movgt	r5, #0
 8006324:	2501      	movle	r5, #1
 8006326:	2b03      	cmp	r3, #3
 8006328:	f200 8087 	bhi.w	800643a <_dtoa_r+0x30a>
 800632c:	e8df f003 	tbb	[pc, r3]
 8006330:	59383a2d 	.word	0x59383a2d
 8006334:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006338:	441d      	add	r5, r3
 800633a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800633e:	2b20      	cmp	r3, #32
 8006340:	bfc1      	itttt	gt
 8006342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006346:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800634a:	fa0b f303 	lslgt.w	r3, fp, r3
 800634e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006352:	bfda      	itte	le
 8006354:	f1c3 0320 	rsble	r3, r3, #32
 8006358:	fa06 f003 	lslle.w	r0, r6, r3
 800635c:	4318      	orrgt	r0, r3
 800635e:	f7fa f8f1 	bl	8000544 <__aeabi_ui2d>
 8006362:	2301      	movs	r3, #1
 8006364:	4606      	mov	r6, r0
 8006366:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800636a:	3d01      	subs	r5, #1
 800636c:	930e      	str	r3, [sp, #56]	; 0x38
 800636e:	e76a      	b.n	8006246 <_dtoa_r+0x116>
 8006370:	2301      	movs	r3, #1
 8006372:	e7b2      	b.n	80062da <_dtoa_r+0x1aa>
 8006374:	900b      	str	r0, [sp, #44]	; 0x2c
 8006376:	e7b1      	b.n	80062dc <_dtoa_r+0x1ac>
 8006378:	9b04      	ldr	r3, [sp, #16]
 800637a:	9a00      	ldr	r2, [sp, #0]
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	9304      	str	r3, [sp, #16]
 8006380:	4253      	negs	r3, r2
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	2300      	movs	r3, #0
 8006386:	930a      	str	r3, [sp, #40]	; 0x28
 8006388:	e7bf      	b.n	800630a <_dtoa_r+0x1da>
 800638a:	2300      	movs	r3, #0
 800638c:	9308      	str	r3, [sp, #32]
 800638e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	dc55      	bgt.n	8006440 <_dtoa_r+0x310>
 8006394:	2301      	movs	r3, #1
 8006396:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800639a:	461a      	mov	r2, r3
 800639c:	9209      	str	r2, [sp, #36]	; 0x24
 800639e:	e00c      	b.n	80063ba <_dtoa_r+0x28a>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e7f3      	b.n	800638c <_dtoa_r+0x25c>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a8:	9308      	str	r3, [sp, #32]
 80063aa:	9b00      	ldr	r3, [sp, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	3301      	adds	r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	bfb8      	it	lt
 80063b8:	2301      	movlt	r3, #1
 80063ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063bc:	2200      	movs	r2, #0
 80063be:	6042      	str	r2, [r0, #4]
 80063c0:	2204      	movs	r2, #4
 80063c2:	f102 0614 	add.w	r6, r2, #20
 80063c6:	429e      	cmp	r6, r3
 80063c8:	6841      	ldr	r1, [r0, #4]
 80063ca:	d93d      	bls.n	8006448 <_dtoa_r+0x318>
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fcb7 	bl	8006d40 <_Balloc>
 80063d2:	9001      	str	r0, [sp, #4]
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d13b      	bne.n	8006450 <_dtoa_r+0x320>
 80063d8:	4b11      	ldr	r3, [pc, #68]	; (8006420 <_dtoa_r+0x2f0>)
 80063da:	4602      	mov	r2, r0
 80063dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063e0:	e6c0      	b.n	8006164 <_dtoa_r+0x34>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7df      	b.n	80063a6 <_dtoa_r+0x276>
 80063e6:	bf00      	nop
 80063e8:	636f4361 	.word	0x636f4361
 80063ec:	3fd287a7 	.word	0x3fd287a7
 80063f0:	8b60c8b3 	.word	0x8b60c8b3
 80063f4:	3fc68a28 	.word	0x3fc68a28
 80063f8:	509f79fb 	.word	0x509f79fb
 80063fc:	3fd34413 	.word	0x3fd34413
 8006400:	08009021 	.word	0x08009021
 8006404:	08009038 	.word	0x08009038
 8006408:	7ff00000 	.word	0x7ff00000
 800640c:	0800901d 	.word	0x0800901d
 8006410:	08009014 	.word	0x08009014
 8006414:	08008ff1 	.word	0x08008ff1
 8006418:	3ff80000 	.word	0x3ff80000
 800641c:	08009128 	.word	0x08009128
 8006420:	08009093 	.word	0x08009093
 8006424:	2501      	movs	r5, #1
 8006426:	2300      	movs	r3, #0
 8006428:	9306      	str	r3, [sp, #24]
 800642a:	9508      	str	r5, [sp, #32]
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006434:	2200      	movs	r2, #0
 8006436:	2312      	movs	r3, #18
 8006438:	e7b0      	b.n	800639c <_dtoa_r+0x26c>
 800643a:	2301      	movs	r3, #1
 800643c:	9308      	str	r3, [sp, #32]
 800643e:	e7f5      	b.n	800642c <_dtoa_r+0x2fc>
 8006440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006442:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006446:	e7b8      	b.n	80063ba <_dtoa_r+0x28a>
 8006448:	3101      	adds	r1, #1
 800644a:	6041      	str	r1, [r0, #4]
 800644c:	0052      	lsls	r2, r2, #1
 800644e:	e7b8      	b.n	80063c2 <_dtoa_r+0x292>
 8006450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006452:	9a01      	ldr	r2, [sp, #4]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	2b0e      	cmp	r3, #14
 800645a:	f200 809d 	bhi.w	8006598 <_dtoa_r+0x468>
 800645e:	2d00      	cmp	r5, #0
 8006460:	f000 809a 	beq.w	8006598 <_dtoa_r+0x468>
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	dd32      	ble.n	80064d0 <_dtoa_r+0x3a0>
 800646a:	4ab7      	ldr	r2, [pc, #732]	; (8006748 <_dtoa_r+0x618>)
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006478:	9b00      	ldr	r3, [sp, #0]
 800647a:	05d8      	lsls	r0, r3, #23
 800647c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006480:	d516      	bpl.n	80064b0 <_dtoa_r+0x380>
 8006482:	4bb2      	ldr	r3, [pc, #712]	; (800674c <_dtoa_r+0x61c>)
 8006484:	ec51 0b19 	vmov	r0, r1, d9
 8006488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800648c:	f7fa f9fe 	bl	800088c <__aeabi_ddiv>
 8006490:	f007 070f 	and.w	r7, r7, #15
 8006494:	4682      	mov	sl, r0
 8006496:	468b      	mov	fp, r1
 8006498:	2503      	movs	r5, #3
 800649a:	4eac      	ldr	r6, [pc, #688]	; (800674c <_dtoa_r+0x61c>)
 800649c:	b957      	cbnz	r7, 80064b4 <_dtoa_r+0x384>
 800649e:	4642      	mov	r2, r8
 80064a0:	464b      	mov	r3, r9
 80064a2:	4650      	mov	r0, sl
 80064a4:	4659      	mov	r1, fp
 80064a6:	f7fa f9f1 	bl	800088c <__aeabi_ddiv>
 80064aa:	4682      	mov	sl, r0
 80064ac:	468b      	mov	fp, r1
 80064ae:	e028      	b.n	8006502 <_dtoa_r+0x3d2>
 80064b0:	2502      	movs	r5, #2
 80064b2:	e7f2      	b.n	800649a <_dtoa_r+0x36a>
 80064b4:	07f9      	lsls	r1, r7, #31
 80064b6:	d508      	bpl.n	80064ca <_dtoa_r+0x39a>
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064c0:	f7fa f8ba 	bl	8000638 <__aeabi_dmul>
 80064c4:	3501      	adds	r5, #1
 80064c6:	4680      	mov	r8, r0
 80064c8:	4689      	mov	r9, r1
 80064ca:	107f      	asrs	r7, r7, #1
 80064cc:	3608      	adds	r6, #8
 80064ce:	e7e5      	b.n	800649c <_dtoa_r+0x36c>
 80064d0:	f000 809b 	beq.w	800660a <_dtoa_r+0x4da>
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	4f9d      	ldr	r7, [pc, #628]	; (800674c <_dtoa_r+0x61c>)
 80064d8:	425e      	negs	r6, r3
 80064da:	4b9b      	ldr	r3, [pc, #620]	; (8006748 <_dtoa_r+0x618>)
 80064dc:	f006 020f 	and.w	r2, r6, #15
 80064e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	ec51 0b19 	vmov	r0, r1, d9
 80064ec:	f7fa f8a4 	bl	8000638 <__aeabi_dmul>
 80064f0:	1136      	asrs	r6, r6, #4
 80064f2:	4682      	mov	sl, r0
 80064f4:	468b      	mov	fp, r1
 80064f6:	2300      	movs	r3, #0
 80064f8:	2502      	movs	r5, #2
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	d17a      	bne.n	80065f4 <_dtoa_r+0x4c4>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1d3      	bne.n	80064aa <_dtoa_r+0x37a>
 8006502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8082 	beq.w	800660e <_dtoa_r+0x4de>
 800650a:	4b91      	ldr	r3, [pc, #580]	; (8006750 <_dtoa_r+0x620>)
 800650c:	2200      	movs	r2, #0
 800650e:	4650      	mov	r0, sl
 8006510:	4659      	mov	r1, fp
 8006512:	f7fa fb03 	bl	8000b1c <__aeabi_dcmplt>
 8006516:	2800      	cmp	r0, #0
 8006518:	d079      	beq.n	800660e <_dtoa_r+0x4de>
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d076      	beq.n	800660e <_dtoa_r+0x4de>
 8006520:	9b02      	ldr	r3, [sp, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	dd36      	ble.n	8006594 <_dtoa_r+0x464>
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	4650      	mov	r0, sl
 800652a:	4659      	mov	r1, fp
 800652c:	1e5f      	subs	r7, r3, #1
 800652e:	2200      	movs	r2, #0
 8006530:	4b88      	ldr	r3, [pc, #544]	; (8006754 <_dtoa_r+0x624>)
 8006532:	f7fa f881 	bl	8000638 <__aeabi_dmul>
 8006536:	9e02      	ldr	r6, [sp, #8]
 8006538:	4682      	mov	sl, r0
 800653a:	468b      	mov	fp, r1
 800653c:	3501      	adds	r5, #1
 800653e:	4628      	mov	r0, r5
 8006540:	f7fa f810 	bl	8000564 <__aeabi_i2d>
 8006544:	4652      	mov	r2, sl
 8006546:	465b      	mov	r3, fp
 8006548:	f7fa f876 	bl	8000638 <__aeabi_dmul>
 800654c:	4b82      	ldr	r3, [pc, #520]	; (8006758 <_dtoa_r+0x628>)
 800654e:	2200      	movs	r2, #0
 8006550:	f7f9 febc 	bl	80002cc <__adddf3>
 8006554:	46d0      	mov	r8, sl
 8006556:	46d9      	mov	r9, fp
 8006558:	4682      	mov	sl, r0
 800655a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800655e:	2e00      	cmp	r6, #0
 8006560:	d158      	bne.n	8006614 <_dtoa_r+0x4e4>
 8006562:	4b7e      	ldr	r3, [pc, #504]	; (800675c <_dtoa_r+0x62c>)
 8006564:	2200      	movs	r2, #0
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7f9 fead 	bl	80002c8 <__aeabi_dsub>
 800656e:	4652      	mov	r2, sl
 8006570:	465b      	mov	r3, fp
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	f7fa faef 	bl	8000b58 <__aeabi_dcmpgt>
 800657a:	2800      	cmp	r0, #0
 800657c:	f040 8295 	bne.w	8006aaa <_dtoa_r+0x97a>
 8006580:	4652      	mov	r2, sl
 8006582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	f7fa fac7 	bl	8000b1c <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	f040 8289 	bne.w	8006aa6 <_dtoa_r+0x976>
 8006594:	ec5b ab19 	vmov	sl, fp, d9
 8006598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800659a:	2b00      	cmp	r3, #0
 800659c:	f2c0 8148 	blt.w	8006830 <_dtoa_r+0x700>
 80065a0:	9a00      	ldr	r2, [sp, #0]
 80065a2:	2a0e      	cmp	r2, #14
 80065a4:	f300 8144 	bgt.w	8006830 <_dtoa_r+0x700>
 80065a8:	4b67      	ldr	r3, [pc, #412]	; (8006748 <_dtoa_r+0x618>)
 80065aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f280 80d5 	bge.w	8006764 <_dtoa_r+0x634>
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f300 80d1 	bgt.w	8006764 <_dtoa_r+0x634>
 80065c2:	f040 826f 	bne.w	8006aa4 <_dtoa_r+0x974>
 80065c6:	4b65      	ldr	r3, [pc, #404]	; (800675c <_dtoa_r+0x62c>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7fa f833 	bl	8000638 <__aeabi_dmul>
 80065d2:	4652      	mov	r2, sl
 80065d4:	465b      	mov	r3, fp
 80065d6:	f7fa fab5 	bl	8000b44 <__aeabi_dcmpge>
 80065da:	9e03      	ldr	r6, [sp, #12]
 80065dc:	4637      	mov	r7, r6
 80065de:	2800      	cmp	r0, #0
 80065e0:	f040 8245 	bne.w	8006a6e <_dtoa_r+0x93e>
 80065e4:	9d01      	ldr	r5, [sp, #4]
 80065e6:	2331      	movs	r3, #49	; 0x31
 80065e8:	f805 3b01 	strb.w	r3, [r5], #1
 80065ec:	9b00      	ldr	r3, [sp, #0]
 80065ee:	3301      	adds	r3, #1
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	e240      	b.n	8006a76 <_dtoa_r+0x946>
 80065f4:	07f2      	lsls	r2, r6, #31
 80065f6:	d505      	bpl.n	8006604 <_dtoa_r+0x4d4>
 80065f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065fc:	f7fa f81c 	bl	8000638 <__aeabi_dmul>
 8006600:	3501      	adds	r5, #1
 8006602:	2301      	movs	r3, #1
 8006604:	1076      	asrs	r6, r6, #1
 8006606:	3708      	adds	r7, #8
 8006608:	e777      	b.n	80064fa <_dtoa_r+0x3ca>
 800660a:	2502      	movs	r5, #2
 800660c:	e779      	b.n	8006502 <_dtoa_r+0x3d2>
 800660e:	9f00      	ldr	r7, [sp, #0]
 8006610:	9e03      	ldr	r6, [sp, #12]
 8006612:	e794      	b.n	800653e <_dtoa_r+0x40e>
 8006614:	9901      	ldr	r1, [sp, #4]
 8006616:	4b4c      	ldr	r3, [pc, #304]	; (8006748 <_dtoa_r+0x618>)
 8006618:	4431      	add	r1, r6
 800661a:	910d      	str	r1, [sp, #52]	; 0x34
 800661c:	9908      	ldr	r1, [sp, #32]
 800661e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006626:	2900      	cmp	r1, #0
 8006628:	d043      	beq.n	80066b2 <_dtoa_r+0x582>
 800662a:	494d      	ldr	r1, [pc, #308]	; (8006760 <_dtoa_r+0x630>)
 800662c:	2000      	movs	r0, #0
 800662e:	f7fa f92d 	bl	800088c <__aeabi_ddiv>
 8006632:	4652      	mov	r2, sl
 8006634:	465b      	mov	r3, fp
 8006636:	f7f9 fe47 	bl	80002c8 <__aeabi_dsub>
 800663a:	9d01      	ldr	r5, [sp, #4]
 800663c:	4682      	mov	sl, r0
 800663e:	468b      	mov	fp, r1
 8006640:	4649      	mov	r1, r9
 8006642:	4640      	mov	r0, r8
 8006644:	f7fa faa8 	bl	8000b98 <__aeabi_d2iz>
 8006648:	4606      	mov	r6, r0
 800664a:	f7f9 ff8b 	bl	8000564 <__aeabi_i2d>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7f9 fe37 	bl	80002c8 <__aeabi_dsub>
 800665a:	3630      	adds	r6, #48	; 0x30
 800665c:	f805 6b01 	strb.w	r6, [r5], #1
 8006660:	4652      	mov	r2, sl
 8006662:	465b      	mov	r3, fp
 8006664:	4680      	mov	r8, r0
 8006666:	4689      	mov	r9, r1
 8006668:	f7fa fa58 	bl	8000b1c <__aeabi_dcmplt>
 800666c:	2800      	cmp	r0, #0
 800666e:	d163      	bne.n	8006738 <_dtoa_r+0x608>
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	4936      	ldr	r1, [pc, #216]	; (8006750 <_dtoa_r+0x620>)
 8006676:	2000      	movs	r0, #0
 8006678:	f7f9 fe26 	bl	80002c8 <__aeabi_dsub>
 800667c:	4652      	mov	r2, sl
 800667e:	465b      	mov	r3, fp
 8006680:	f7fa fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8006684:	2800      	cmp	r0, #0
 8006686:	f040 80b5 	bne.w	80067f4 <_dtoa_r+0x6c4>
 800668a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668c:	429d      	cmp	r5, r3
 800668e:	d081      	beq.n	8006594 <_dtoa_r+0x464>
 8006690:	4b30      	ldr	r3, [pc, #192]	; (8006754 <_dtoa_r+0x624>)
 8006692:	2200      	movs	r2, #0
 8006694:	4650      	mov	r0, sl
 8006696:	4659      	mov	r1, fp
 8006698:	f7f9 ffce 	bl	8000638 <__aeabi_dmul>
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <_dtoa_r+0x624>)
 800669e:	4682      	mov	sl, r0
 80066a0:	468b      	mov	fp, r1
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	2200      	movs	r2, #0
 80066a8:	f7f9 ffc6 	bl	8000638 <__aeabi_dmul>
 80066ac:	4680      	mov	r8, r0
 80066ae:	4689      	mov	r9, r1
 80066b0:	e7c6      	b.n	8006640 <_dtoa_r+0x510>
 80066b2:	4650      	mov	r0, sl
 80066b4:	4659      	mov	r1, fp
 80066b6:	f7f9 ffbf 	bl	8000638 <__aeabi_dmul>
 80066ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066bc:	9d01      	ldr	r5, [sp, #4]
 80066be:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c0:	4682      	mov	sl, r0
 80066c2:	468b      	mov	fp, r1
 80066c4:	4649      	mov	r1, r9
 80066c6:	4640      	mov	r0, r8
 80066c8:	f7fa fa66 	bl	8000b98 <__aeabi_d2iz>
 80066cc:	4606      	mov	r6, r0
 80066ce:	f7f9 ff49 	bl	8000564 <__aeabi_i2d>
 80066d2:	3630      	adds	r6, #48	; 0x30
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4640      	mov	r0, r8
 80066da:	4649      	mov	r1, r9
 80066dc:	f7f9 fdf4 	bl	80002c8 <__aeabi_dsub>
 80066e0:	f805 6b01 	strb.w	r6, [r5], #1
 80066e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066e6:	429d      	cmp	r5, r3
 80066e8:	4680      	mov	r8, r0
 80066ea:	4689      	mov	r9, r1
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	d124      	bne.n	800673c <_dtoa_r+0x60c>
 80066f2:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <_dtoa_r+0x630>)
 80066f4:	4650      	mov	r0, sl
 80066f6:	4659      	mov	r1, fp
 80066f8:	f7f9 fde8 	bl	80002cc <__adddf3>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4640      	mov	r0, r8
 8006702:	4649      	mov	r1, r9
 8006704:	f7fa fa28 	bl	8000b58 <__aeabi_dcmpgt>
 8006708:	2800      	cmp	r0, #0
 800670a:	d173      	bne.n	80067f4 <_dtoa_r+0x6c4>
 800670c:	4652      	mov	r2, sl
 800670e:	465b      	mov	r3, fp
 8006710:	4913      	ldr	r1, [pc, #76]	; (8006760 <_dtoa_r+0x630>)
 8006712:	2000      	movs	r0, #0
 8006714:	f7f9 fdd8 	bl	80002c8 <__aeabi_dsub>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	f7fa f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8006724:	2800      	cmp	r0, #0
 8006726:	f43f af35 	beq.w	8006594 <_dtoa_r+0x464>
 800672a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800672c:	1e6b      	subs	r3, r5, #1
 800672e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006730:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006734:	2b30      	cmp	r3, #48	; 0x30
 8006736:	d0f8      	beq.n	800672a <_dtoa_r+0x5fa>
 8006738:	9700      	str	r7, [sp, #0]
 800673a:	e049      	b.n	80067d0 <_dtoa_r+0x6a0>
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <_dtoa_r+0x624>)
 800673e:	f7f9 ff7b 	bl	8000638 <__aeabi_dmul>
 8006742:	4680      	mov	r8, r0
 8006744:	4689      	mov	r9, r1
 8006746:	e7bd      	b.n	80066c4 <_dtoa_r+0x594>
 8006748:	08009128 	.word	0x08009128
 800674c:	08009100 	.word	0x08009100
 8006750:	3ff00000 	.word	0x3ff00000
 8006754:	40240000 	.word	0x40240000
 8006758:	401c0000 	.word	0x401c0000
 800675c:	40140000 	.word	0x40140000
 8006760:	3fe00000 	.word	0x3fe00000
 8006764:	9d01      	ldr	r5, [sp, #4]
 8006766:	4656      	mov	r6, sl
 8006768:	465f      	mov	r7, fp
 800676a:	4642      	mov	r2, r8
 800676c:	464b      	mov	r3, r9
 800676e:	4630      	mov	r0, r6
 8006770:	4639      	mov	r1, r7
 8006772:	f7fa f88b 	bl	800088c <__aeabi_ddiv>
 8006776:	f7fa fa0f 	bl	8000b98 <__aeabi_d2iz>
 800677a:	4682      	mov	sl, r0
 800677c:	f7f9 fef2 	bl	8000564 <__aeabi_i2d>
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	f7f9 ff58 	bl	8000638 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006794:	f7f9 fd98 	bl	80002c8 <__aeabi_dsub>
 8006798:	f805 6b01 	strb.w	r6, [r5], #1
 800679c:	9e01      	ldr	r6, [sp, #4]
 800679e:	9f03      	ldr	r7, [sp, #12]
 80067a0:	1bae      	subs	r6, r5, r6
 80067a2:	42b7      	cmp	r7, r6
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	d135      	bne.n	8006816 <_dtoa_r+0x6e6>
 80067aa:	f7f9 fd8f 	bl	80002cc <__adddf3>
 80067ae:	4642      	mov	r2, r8
 80067b0:	464b      	mov	r3, r9
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	f7fa f9cf 	bl	8000b58 <__aeabi_dcmpgt>
 80067ba:	b9d0      	cbnz	r0, 80067f2 <_dtoa_r+0x6c2>
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7fa f9a0 	bl	8000b08 <__aeabi_dcmpeq>
 80067c8:	b110      	cbz	r0, 80067d0 <_dtoa_r+0x6a0>
 80067ca:	f01a 0f01 	tst.w	sl, #1
 80067ce:	d110      	bne.n	80067f2 <_dtoa_r+0x6c2>
 80067d0:	4620      	mov	r0, r4
 80067d2:	ee18 1a10 	vmov	r1, s16
 80067d6:	f000 faf3 	bl	8006dc0 <_Bfree>
 80067da:	2300      	movs	r3, #0
 80067dc:	9800      	ldr	r0, [sp, #0]
 80067de:	702b      	strb	r3, [r5, #0]
 80067e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067e2:	3001      	adds	r0, #1
 80067e4:	6018      	str	r0, [r3, #0]
 80067e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f43f acf1 	beq.w	80061d0 <_dtoa_r+0xa0>
 80067ee:	601d      	str	r5, [r3, #0]
 80067f0:	e4ee      	b.n	80061d0 <_dtoa_r+0xa0>
 80067f2:	9f00      	ldr	r7, [sp, #0]
 80067f4:	462b      	mov	r3, r5
 80067f6:	461d      	mov	r5, r3
 80067f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067fc:	2a39      	cmp	r2, #57	; 0x39
 80067fe:	d106      	bne.n	800680e <_dtoa_r+0x6de>
 8006800:	9a01      	ldr	r2, [sp, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d1f7      	bne.n	80067f6 <_dtoa_r+0x6c6>
 8006806:	9901      	ldr	r1, [sp, #4]
 8006808:	2230      	movs	r2, #48	; 0x30
 800680a:	3701      	adds	r7, #1
 800680c:	700a      	strb	r2, [r1, #0]
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	3201      	adds	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e790      	b.n	8006738 <_dtoa_r+0x608>
 8006816:	4ba6      	ldr	r3, [pc, #664]	; (8006ab0 <_dtoa_r+0x980>)
 8006818:	2200      	movs	r2, #0
 800681a:	f7f9 ff0d 	bl	8000638 <__aeabi_dmul>
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	f7fa f96f 	bl	8000b08 <__aeabi_dcmpeq>
 800682a:	2800      	cmp	r0, #0
 800682c:	d09d      	beq.n	800676a <_dtoa_r+0x63a>
 800682e:	e7cf      	b.n	80067d0 <_dtoa_r+0x6a0>
 8006830:	9a08      	ldr	r2, [sp, #32]
 8006832:	2a00      	cmp	r2, #0
 8006834:	f000 80d7 	beq.w	80069e6 <_dtoa_r+0x8b6>
 8006838:	9a06      	ldr	r2, [sp, #24]
 800683a:	2a01      	cmp	r2, #1
 800683c:	f300 80ba 	bgt.w	80069b4 <_dtoa_r+0x884>
 8006840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006842:	2a00      	cmp	r2, #0
 8006844:	f000 80b2 	beq.w	80069ac <_dtoa_r+0x87c>
 8006848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800684c:	9e07      	ldr	r6, [sp, #28]
 800684e:	9d04      	ldr	r5, [sp, #16]
 8006850:	9a04      	ldr	r2, [sp, #16]
 8006852:	441a      	add	r2, r3
 8006854:	9204      	str	r2, [sp, #16]
 8006856:	9a05      	ldr	r2, [sp, #20]
 8006858:	2101      	movs	r1, #1
 800685a:	441a      	add	r2, r3
 800685c:	4620      	mov	r0, r4
 800685e:	9205      	str	r2, [sp, #20]
 8006860:	f000 fb66 	bl	8006f30 <__i2b>
 8006864:	4607      	mov	r7, r0
 8006866:	2d00      	cmp	r5, #0
 8006868:	dd0c      	ble.n	8006884 <_dtoa_r+0x754>
 800686a:	9b05      	ldr	r3, [sp, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dd09      	ble.n	8006884 <_dtoa_r+0x754>
 8006870:	42ab      	cmp	r3, r5
 8006872:	9a04      	ldr	r2, [sp, #16]
 8006874:	bfa8      	it	ge
 8006876:	462b      	movge	r3, r5
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	9204      	str	r2, [sp, #16]
 800687c:	9a05      	ldr	r2, [sp, #20]
 800687e:	1aed      	subs	r5, r5, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	9305      	str	r3, [sp, #20]
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	b31b      	cbz	r3, 80068d0 <_dtoa_r+0x7a0>
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80af 	beq.w	80069ee <_dtoa_r+0x8be>
 8006890:	2e00      	cmp	r6, #0
 8006892:	dd13      	ble.n	80068bc <_dtoa_r+0x78c>
 8006894:	4639      	mov	r1, r7
 8006896:	4632      	mov	r2, r6
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fc09 	bl	80070b0 <__pow5mult>
 800689e:	ee18 2a10 	vmov	r2, s16
 80068a2:	4601      	mov	r1, r0
 80068a4:	4607      	mov	r7, r0
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fb58 	bl	8006f5c <__multiply>
 80068ac:	ee18 1a10 	vmov	r1, s16
 80068b0:	4680      	mov	r8, r0
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fa84 	bl	8006dc0 <_Bfree>
 80068b8:	ee08 8a10 	vmov	s16, r8
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	1b9a      	subs	r2, r3, r6
 80068c0:	d006      	beq.n	80068d0 <_dtoa_r+0x7a0>
 80068c2:	ee18 1a10 	vmov	r1, s16
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 fbf2 	bl	80070b0 <__pow5mult>
 80068cc:	ee08 0a10 	vmov	s16, r0
 80068d0:	2101      	movs	r1, #1
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 fb2c 	bl	8006f30 <__i2b>
 80068d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	4606      	mov	r6, r0
 80068de:	f340 8088 	ble.w	80069f2 <_dtoa_r+0x8c2>
 80068e2:	461a      	mov	r2, r3
 80068e4:	4601      	mov	r1, r0
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 fbe2 	bl	80070b0 <__pow5mult>
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	4606      	mov	r6, r0
 80068f2:	f340 8081 	ble.w	80069f8 <_dtoa_r+0x8c8>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	6933      	ldr	r3, [r6, #16]
 80068fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006900:	6918      	ldr	r0, [r3, #16]
 8006902:	f000 fac5 	bl	8006e90 <__hi0bits>
 8006906:	f1c0 0020 	rsb	r0, r0, #32
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	4418      	add	r0, r3
 800690e:	f010 001f 	ands.w	r0, r0, #31
 8006912:	f000 8092 	beq.w	8006a3a <_dtoa_r+0x90a>
 8006916:	f1c0 0320 	rsb	r3, r0, #32
 800691a:	2b04      	cmp	r3, #4
 800691c:	f340 808a 	ble.w	8006a34 <_dtoa_r+0x904>
 8006920:	f1c0 001c 	rsb	r0, r0, #28
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	4403      	add	r3, r0
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	9b05      	ldr	r3, [sp, #20]
 800692c:	4403      	add	r3, r0
 800692e:	4405      	add	r5, r0
 8006930:	9305      	str	r3, [sp, #20]
 8006932:	9b04      	ldr	r3, [sp, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dd07      	ble.n	8006948 <_dtoa_r+0x818>
 8006938:	ee18 1a10 	vmov	r1, s16
 800693c:	461a      	mov	r2, r3
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fc10 	bl	8007164 <__lshift>
 8006944:	ee08 0a10 	vmov	s16, r0
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	dd05      	ble.n	800695a <_dtoa_r+0x82a>
 800694e:	4631      	mov	r1, r6
 8006950:	461a      	mov	r2, r3
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fc06 	bl	8007164 <__lshift>
 8006958:	4606      	mov	r6, r0
 800695a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d06e      	beq.n	8006a3e <_dtoa_r+0x90e>
 8006960:	ee18 0a10 	vmov	r0, s16
 8006964:	4631      	mov	r1, r6
 8006966:	f000 fc6d 	bl	8007244 <__mcmp>
 800696a:	2800      	cmp	r0, #0
 800696c:	da67      	bge.n	8006a3e <_dtoa_r+0x90e>
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	3b01      	subs	r3, #1
 8006972:	ee18 1a10 	vmov	r1, s16
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	220a      	movs	r2, #10
 800697a:	2300      	movs	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	f000 fa41 	bl	8006e04 <__multadd>
 8006982:	9b08      	ldr	r3, [sp, #32]
 8006984:	ee08 0a10 	vmov	s16, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 81b1 	beq.w	8006cf0 <_dtoa_r+0xbc0>
 800698e:	2300      	movs	r3, #0
 8006990:	4639      	mov	r1, r7
 8006992:	220a      	movs	r2, #10
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fa35 	bl	8006e04 <__multadd>
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	4607      	mov	r7, r0
 80069a0:	f300 808e 	bgt.w	8006ac0 <_dtoa_r+0x990>
 80069a4:	9b06      	ldr	r3, [sp, #24]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	dc51      	bgt.n	8006a4e <_dtoa_r+0x91e>
 80069aa:	e089      	b.n	8006ac0 <_dtoa_r+0x990>
 80069ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069b2:	e74b      	b.n	800684c <_dtoa_r+0x71c>
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	1e5e      	subs	r6, r3, #1
 80069b8:	9b07      	ldr	r3, [sp, #28]
 80069ba:	42b3      	cmp	r3, r6
 80069bc:	bfbf      	itttt	lt
 80069be:	9b07      	ldrlt	r3, [sp, #28]
 80069c0:	9607      	strlt	r6, [sp, #28]
 80069c2:	1af2      	sublt	r2, r6, r3
 80069c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069c6:	bfb6      	itet	lt
 80069c8:	189b      	addlt	r3, r3, r2
 80069ca:	1b9e      	subge	r6, r3, r6
 80069cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	bfb8      	it	lt
 80069d2:	2600      	movlt	r6, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bfb7      	itett	lt
 80069d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069e0:	1a9d      	sublt	r5, r3, r2
 80069e2:	2300      	movlt	r3, #0
 80069e4:	e734      	b.n	8006850 <_dtoa_r+0x720>
 80069e6:	9e07      	ldr	r6, [sp, #28]
 80069e8:	9d04      	ldr	r5, [sp, #16]
 80069ea:	9f08      	ldr	r7, [sp, #32]
 80069ec:	e73b      	b.n	8006866 <_dtoa_r+0x736>
 80069ee:	9a07      	ldr	r2, [sp, #28]
 80069f0:	e767      	b.n	80068c2 <_dtoa_r+0x792>
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	dc18      	bgt.n	8006a2a <_dtoa_r+0x8fa>
 80069f8:	f1ba 0f00 	cmp.w	sl, #0
 80069fc:	d115      	bne.n	8006a2a <_dtoa_r+0x8fa>
 80069fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a02:	b993      	cbnz	r3, 8006a2a <_dtoa_r+0x8fa>
 8006a04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a08:	0d1b      	lsrs	r3, r3, #20
 8006a0a:	051b      	lsls	r3, r3, #20
 8006a0c:	b183      	cbz	r3, 8006a30 <_dtoa_r+0x900>
 8006a0e:	9b04      	ldr	r3, [sp, #16]
 8006a10:	3301      	adds	r3, #1
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	9b05      	ldr	r3, [sp, #20]
 8006a16:	3301      	adds	r3, #1
 8006a18:	9305      	str	r3, [sp, #20]
 8006a1a:	f04f 0801 	mov.w	r8, #1
 8006a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f47f af6a 	bne.w	80068fa <_dtoa_r+0x7ca>
 8006a26:	2001      	movs	r0, #1
 8006a28:	e76f      	b.n	800690a <_dtoa_r+0x7da>
 8006a2a:	f04f 0800 	mov.w	r8, #0
 8006a2e:	e7f6      	b.n	8006a1e <_dtoa_r+0x8ee>
 8006a30:	4698      	mov	r8, r3
 8006a32:	e7f4      	b.n	8006a1e <_dtoa_r+0x8ee>
 8006a34:	f43f af7d 	beq.w	8006932 <_dtoa_r+0x802>
 8006a38:	4618      	mov	r0, r3
 8006a3a:	301c      	adds	r0, #28
 8006a3c:	e772      	b.n	8006924 <_dtoa_r+0x7f4>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc37      	bgt.n	8006ab4 <_dtoa_r+0x984>
 8006a44:	9b06      	ldr	r3, [sp, #24]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	dd34      	ble.n	8006ab4 <_dtoa_r+0x984>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	9302      	str	r3, [sp, #8]
 8006a4e:	9b02      	ldr	r3, [sp, #8]
 8006a50:	b96b      	cbnz	r3, 8006a6e <_dtoa_r+0x93e>
 8006a52:	4631      	mov	r1, r6
 8006a54:	2205      	movs	r2, #5
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f9d4 	bl	8006e04 <__multadd>
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	4606      	mov	r6, r0
 8006a60:	ee18 0a10 	vmov	r0, s16
 8006a64:	f000 fbee 	bl	8007244 <__mcmp>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f73f adbb 	bgt.w	80065e4 <_dtoa_r+0x4b4>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a70:	9d01      	ldr	r5, [sp, #4]
 8006a72:	43db      	mvns	r3, r3
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f99f 	bl	8006dc0 <_Bfree>
 8006a82:	2f00      	cmp	r7, #0
 8006a84:	f43f aea4 	beq.w	80067d0 <_dtoa_r+0x6a0>
 8006a88:	f1b8 0f00 	cmp.w	r8, #0
 8006a8c:	d005      	beq.n	8006a9a <_dtoa_r+0x96a>
 8006a8e:	45b8      	cmp	r8, r7
 8006a90:	d003      	beq.n	8006a9a <_dtoa_r+0x96a>
 8006a92:	4641      	mov	r1, r8
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 f993 	bl	8006dc0 <_Bfree>
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 f98f 	bl	8006dc0 <_Bfree>
 8006aa2:	e695      	b.n	80067d0 <_dtoa_r+0x6a0>
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	4637      	mov	r7, r6
 8006aa8:	e7e1      	b.n	8006a6e <_dtoa_r+0x93e>
 8006aaa:	9700      	str	r7, [sp, #0]
 8006aac:	4637      	mov	r7, r6
 8006aae:	e599      	b.n	80065e4 <_dtoa_r+0x4b4>
 8006ab0:	40240000 	.word	0x40240000
 8006ab4:	9b08      	ldr	r3, [sp, #32]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80ca 	beq.w	8006c50 <_dtoa_r+0xb20>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	9302      	str	r3, [sp, #8]
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	dd05      	ble.n	8006ad0 <_dtoa_r+0x9a0>
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	462a      	mov	r2, r5
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fb4b 	bl	8007164 <__lshift>
 8006ace:	4607      	mov	r7, r0
 8006ad0:	f1b8 0f00 	cmp.w	r8, #0
 8006ad4:	d05b      	beq.n	8006b8e <_dtoa_r+0xa5e>
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 f931 	bl	8006d40 <_Balloc>
 8006ade:	4605      	mov	r5, r0
 8006ae0:	b928      	cbnz	r0, 8006aee <_dtoa_r+0x9be>
 8006ae2:	4b87      	ldr	r3, [pc, #540]	; (8006d00 <_dtoa_r+0xbd0>)
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aea:	f7ff bb3b 	b.w	8006164 <_dtoa_r+0x34>
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	3202      	adds	r2, #2
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	f107 010c 	add.w	r1, r7, #12
 8006af8:	300c      	adds	r0, #12
 8006afa:	f000 f913 	bl	8006d24 <memcpy>
 8006afe:	2201      	movs	r2, #1
 8006b00:	4629      	mov	r1, r5
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fb2e 	bl	8007164 <__lshift>
 8006b08:	9b01      	ldr	r3, [sp, #4]
 8006b0a:	f103 0901 	add.w	r9, r3, #1
 8006b0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b12:	4413      	add	r3, r2
 8006b14:	9305      	str	r3, [sp, #20]
 8006b16:	f00a 0301 	and.w	r3, sl, #1
 8006b1a:	46b8      	mov	r8, r7
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	4607      	mov	r7, r0
 8006b20:	4631      	mov	r1, r6
 8006b22:	ee18 0a10 	vmov	r0, s16
 8006b26:	f7ff fa78 	bl	800601a <quorem>
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	9002      	str	r0, [sp, #8]
 8006b2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b32:	ee18 0a10 	vmov	r0, s16
 8006b36:	f000 fb85 	bl	8007244 <__mcmp>
 8006b3a:	463a      	mov	r2, r7
 8006b3c:	9003      	str	r0, [sp, #12]
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fb9b 	bl	800727c <__mdiff>
 8006b46:	68c2      	ldr	r2, [r0, #12]
 8006b48:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	bb02      	cbnz	r2, 8006b92 <_dtoa_r+0xa62>
 8006b50:	4601      	mov	r1, r0
 8006b52:	ee18 0a10 	vmov	r0, s16
 8006b56:	f000 fb75 	bl	8007244 <__mcmp>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	9207      	str	r2, [sp, #28]
 8006b62:	f000 f92d 	bl	8006dc0 <_Bfree>
 8006b66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b6a:	ea43 0102 	orr.w	r1, r3, r2
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	430b      	orrs	r3, r1
 8006b72:	464d      	mov	r5, r9
 8006b74:	d10f      	bne.n	8006b96 <_dtoa_r+0xa66>
 8006b76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b7a:	d02a      	beq.n	8006bd2 <_dtoa_r+0xaa2>
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd02      	ble.n	8006b88 <_dtoa_r+0xa58>
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b88:	f88b a000 	strb.w	sl, [fp]
 8006b8c:	e775      	b.n	8006a7a <_dtoa_r+0x94a>
 8006b8e:	4638      	mov	r0, r7
 8006b90:	e7ba      	b.n	8006b08 <_dtoa_r+0x9d8>
 8006b92:	2201      	movs	r2, #1
 8006b94:	e7e2      	b.n	8006b5c <_dtoa_r+0xa2c>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	db04      	blt.n	8006ba6 <_dtoa_r+0xa76>
 8006b9c:	9906      	ldr	r1, [sp, #24]
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	9904      	ldr	r1, [sp, #16]
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	d122      	bne.n	8006bec <_dtoa_r+0xabc>
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	ddee      	ble.n	8006b88 <_dtoa_r+0xa58>
 8006baa:	ee18 1a10 	vmov	r1, s16
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fad7 	bl	8007164 <__lshift>
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	ee08 0a10 	vmov	s16, r0
 8006bbc:	f000 fb42 	bl	8007244 <__mcmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	dc03      	bgt.n	8006bcc <_dtoa_r+0xa9c>
 8006bc4:	d1e0      	bne.n	8006b88 <_dtoa_r+0xa58>
 8006bc6:	f01a 0f01 	tst.w	sl, #1
 8006bca:	d0dd      	beq.n	8006b88 <_dtoa_r+0xa58>
 8006bcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bd0:	d1d7      	bne.n	8006b82 <_dtoa_r+0xa52>
 8006bd2:	2339      	movs	r3, #57	; 0x39
 8006bd4:	f88b 3000 	strb.w	r3, [fp]
 8006bd8:	462b      	mov	r3, r5
 8006bda:	461d      	mov	r5, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006be2:	2a39      	cmp	r2, #57	; 0x39
 8006be4:	d071      	beq.n	8006cca <_dtoa_r+0xb9a>
 8006be6:	3201      	adds	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e746      	b.n	8006a7a <_dtoa_r+0x94a>
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	dd07      	ble.n	8006c00 <_dtoa_r+0xad0>
 8006bf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bf4:	d0ed      	beq.n	8006bd2 <_dtoa_r+0xaa2>
 8006bf6:	f10a 0301 	add.w	r3, sl, #1
 8006bfa:	f88b 3000 	strb.w	r3, [fp]
 8006bfe:	e73c      	b.n	8006a7a <_dtoa_r+0x94a>
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006c06:	4599      	cmp	r9, r3
 8006c08:	d047      	beq.n	8006c9a <_dtoa_r+0xb6a>
 8006c0a:	ee18 1a10 	vmov	r1, s16
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 f8f6 	bl	8006e04 <__multadd>
 8006c18:	45b8      	cmp	r8, r7
 8006c1a:	ee08 0a10 	vmov	s16, r0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	f04f 020a 	mov.w	r2, #10
 8006c26:	4641      	mov	r1, r8
 8006c28:	4620      	mov	r0, r4
 8006c2a:	d106      	bne.n	8006c3a <_dtoa_r+0xb0a>
 8006c2c:	f000 f8ea 	bl	8006e04 <__multadd>
 8006c30:	4680      	mov	r8, r0
 8006c32:	4607      	mov	r7, r0
 8006c34:	f109 0901 	add.w	r9, r9, #1
 8006c38:	e772      	b.n	8006b20 <_dtoa_r+0x9f0>
 8006c3a:	f000 f8e3 	bl	8006e04 <__multadd>
 8006c3e:	4639      	mov	r1, r7
 8006c40:	4680      	mov	r8, r0
 8006c42:	2300      	movs	r3, #0
 8006c44:	220a      	movs	r2, #10
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f8dc 	bl	8006e04 <__multadd>
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	e7f1      	b.n	8006c34 <_dtoa_r+0xb04>
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	9d01      	ldr	r5, [sp, #4]
 8006c56:	ee18 0a10 	vmov	r0, s16
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	f7ff f9dd 	bl	800601a <quorem>
 8006c60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c64:	9b01      	ldr	r3, [sp, #4]
 8006c66:	f805 ab01 	strb.w	sl, [r5], #1
 8006c6a:	1aea      	subs	r2, r5, r3
 8006c6c:	9b02      	ldr	r3, [sp, #8]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	dd09      	ble.n	8006c86 <_dtoa_r+0xb56>
 8006c72:	ee18 1a10 	vmov	r1, s16
 8006c76:	2300      	movs	r3, #0
 8006c78:	220a      	movs	r2, #10
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f8c2 	bl	8006e04 <__multadd>
 8006c80:	ee08 0a10 	vmov	s16, r0
 8006c84:	e7e7      	b.n	8006c56 <_dtoa_r+0xb26>
 8006c86:	9b02      	ldr	r3, [sp, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bfc8      	it	gt
 8006c8c:	461d      	movgt	r5, r3
 8006c8e:	9b01      	ldr	r3, [sp, #4]
 8006c90:	bfd8      	it	le
 8006c92:	2501      	movle	r5, #1
 8006c94:	441d      	add	r5, r3
 8006c96:	f04f 0800 	mov.w	r8, #0
 8006c9a:	ee18 1a10 	vmov	r1, s16
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fa5f 	bl	8007164 <__lshift>
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	ee08 0a10 	vmov	s16, r0
 8006cac:	f000 faca 	bl	8007244 <__mcmp>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	dc91      	bgt.n	8006bd8 <_dtoa_r+0xaa8>
 8006cb4:	d102      	bne.n	8006cbc <_dtoa_r+0xb8c>
 8006cb6:	f01a 0f01 	tst.w	sl, #1
 8006cba:	d18d      	bne.n	8006bd8 <_dtoa_r+0xaa8>
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cc4:	2a30      	cmp	r2, #48	; 0x30
 8006cc6:	d0fa      	beq.n	8006cbe <_dtoa_r+0xb8e>
 8006cc8:	e6d7      	b.n	8006a7a <_dtoa_r+0x94a>
 8006cca:	9a01      	ldr	r2, [sp, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d184      	bne.n	8006bda <_dtoa_r+0xaaa>
 8006cd0:	9b00      	ldr	r3, [sp, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	2331      	movs	r3, #49	; 0x31
 8006cd8:	7013      	strb	r3, [r2, #0]
 8006cda:	e6ce      	b.n	8006a7a <_dtoa_r+0x94a>
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <_dtoa_r+0xbd4>)
 8006cde:	f7ff ba95 	b.w	800620c <_dtoa_r+0xdc>
 8006ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f47f aa6e 	bne.w	80061c6 <_dtoa_r+0x96>
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <_dtoa_r+0xbd8>)
 8006cec:	f7ff ba8e 	b.w	800620c <_dtoa_r+0xdc>
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dcae      	bgt.n	8006c54 <_dtoa_r+0xb24>
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	f73f aea8 	bgt.w	8006a4e <_dtoa_r+0x91e>
 8006cfe:	e7a9      	b.n	8006c54 <_dtoa_r+0xb24>
 8006d00:	08009093 	.word	0x08009093
 8006d04:	08008ff0 	.word	0x08008ff0
 8006d08:	08009014 	.word	0x08009014

08006d0c <_localeconv_r>:
 8006d0c:	4800      	ldr	r0, [pc, #0]	; (8006d10 <_localeconv_r+0x4>)
 8006d0e:	4770      	bx	lr
 8006d10:	20000168 	.word	0x20000168

08006d14 <malloc>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <malloc+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f000 bc17 	b.w	800754c <_malloc_r>
 8006d1e:	bf00      	nop
 8006d20:	20000014 	.word	0x20000014

08006d24 <memcpy>:
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2c:	d100      	bne.n	8006d30 <memcpy+0xc>
 8006d2e:	4770      	bx	lr
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	d1f9      	bne.n	8006d32 <memcpy+0xe>
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <_Balloc>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d44:	4604      	mov	r4, r0
 8006d46:	460d      	mov	r5, r1
 8006d48:	b976      	cbnz	r6, 8006d68 <_Balloc+0x28>
 8006d4a:	2010      	movs	r0, #16
 8006d4c:	f7ff ffe2 	bl	8006d14 <malloc>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6260      	str	r0, [r4, #36]	; 0x24
 8006d54:	b920      	cbnz	r0, 8006d60 <_Balloc+0x20>
 8006d56:	4b18      	ldr	r3, [pc, #96]	; (8006db8 <_Balloc+0x78>)
 8006d58:	4818      	ldr	r0, [pc, #96]	; (8006dbc <_Balloc+0x7c>)
 8006d5a:	2166      	movs	r1, #102	; 0x66
 8006d5c:	f000 fdd6 	bl	800790c <__assert_func>
 8006d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d64:	6006      	str	r6, [r0, #0]
 8006d66:	60c6      	str	r6, [r0, #12]
 8006d68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d6a:	68f3      	ldr	r3, [r6, #12]
 8006d6c:	b183      	cbz	r3, 8006d90 <_Balloc+0x50>
 8006d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d76:	b9b8      	cbnz	r0, 8006da8 <_Balloc+0x68>
 8006d78:	2101      	movs	r1, #1
 8006d7a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d7e:	1d72      	adds	r2, r6, #5
 8006d80:	0092      	lsls	r2, r2, #2
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 fb60 	bl	8007448 <_calloc_r>
 8006d88:	b160      	cbz	r0, 8006da4 <_Balloc+0x64>
 8006d8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d8e:	e00e      	b.n	8006dae <_Balloc+0x6e>
 8006d90:	2221      	movs	r2, #33	; 0x21
 8006d92:	2104      	movs	r1, #4
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fb57 	bl	8007448 <_calloc_r>
 8006d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d9c:	60f0      	str	r0, [r6, #12]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e4      	bne.n	8006d6e <_Balloc+0x2e>
 8006da4:	2000      	movs	r0, #0
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	6802      	ldr	r2, [r0, #0]
 8006daa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dae:	2300      	movs	r3, #0
 8006db0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006db4:	e7f7      	b.n	8006da6 <_Balloc+0x66>
 8006db6:	bf00      	nop
 8006db8:	08009021 	.word	0x08009021
 8006dbc:	080090a4 	.word	0x080090a4

08006dc0 <_Bfree>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	b976      	cbnz	r6, 8006de8 <_Bfree+0x28>
 8006dca:	2010      	movs	r0, #16
 8006dcc:	f7ff ffa2 	bl	8006d14 <malloc>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6268      	str	r0, [r5, #36]	; 0x24
 8006dd4:	b920      	cbnz	r0, 8006de0 <_Bfree+0x20>
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <_Bfree+0x3c>)
 8006dd8:	4809      	ldr	r0, [pc, #36]	; (8006e00 <_Bfree+0x40>)
 8006dda:	218a      	movs	r1, #138	; 0x8a
 8006ddc:	f000 fd96 	bl	800790c <__assert_func>
 8006de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de4:	6006      	str	r6, [r0, #0]
 8006de6:	60c6      	str	r6, [r0, #12]
 8006de8:	b13c      	cbz	r4, 8006dfa <_Bfree+0x3a>
 8006dea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dec:	6862      	ldr	r2, [r4, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006df4:	6021      	str	r1, [r4, #0]
 8006df6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	08009021 	.word	0x08009021
 8006e00:	080090a4 	.word	0x080090a4

08006e04 <__multadd>:
 8006e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e08:	690d      	ldr	r5, [r1, #16]
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	461e      	mov	r6, r3
 8006e10:	f101 0c14 	add.w	ip, r1, #20
 8006e14:	2000      	movs	r0, #0
 8006e16:	f8dc 3000 	ldr.w	r3, [ip]
 8006e1a:	b299      	uxth	r1, r3
 8006e1c:	fb02 6101 	mla	r1, r2, r1, r6
 8006e20:	0c1e      	lsrs	r6, r3, #16
 8006e22:	0c0b      	lsrs	r3, r1, #16
 8006e24:	fb02 3306 	mla	r3, r2, r6, r3
 8006e28:	b289      	uxth	r1, r1
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e30:	4285      	cmp	r5, r0
 8006e32:	f84c 1b04 	str.w	r1, [ip], #4
 8006e36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e3a:	dcec      	bgt.n	8006e16 <__multadd+0x12>
 8006e3c:	b30e      	cbz	r6, 8006e82 <__multadd+0x7e>
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	42ab      	cmp	r3, r5
 8006e42:	dc19      	bgt.n	8006e78 <__multadd+0x74>
 8006e44:	6861      	ldr	r1, [r4, #4]
 8006e46:	4638      	mov	r0, r7
 8006e48:	3101      	adds	r1, #1
 8006e4a:	f7ff ff79 	bl	8006d40 <_Balloc>
 8006e4e:	4680      	mov	r8, r0
 8006e50:	b928      	cbnz	r0, 8006e5e <__multadd+0x5a>
 8006e52:	4602      	mov	r2, r0
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <__multadd+0x84>)
 8006e56:	480d      	ldr	r0, [pc, #52]	; (8006e8c <__multadd+0x88>)
 8006e58:	21b5      	movs	r1, #181	; 0xb5
 8006e5a:	f000 fd57 	bl	800790c <__assert_func>
 8006e5e:	6922      	ldr	r2, [r4, #16]
 8006e60:	3202      	adds	r2, #2
 8006e62:	f104 010c 	add.w	r1, r4, #12
 8006e66:	0092      	lsls	r2, r2, #2
 8006e68:	300c      	adds	r0, #12
 8006e6a:	f7ff ff5b 	bl	8006d24 <memcpy>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4638      	mov	r0, r7
 8006e72:	f7ff ffa5 	bl	8006dc0 <_Bfree>
 8006e76:	4644      	mov	r4, r8
 8006e78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	615e      	str	r6, [r3, #20]
 8006e80:	6125      	str	r5, [r4, #16]
 8006e82:	4620      	mov	r0, r4
 8006e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e88:	08009093 	.word	0x08009093
 8006e8c:	080090a4 	.word	0x080090a4

08006e90 <__hi0bits>:
 8006e90:	0c03      	lsrs	r3, r0, #16
 8006e92:	041b      	lsls	r3, r3, #16
 8006e94:	b9d3      	cbnz	r3, 8006ecc <__hi0bits+0x3c>
 8006e96:	0400      	lsls	r0, r0, #16
 8006e98:	2310      	movs	r3, #16
 8006e9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e9e:	bf04      	itt	eq
 8006ea0:	0200      	lsleq	r0, r0, #8
 8006ea2:	3308      	addeq	r3, #8
 8006ea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ea8:	bf04      	itt	eq
 8006eaa:	0100      	lsleq	r0, r0, #4
 8006eac:	3304      	addeq	r3, #4
 8006eae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eb2:	bf04      	itt	eq
 8006eb4:	0080      	lsleq	r0, r0, #2
 8006eb6:	3302      	addeq	r3, #2
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	db05      	blt.n	8006ec8 <__hi0bits+0x38>
 8006ebc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ec0:	f103 0301 	add.w	r3, r3, #1
 8006ec4:	bf08      	it	eq
 8006ec6:	2320      	moveq	r3, #32
 8006ec8:	4618      	mov	r0, r3
 8006eca:	4770      	bx	lr
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e7e4      	b.n	8006e9a <__hi0bits+0xa>

08006ed0 <__lo0bits>:
 8006ed0:	6803      	ldr	r3, [r0, #0]
 8006ed2:	f013 0207 	ands.w	r2, r3, #7
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	d00b      	beq.n	8006ef2 <__lo0bits+0x22>
 8006eda:	07da      	lsls	r2, r3, #31
 8006edc:	d423      	bmi.n	8006f26 <__lo0bits+0x56>
 8006ede:	0798      	lsls	r0, r3, #30
 8006ee0:	bf49      	itett	mi
 8006ee2:	085b      	lsrmi	r3, r3, #1
 8006ee4:	089b      	lsrpl	r3, r3, #2
 8006ee6:	2001      	movmi	r0, #1
 8006ee8:	600b      	strmi	r3, [r1, #0]
 8006eea:	bf5c      	itt	pl
 8006eec:	600b      	strpl	r3, [r1, #0]
 8006eee:	2002      	movpl	r0, #2
 8006ef0:	4770      	bx	lr
 8006ef2:	b298      	uxth	r0, r3
 8006ef4:	b9a8      	cbnz	r0, 8006f22 <__lo0bits+0x52>
 8006ef6:	0c1b      	lsrs	r3, r3, #16
 8006ef8:	2010      	movs	r0, #16
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	b90a      	cbnz	r2, 8006f02 <__lo0bits+0x32>
 8006efe:	3008      	adds	r0, #8
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	071a      	lsls	r2, r3, #28
 8006f04:	bf04      	itt	eq
 8006f06:	091b      	lsreq	r3, r3, #4
 8006f08:	3004      	addeq	r0, #4
 8006f0a:	079a      	lsls	r2, r3, #30
 8006f0c:	bf04      	itt	eq
 8006f0e:	089b      	lsreq	r3, r3, #2
 8006f10:	3002      	addeq	r0, #2
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d403      	bmi.n	8006f1e <__lo0bits+0x4e>
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	f100 0001 	add.w	r0, r0, #1
 8006f1c:	d005      	beq.n	8006f2a <__lo0bits+0x5a>
 8006f1e:	600b      	str	r3, [r1, #0]
 8006f20:	4770      	bx	lr
 8006f22:	4610      	mov	r0, r2
 8006f24:	e7e9      	b.n	8006efa <__lo0bits+0x2a>
 8006f26:	2000      	movs	r0, #0
 8006f28:	4770      	bx	lr
 8006f2a:	2020      	movs	r0, #32
 8006f2c:	4770      	bx	lr
	...

08006f30 <__i2b>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	460c      	mov	r4, r1
 8006f34:	2101      	movs	r1, #1
 8006f36:	f7ff ff03 	bl	8006d40 <_Balloc>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	b928      	cbnz	r0, 8006f4a <__i2b+0x1a>
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <__i2b+0x24>)
 8006f40:	4805      	ldr	r0, [pc, #20]	; (8006f58 <__i2b+0x28>)
 8006f42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f46:	f000 fce1 	bl	800790c <__assert_func>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	6144      	str	r4, [r0, #20]
 8006f4e:	6103      	str	r3, [r0, #16]
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	08009093 	.word	0x08009093
 8006f58:	080090a4 	.word	0x080090a4

08006f5c <__multiply>:
 8006f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	4691      	mov	r9, r2
 8006f62:	690a      	ldr	r2, [r1, #16]
 8006f64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	bfb8      	it	lt
 8006f6c:	460b      	movlt	r3, r1
 8006f6e:	460c      	mov	r4, r1
 8006f70:	bfbc      	itt	lt
 8006f72:	464c      	movlt	r4, r9
 8006f74:	4699      	movlt	r9, r3
 8006f76:	6927      	ldr	r7, [r4, #16]
 8006f78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f7c:	68a3      	ldr	r3, [r4, #8]
 8006f7e:	6861      	ldr	r1, [r4, #4]
 8006f80:	eb07 060a 	add.w	r6, r7, sl
 8006f84:	42b3      	cmp	r3, r6
 8006f86:	b085      	sub	sp, #20
 8006f88:	bfb8      	it	lt
 8006f8a:	3101      	addlt	r1, #1
 8006f8c:	f7ff fed8 	bl	8006d40 <_Balloc>
 8006f90:	b930      	cbnz	r0, 8006fa0 <__multiply+0x44>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b44      	ldr	r3, [pc, #272]	; (80070a8 <__multiply+0x14c>)
 8006f96:	4845      	ldr	r0, [pc, #276]	; (80070ac <__multiply+0x150>)
 8006f98:	f240 115d 	movw	r1, #349	; 0x15d
 8006f9c:	f000 fcb6 	bl	800790c <__assert_func>
 8006fa0:	f100 0514 	add.w	r5, r0, #20
 8006fa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fa8:	462b      	mov	r3, r5
 8006faa:	2200      	movs	r2, #0
 8006fac:	4543      	cmp	r3, r8
 8006fae:	d321      	bcc.n	8006ff4 <__multiply+0x98>
 8006fb0:	f104 0314 	add.w	r3, r4, #20
 8006fb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fb8:	f109 0314 	add.w	r3, r9, #20
 8006fbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fc0:	9202      	str	r2, [sp, #8]
 8006fc2:	1b3a      	subs	r2, r7, r4
 8006fc4:	3a15      	subs	r2, #21
 8006fc6:	f022 0203 	bic.w	r2, r2, #3
 8006fca:	3204      	adds	r2, #4
 8006fcc:	f104 0115 	add.w	r1, r4, #21
 8006fd0:	428f      	cmp	r7, r1
 8006fd2:	bf38      	it	cc
 8006fd4:	2204      	movcc	r2, #4
 8006fd6:	9201      	str	r2, [sp, #4]
 8006fd8:	9a02      	ldr	r2, [sp, #8]
 8006fda:	9303      	str	r3, [sp, #12]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d80c      	bhi.n	8006ffa <__multiply+0x9e>
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	dd03      	ble.n	8006fec <__multiply+0x90>
 8006fe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d05a      	beq.n	80070a2 <__multiply+0x146>
 8006fec:	6106      	str	r6, [r0, #16]
 8006fee:	b005      	add	sp, #20
 8006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff4:	f843 2b04 	str.w	r2, [r3], #4
 8006ff8:	e7d8      	b.n	8006fac <__multiply+0x50>
 8006ffa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ffe:	f1ba 0f00 	cmp.w	sl, #0
 8007002:	d024      	beq.n	800704e <__multiply+0xf2>
 8007004:	f104 0e14 	add.w	lr, r4, #20
 8007008:	46a9      	mov	r9, r5
 800700a:	f04f 0c00 	mov.w	ip, #0
 800700e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007012:	f8d9 1000 	ldr.w	r1, [r9]
 8007016:	fa1f fb82 	uxth.w	fp, r2
 800701a:	b289      	uxth	r1, r1
 800701c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007024:	f8d9 2000 	ldr.w	r2, [r9]
 8007028:	4461      	add	r1, ip
 800702a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800702e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007036:	b289      	uxth	r1, r1
 8007038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800703c:	4577      	cmp	r7, lr
 800703e:	f849 1b04 	str.w	r1, [r9], #4
 8007042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007046:	d8e2      	bhi.n	800700e <__multiply+0xb2>
 8007048:	9a01      	ldr	r2, [sp, #4]
 800704a:	f845 c002 	str.w	ip, [r5, r2]
 800704e:	9a03      	ldr	r2, [sp, #12]
 8007050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007054:	3304      	adds	r3, #4
 8007056:	f1b9 0f00 	cmp.w	r9, #0
 800705a:	d020      	beq.n	800709e <__multiply+0x142>
 800705c:	6829      	ldr	r1, [r5, #0]
 800705e:	f104 0c14 	add.w	ip, r4, #20
 8007062:	46ae      	mov	lr, r5
 8007064:	f04f 0a00 	mov.w	sl, #0
 8007068:	f8bc b000 	ldrh.w	fp, [ip]
 800706c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007070:	fb09 220b 	mla	r2, r9, fp, r2
 8007074:	4492      	add	sl, r2
 8007076:	b289      	uxth	r1, r1
 8007078:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800707c:	f84e 1b04 	str.w	r1, [lr], #4
 8007080:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007084:	f8be 1000 	ldrh.w	r1, [lr]
 8007088:	0c12      	lsrs	r2, r2, #16
 800708a:	fb09 1102 	mla	r1, r9, r2, r1
 800708e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007092:	4567      	cmp	r7, ip
 8007094:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007098:	d8e6      	bhi.n	8007068 <__multiply+0x10c>
 800709a:	9a01      	ldr	r2, [sp, #4]
 800709c:	50a9      	str	r1, [r5, r2]
 800709e:	3504      	adds	r5, #4
 80070a0:	e79a      	b.n	8006fd8 <__multiply+0x7c>
 80070a2:	3e01      	subs	r6, #1
 80070a4:	e79c      	b.n	8006fe0 <__multiply+0x84>
 80070a6:	bf00      	nop
 80070a8:	08009093 	.word	0x08009093
 80070ac:	080090a4 	.word	0x080090a4

080070b0 <__pow5mult>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4615      	mov	r5, r2
 80070b6:	f012 0203 	ands.w	r2, r2, #3
 80070ba:	4606      	mov	r6, r0
 80070bc:	460f      	mov	r7, r1
 80070be:	d007      	beq.n	80070d0 <__pow5mult+0x20>
 80070c0:	4c25      	ldr	r4, [pc, #148]	; (8007158 <__pow5mult+0xa8>)
 80070c2:	3a01      	subs	r2, #1
 80070c4:	2300      	movs	r3, #0
 80070c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ca:	f7ff fe9b 	bl	8006e04 <__multadd>
 80070ce:	4607      	mov	r7, r0
 80070d0:	10ad      	asrs	r5, r5, #2
 80070d2:	d03d      	beq.n	8007150 <__pow5mult+0xa0>
 80070d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070d6:	b97c      	cbnz	r4, 80070f8 <__pow5mult+0x48>
 80070d8:	2010      	movs	r0, #16
 80070da:	f7ff fe1b 	bl	8006d14 <malloc>
 80070de:	4602      	mov	r2, r0
 80070e0:	6270      	str	r0, [r6, #36]	; 0x24
 80070e2:	b928      	cbnz	r0, 80070f0 <__pow5mult+0x40>
 80070e4:	4b1d      	ldr	r3, [pc, #116]	; (800715c <__pow5mult+0xac>)
 80070e6:	481e      	ldr	r0, [pc, #120]	; (8007160 <__pow5mult+0xb0>)
 80070e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070ec:	f000 fc0e 	bl	800790c <__assert_func>
 80070f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070f4:	6004      	str	r4, [r0, #0]
 80070f6:	60c4      	str	r4, [r0, #12]
 80070f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007100:	b94c      	cbnz	r4, 8007116 <__pow5mult+0x66>
 8007102:	f240 2171 	movw	r1, #625	; 0x271
 8007106:	4630      	mov	r0, r6
 8007108:	f7ff ff12 	bl	8006f30 <__i2b>
 800710c:	2300      	movs	r3, #0
 800710e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007112:	4604      	mov	r4, r0
 8007114:	6003      	str	r3, [r0, #0]
 8007116:	f04f 0900 	mov.w	r9, #0
 800711a:	07eb      	lsls	r3, r5, #31
 800711c:	d50a      	bpl.n	8007134 <__pow5mult+0x84>
 800711e:	4639      	mov	r1, r7
 8007120:	4622      	mov	r2, r4
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ff1a 	bl	8006f5c <__multiply>
 8007128:	4639      	mov	r1, r7
 800712a:	4680      	mov	r8, r0
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff fe47 	bl	8006dc0 <_Bfree>
 8007132:	4647      	mov	r7, r8
 8007134:	106d      	asrs	r5, r5, #1
 8007136:	d00b      	beq.n	8007150 <__pow5mult+0xa0>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	b938      	cbnz	r0, 800714c <__pow5mult+0x9c>
 800713c:	4622      	mov	r2, r4
 800713e:	4621      	mov	r1, r4
 8007140:	4630      	mov	r0, r6
 8007142:	f7ff ff0b 	bl	8006f5c <__multiply>
 8007146:	6020      	str	r0, [r4, #0]
 8007148:	f8c0 9000 	str.w	r9, [r0]
 800714c:	4604      	mov	r4, r0
 800714e:	e7e4      	b.n	800711a <__pow5mult+0x6a>
 8007150:	4638      	mov	r0, r7
 8007152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007156:	bf00      	nop
 8007158:	080091f0 	.word	0x080091f0
 800715c:	08009021 	.word	0x08009021
 8007160:	080090a4 	.word	0x080090a4

08007164 <__lshift>:
 8007164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007168:	460c      	mov	r4, r1
 800716a:	6849      	ldr	r1, [r1, #4]
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	4607      	mov	r7, r0
 8007176:	4691      	mov	r9, r2
 8007178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800717c:	f108 0601 	add.w	r6, r8, #1
 8007180:	42b3      	cmp	r3, r6
 8007182:	db0b      	blt.n	800719c <__lshift+0x38>
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fddb 	bl	8006d40 <_Balloc>
 800718a:	4605      	mov	r5, r0
 800718c:	b948      	cbnz	r0, 80071a2 <__lshift+0x3e>
 800718e:	4602      	mov	r2, r0
 8007190:	4b2a      	ldr	r3, [pc, #168]	; (800723c <__lshift+0xd8>)
 8007192:	482b      	ldr	r0, [pc, #172]	; (8007240 <__lshift+0xdc>)
 8007194:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007198:	f000 fbb8 	bl	800790c <__assert_func>
 800719c:	3101      	adds	r1, #1
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	e7ee      	b.n	8007180 <__lshift+0x1c>
 80071a2:	2300      	movs	r3, #0
 80071a4:	f100 0114 	add.w	r1, r0, #20
 80071a8:	f100 0210 	add.w	r2, r0, #16
 80071ac:	4618      	mov	r0, r3
 80071ae:	4553      	cmp	r3, sl
 80071b0:	db37      	blt.n	8007222 <__lshift+0xbe>
 80071b2:	6920      	ldr	r0, [r4, #16]
 80071b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071b8:	f104 0314 	add.w	r3, r4, #20
 80071bc:	f019 091f 	ands.w	r9, r9, #31
 80071c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071c8:	d02f      	beq.n	800722a <__lshift+0xc6>
 80071ca:	f1c9 0e20 	rsb	lr, r9, #32
 80071ce:	468a      	mov	sl, r1
 80071d0:	f04f 0c00 	mov.w	ip, #0
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	fa02 f209 	lsl.w	r2, r2, r9
 80071da:	ea42 020c 	orr.w	r2, r2, ip
 80071de:	f84a 2b04 	str.w	r2, [sl], #4
 80071e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e6:	4298      	cmp	r0, r3
 80071e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80071ec:	d8f2      	bhi.n	80071d4 <__lshift+0x70>
 80071ee:	1b03      	subs	r3, r0, r4
 80071f0:	3b15      	subs	r3, #21
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	3304      	adds	r3, #4
 80071f8:	f104 0215 	add.w	r2, r4, #21
 80071fc:	4290      	cmp	r0, r2
 80071fe:	bf38      	it	cc
 8007200:	2304      	movcc	r3, #4
 8007202:	f841 c003 	str.w	ip, [r1, r3]
 8007206:	f1bc 0f00 	cmp.w	ip, #0
 800720a:	d001      	beq.n	8007210 <__lshift+0xac>
 800720c:	f108 0602 	add.w	r6, r8, #2
 8007210:	3e01      	subs	r6, #1
 8007212:	4638      	mov	r0, r7
 8007214:	612e      	str	r6, [r5, #16]
 8007216:	4621      	mov	r1, r4
 8007218:	f7ff fdd2 	bl	8006dc0 <_Bfree>
 800721c:	4628      	mov	r0, r5
 800721e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007222:	f842 0f04 	str.w	r0, [r2, #4]!
 8007226:	3301      	adds	r3, #1
 8007228:	e7c1      	b.n	80071ae <__lshift+0x4a>
 800722a:	3904      	subs	r1, #4
 800722c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007230:	f841 2f04 	str.w	r2, [r1, #4]!
 8007234:	4298      	cmp	r0, r3
 8007236:	d8f9      	bhi.n	800722c <__lshift+0xc8>
 8007238:	e7ea      	b.n	8007210 <__lshift+0xac>
 800723a:	bf00      	nop
 800723c:	08009093 	.word	0x08009093
 8007240:	080090a4 	.word	0x080090a4

08007244 <__mcmp>:
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	6902      	ldr	r2, [r0, #16]
 8007248:	690c      	ldr	r4, [r1, #16]
 800724a:	1b12      	subs	r2, r2, r4
 800724c:	d10e      	bne.n	800726c <__mcmp+0x28>
 800724e:	f100 0314 	add.w	r3, r0, #20
 8007252:	3114      	adds	r1, #20
 8007254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800725c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007264:	42a5      	cmp	r5, r4
 8007266:	d003      	beq.n	8007270 <__mcmp+0x2c>
 8007268:	d305      	bcc.n	8007276 <__mcmp+0x32>
 800726a:	2201      	movs	r2, #1
 800726c:	4610      	mov	r0, r2
 800726e:	bd30      	pop	{r4, r5, pc}
 8007270:	4283      	cmp	r3, r0
 8007272:	d3f3      	bcc.n	800725c <__mcmp+0x18>
 8007274:	e7fa      	b.n	800726c <__mcmp+0x28>
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	e7f7      	b.n	800726c <__mcmp+0x28>

0800727c <__mdiff>:
 800727c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	460c      	mov	r4, r1
 8007282:	4606      	mov	r6, r0
 8007284:	4611      	mov	r1, r2
 8007286:	4620      	mov	r0, r4
 8007288:	4690      	mov	r8, r2
 800728a:	f7ff ffdb 	bl	8007244 <__mcmp>
 800728e:	1e05      	subs	r5, r0, #0
 8007290:	d110      	bne.n	80072b4 <__mdiff+0x38>
 8007292:	4629      	mov	r1, r5
 8007294:	4630      	mov	r0, r6
 8007296:	f7ff fd53 	bl	8006d40 <_Balloc>
 800729a:	b930      	cbnz	r0, 80072aa <__mdiff+0x2e>
 800729c:	4b3a      	ldr	r3, [pc, #232]	; (8007388 <__mdiff+0x10c>)
 800729e:	4602      	mov	r2, r0
 80072a0:	f240 2132 	movw	r1, #562	; 0x232
 80072a4:	4839      	ldr	r0, [pc, #228]	; (800738c <__mdiff+0x110>)
 80072a6:	f000 fb31 	bl	800790c <__assert_func>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	bfa4      	itt	ge
 80072b6:	4643      	movge	r3, r8
 80072b8:	46a0      	movge	r8, r4
 80072ba:	4630      	mov	r0, r6
 80072bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072c0:	bfa6      	itte	ge
 80072c2:	461c      	movge	r4, r3
 80072c4:	2500      	movge	r5, #0
 80072c6:	2501      	movlt	r5, #1
 80072c8:	f7ff fd3a 	bl	8006d40 <_Balloc>
 80072cc:	b920      	cbnz	r0, 80072d8 <__mdiff+0x5c>
 80072ce:	4b2e      	ldr	r3, [pc, #184]	; (8007388 <__mdiff+0x10c>)
 80072d0:	4602      	mov	r2, r0
 80072d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072d6:	e7e5      	b.n	80072a4 <__mdiff+0x28>
 80072d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072dc:	6926      	ldr	r6, [r4, #16]
 80072de:	60c5      	str	r5, [r0, #12]
 80072e0:	f104 0914 	add.w	r9, r4, #20
 80072e4:	f108 0514 	add.w	r5, r8, #20
 80072e8:	f100 0e14 	add.w	lr, r0, #20
 80072ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072f4:	f108 0210 	add.w	r2, r8, #16
 80072f8:	46f2      	mov	sl, lr
 80072fa:	2100      	movs	r1, #0
 80072fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007304:	fa1f f883 	uxth.w	r8, r3
 8007308:	fa11 f18b 	uxtah	r1, r1, fp
 800730c:	0c1b      	lsrs	r3, r3, #16
 800730e:	eba1 0808 	sub.w	r8, r1, r8
 8007312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800731a:	fa1f f888 	uxth.w	r8, r8
 800731e:	1419      	asrs	r1, r3, #16
 8007320:	454e      	cmp	r6, r9
 8007322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007326:	f84a 3b04 	str.w	r3, [sl], #4
 800732a:	d8e7      	bhi.n	80072fc <__mdiff+0x80>
 800732c:	1b33      	subs	r3, r6, r4
 800732e:	3b15      	subs	r3, #21
 8007330:	f023 0303 	bic.w	r3, r3, #3
 8007334:	3304      	adds	r3, #4
 8007336:	3415      	adds	r4, #21
 8007338:	42a6      	cmp	r6, r4
 800733a:	bf38      	it	cc
 800733c:	2304      	movcc	r3, #4
 800733e:	441d      	add	r5, r3
 8007340:	4473      	add	r3, lr
 8007342:	469e      	mov	lr, r3
 8007344:	462e      	mov	r6, r5
 8007346:	4566      	cmp	r6, ip
 8007348:	d30e      	bcc.n	8007368 <__mdiff+0xec>
 800734a:	f10c 0203 	add.w	r2, ip, #3
 800734e:	1b52      	subs	r2, r2, r5
 8007350:	f022 0203 	bic.w	r2, r2, #3
 8007354:	3d03      	subs	r5, #3
 8007356:	45ac      	cmp	ip, r5
 8007358:	bf38      	it	cc
 800735a:	2200      	movcc	r2, #0
 800735c:	441a      	add	r2, r3
 800735e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007362:	b17b      	cbz	r3, 8007384 <__mdiff+0x108>
 8007364:	6107      	str	r7, [r0, #16]
 8007366:	e7a3      	b.n	80072b0 <__mdiff+0x34>
 8007368:	f856 8b04 	ldr.w	r8, [r6], #4
 800736c:	fa11 f288 	uxtah	r2, r1, r8
 8007370:	1414      	asrs	r4, r2, #16
 8007372:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007376:	b292      	uxth	r2, r2
 8007378:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800737c:	f84e 2b04 	str.w	r2, [lr], #4
 8007380:	1421      	asrs	r1, r4, #16
 8007382:	e7e0      	b.n	8007346 <__mdiff+0xca>
 8007384:	3f01      	subs	r7, #1
 8007386:	e7ea      	b.n	800735e <__mdiff+0xe2>
 8007388:	08009093 	.word	0x08009093
 800738c:	080090a4 	.word	0x080090a4

08007390 <__d2b>:
 8007390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4689      	mov	r9, r1
 8007396:	2101      	movs	r1, #1
 8007398:	ec57 6b10 	vmov	r6, r7, d0
 800739c:	4690      	mov	r8, r2
 800739e:	f7ff fccf 	bl	8006d40 <_Balloc>
 80073a2:	4604      	mov	r4, r0
 80073a4:	b930      	cbnz	r0, 80073b4 <__d2b+0x24>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <__d2b+0xb0>)
 80073aa:	4826      	ldr	r0, [pc, #152]	; (8007444 <__d2b+0xb4>)
 80073ac:	f240 310a 	movw	r1, #778	; 0x30a
 80073b0:	f000 faac 	bl	800790c <__assert_func>
 80073b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80073b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073bc:	bb35      	cbnz	r5, 800740c <__d2b+0x7c>
 80073be:	2e00      	cmp	r6, #0
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	d028      	beq.n	8007416 <__d2b+0x86>
 80073c4:	4668      	mov	r0, sp
 80073c6:	9600      	str	r6, [sp, #0]
 80073c8:	f7ff fd82 	bl	8006ed0 <__lo0bits>
 80073cc:	9900      	ldr	r1, [sp, #0]
 80073ce:	b300      	cbz	r0, 8007412 <__d2b+0x82>
 80073d0:	9a01      	ldr	r2, [sp, #4]
 80073d2:	f1c0 0320 	rsb	r3, r0, #32
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	430b      	orrs	r3, r1
 80073dc:	40c2      	lsrs	r2, r0
 80073de:	6163      	str	r3, [r4, #20]
 80073e0:	9201      	str	r2, [sp, #4]
 80073e2:	9b01      	ldr	r3, [sp, #4]
 80073e4:	61a3      	str	r3, [r4, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bf14      	ite	ne
 80073ea:	2202      	movne	r2, #2
 80073ec:	2201      	moveq	r2, #1
 80073ee:	6122      	str	r2, [r4, #16]
 80073f0:	b1d5      	cbz	r5, 8007428 <__d2b+0x98>
 80073f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073f6:	4405      	add	r5, r0
 80073f8:	f8c9 5000 	str.w	r5, [r9]
 80073fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007400:	f8c8 0000 	str.w	r0, [r8]
 8007404:	4620      	mov	r0, r4
 8007406:	b003      	add	sp, #12
 8007408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007410:	e7d5      	b.n	80073be <__d2b+0x2e>
 8007412:	6161      	str	r1, [r4, #20]
 8007414:	e7e5      	b.n	80073e2 <__d2b+0x52>
 8007416:	a801      	add	r0, sp, #4
 8007418:	f7ff fd5a 	bl	8006ed0 <__lo0bits>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	6163      	str	r3, [r4, #20]
 8007420:	2201      	movs	r2, #1
 8007422:	6122      	str	r2, [r4, #16]
 8007424:	3020      	adds	r0, #32
 8007426:	e7e3      	b.n	80073f0 <__d2b+0x60>
 8007428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800742c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007430:	f8c9 0000 	str.w	r0, [r9]
 8007434:	6918      	ldr	r0, [r3, #16]
 8007436:	f7ff fd2b 	bl	8006e90 <__hi0bits>
 800743a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800743e:	e7df      	b.n	8007400 <__d2b+0x70>
 8007440:	08009093 	.word	0x08009093
 8007444:	080090a4 	.word	0x080090a4

08007448 <_calloc_r>:
 8007448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800744a:	fba1 2402 	umull	r2, r4, r1, r2
 800744e:	b94c      	cbnz	r4, 8007464 <_calloc_r+0x1c>
 8007450:	4611      	mov	r1, r2
 8007452:	9201      	str	r2, [sp, #4]
 8007454:	f000 f87a 	bl	800754c <_malloc_r>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	4605      	mov	r5, r0
 800745c:	b930      	cbnz	r0, 800746c <_calloc_r+0x24>
 800745e:	4628      	mov	r0, r5
 8007460:	b003      	add	sp, #12
 8007462:	bd30      	pop	{r4, r5, pc}
 8007464:	220c      	movs	r2, #12
 8007466:	6002      	str	r2, [r0, #0]
 8007468:	2500      	movs	r5, #0
 800746a:	e7f8      	b.n	800745e <_calloc_r+0x16>
 800746c:	4621      	mov	r1, r4
 800746e:	f7fe f91b 	bl	80056a8 <memset>
 8007472:	e7f4      	b.n	800745e <_calloc_r+0x16>

08007474 <_free_r>:
 8007474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007476:	2900      	cmp	r1, #0
 8007478:	d044      	beq.n	8007504 <_free_r+0x90>
 800747a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747e:	9001      	str	r0, [sp, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f1a1 0404 	sub.w	r4, r1, #4
 8007486:	bfb8      	it	lt
 8007488:	18e4      	addlt	r4, r4, r3
 800748a:	f000 fa9b 	bl	80079c4 <__malloc_lock>
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <_free_r+0x94>)
 8007490:	9801      	ldr	r0, [sp, #4]
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	b933      	cbnz	r3, 80074a4 <_free_r+0x30>
 8007496:	6063      	str	r3, [r4, #4]
 8007498:	6014      	str	r4, [r2, #0]
 800749a:	b003      	add	sp, #12
 800749c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074a0:	f000 ba96 	b.w	80079d0 <__malloc_unlock>
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d908      	bls.n	80074ba <_free_r+0x46>
 80074a8:	6825      	ldr	r5, [r4, #0]
 80074aa:	1961      	adds	r1, r4, r5
 80074ac:	428b      	cmp	r3, r1
 80074ae:	bf01      	itttt	eq
 80074b0:	6819      	ldreq	r1, [r3, #0]
 80074b2:	685b      	ldreq	r3, [r3, #4]
 80074b4:	1949      	addeq	r1, r1, r5
 80074b6:	6021      	streq	r1, [r4, #0]
 80074b8:	e7ed      	b.n	8007496 <_free_r+0x22>
 80074ba:	461a      	mov	r2, r3
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	b10b      	cbz	r3, 80074c4 <_free_r+0x50>
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d9fa      	bls.n	80074ba <_free_r+0x46>
 80074c4:	6811      	ldr	r1, [r2, #0]
 80074c6:	1855      	adds	r5, r2, r1
 80074c8:	42a5      	cmp	r5, r4
 80074ca:	d10b      	bne.n	80074e4 <_free_r+0x70>
 80074cc:	6824      	ldr	r4, [r4, #0]
 80074ce:	4421      	add	r1, r4
 80074d0:	1854      	adds	r4, r2, r1
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	6011      	str	r1, [r2, #0]
 80074d6:	d1e0      	bne.n	800749a <_free_r+0x26>
 80074d8:	681c      	ldr	r4, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	6053      	str	r3, [r2, #4]
 80074de:	4421      	add	r1, r4
 80074e0:	6011      	str	r1, [r2, #0]
 80074e2:	e7da      	b.n	800749a <_free_r+0x26>
 80074e4:	d902      	bls.n	80074ec <_free_r+0x78>
 80074e6:	230c      	movs	r3, #12
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	e7d6      	b.n	800749a <_free_r+0x26>
 80074ec:	6825      	ldr	r5, [r4, #0]
 80074ee:	1961      	adds	r1, r4, r5
 80074f0:	428b      	cmp	r3, r1
 80074f2:	bf04      	itt	eq
 80074f4:	6819      	ldreq	r1, [r3, #0]
 80074f6:	685b      	ldreq	r3, [r3, #4]
 80074f8:	6063      	str	r3, [r4, #4]
 80074fa:	bf04      	itt	eq
 80074fc:	1949      	addeq	r1, r1, r5
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	6054      	str	r4, [r2, #4]
 8007502:	e7ca      	b.n	800749a <_free_r+0x26>
 8007504:	b003      	add	sp, #12
 8007506:	bd30      	pop	{r4, r5, pc}
 8007508:	20000b5c 	.word	0x20000b5c

0800750c <sbrk_aligned>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	4e0e      	ldr	r6, [pc, #56]	; (8007548 <sbrk_aligned+0x3c>)
 8007510:	460c      	mov	r4, r1
 8007512:	6831      	ldr	r1, [r6, #0]
 8007514:	4605      	mov	r5, r0
 8007516:	b911      	cbnz	r1, 800751e <sbrk_aligned+0x12>
 8007518:	f000 f9e8 	bl	80078ec <_sbrk_r>
 800751c:	6030      	str	r0, [r6, #0]
 800751e:	4621      	mov	r1, r4
 8007520:	4628      	mov	r0, r5
 8007522:	f000 f9e3 	bl	80078ec <_sbrk_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d00a      	beq.n	8007540 <sbrk_aligned+0x34>
 800752a:	1cc4      	adds	r4, r0, #3
 800752c:	f024 0403 	bic.w	r4, r4, #3
 8007530:	42a0      	cmp	r0, r4
 8007532:	d007      	beq.n	8007544 <sbrk_aligned+0x38>
 8007534:	1a21      	subs	r1, r4, r0
 8007536:	4628      	mov	r0, r5
 8007538:	f000 f9d8 	bl	80078ec <_sbrk_r>
 800753c:	3001      	adds	r0, #1
 800753e:	d101      	bne.n	8007544 <sbrk_aligned+0x38>
 8007540:	f04f 34ff 	mov.w	r4, #4294967295
 8007544:	4620      	mov	r0, r4
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	20000b60 	.word	0x20000b60

0800754c <_malloc_r>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	1ccd      	adds	r5, r1, #3
 8007552:	f025 0503 	bic.w	r5, r5, #3
 8007556:	3508      	adds	r5, #8
 8007558:	2d0c      	cmp	r5, #12
 800755a:	bf38      	it	cc
 800755c:	250c      	movcc	r5, #12
 800755e:	2d00      	cmp	r5, #0
 8007560:	4607      	mov	r7, r0
 8007562:	db01      	blt.n	8007568 <_malloc_r+0x1c>
 8007564:	42a9      	cmp	r1, r5
 8007566:	d905      	bls.n	8007574 <_malloc_r+0x28>
 8007568:	230c      	movs	r3, #12
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	2600      	movs	r6, #0
 800756e:	4630      	mov	r0, r6
 8007570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007574:	4e2e      	ldr	r6, [pc, #184]	; (8007630 <_malloc_r+0xe4>)
 8007576:	f000 fa25 	bl	80079c4 <__malloc_lock>
 800757a:	6833      	ldr	r3, [r6, #0]
 800757c:	461c      	mov	r4, r3
 800757e:	bb34      	cbnz	r4, 80075ce <_malloc_r+0x82>
 8007580:	4629      	mov	r1, r5
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ffc2 	bl	800750c <sbrk_aligned>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	4604      	mov	r4, r0
 800758c:	d14d      	bne.n	800762a <_malloc_r+0xde>
 800758e:	6834      	ldr	r4, [r6, #0]
 8007590:	4626      	mov	r6, r4
 8007592:	2e00      	cmp	r6, #0
 8007594:	d140      	bne.n	8007618 <_malloc_r+0xcc>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	4631      	mov	r1, r6
 800759a:	4638      	mov	r0, r7
 800759c:	eb04 0803 	add.w	r8, r4, r3
 80075a0:	f000 f9a4 	bl	80078ec <_sbrk_r>
 80075a4:	4580      	cmp	r8, r0
 80075a6:	d13a      	bne.n	800761e <_malloc_r+0xd2>
 80075a8:	6821      	ldr	r1, [r4, #0]
 80075aa:	3503      	adds	r5, #3
 80075ac:	1a6d      	subs	r5, r5, r1
 80075ae:	f025 0503 	bic.w	r5, r5, #3
 80075b2:	3508      	adds	r5, #8
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	bf38      	it	cc
 80075b8:	250c      	movcc	r5, #12
 80075ba:	4629      	mov	r1, r5
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ffa5 	bl	800750c <sbrk_aligned>
 80075c2:	3001      	adds	r0, #1
 80075c4:	d02b      	beq.n	800761e <_malloc_r+0xd2>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	442b      	add	r3, r5
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	e00e      	b.n	80075ec <_malloc_r+0xa0>
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	1b52      	subs	r2, r2, r5
 80075d2:	d41e      	bmi.n	8007612 <_malloc_r+0xc6>
 80075d4:	2a0b      	cmp	r2, #11
 80075d6:	d916      	bls.n	8007606 <_malloc_r+0xba>
 80075d8:	1961      	adds	r1, r4, r5
 80075da:	42a3      	cmp	r3, r4
 80075dc:	6025      	str	r5, [r4, #0]
 80075de:	bf18      	it	ne
 80075e0:	6059      	strne	r1, [r3, #4]
 80075e2:	6863      	ldr	r3, [r4, #4]
 80075e4:	bf08      	it	eq
 80075e6:	6031      	streq	r1, [r6, #0]
 80075e8:	5162      	str	r2, [r4, r5]
 80075ea:	604b      	str	r3, [r1, #4]
 80075ec:	4638      	mov	r0, r7
 80075ee:	f104 060b 	add.w	r6, r4, #11
 80075f2:	f000 f9ed 	bl	80079d0 <__malloc_unlock>
 80075f6:	f026 0607 	bic.w	r6, r6, #7
 80075fa:	1d23      	adds	r3, r4, #4
 80075fc:	1af2      	subs	r2, r6, r3
 80075fe:	d0b6      	beq.n	800756e <_malloc_r+0x22>
 8007600:	1b9b      	subs	r3, r3, r6
 8007602:	50a3      	str	r3, [r4, r2]
 8007604:	e7b3      	b.n	800756e <_malloc_r+0x22>
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	42a3      	cmp	r3, r4
 800760a:	bf0c      	ite	eq
 800760c:	6032      	streq	r2, [r6, #0]
 800760e:	605a      	strne	r2, [r3, #4]
 8007610:	e7ec      	b.n	80075ec <_malloc_r+0xa0>
 8007612:	4623      	mov	r3, r4
 8007614:	6864      	ldr	r4, [r4, #4]
 8007616:	e7b2      	b.n	800757e <_malloc_r+0x32>
 8007618:	4634      	mov	r4, r6
 800761a:	6876      	ldr	r6, [r6, #4]
 800761c:	e7b9      	b.n	8007592 <_malloc_r+0x46>
 800761e:	230c      	movs	r3, #12
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	4638      	mov	r0, r7
 8007624:	f000 f9d4 	bl	80079d0 <__malloc_unlock>
 8007628:	e7a1      	b.n	800756e <_malloc_r+0x22>
 800762a:	6025      	str	r5, [r4, #0]
 800762c:	e7de      	b.n	80075ec <_malloc_r+0xa0>
 800762e:	bf00      	nop
 8007630:	20000b5c 	.word	0x20000b5c

08007634 <__ssputs_r>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	688e      	ldr	r6, [r1, #8]
 800763a:	429e      	cmp	r6, r3
 800763c:	4682      	mov	sl, r0
 800763e:	460c      	mov	r4, r1
 8007640:	4690      	mov	r8, r2
 8007642:	461f      	mov	r7, r3
 8007644:	d838      	bhi.n	80076b8 <__ssputs_r+0x84>
 8007646:	898a      	ldrh	r2, [r1, #12]
 8007648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800764c:	d032      	beq.n	80076b4 <__ssputs_r+0x80>
 800764e:	6825      	ldr	r5, [r4, #0]
 8007650:	6909      	ldr	r1, [r1, #16]
 8007652:	eba5 0901 	sub.w	r9, r5, r1
 8007656:	6965      	ldr	r5, [r4, #20]
 8007658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800765c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007660:	3301      	adds	r3, #1
 8007662:	444b      	add	r3, r9
 8007664:	106d      	asrs	r5, r5, #1
 8007666:	429d      	cmp	r5, r3
 8007668:	bf38      	it	cc
 800766a:	461d      	movcc	r5, r3
 800766c:	0553      	lsls	r3, r2, #21
 800766e:	d531      	bpl.n	80076d4 <__ssputs_r+0xa0>
 8007670:	4629      	mov	r1, r5
 8007672:	f7ff ff6b 	bl	800754c <_malloc_r>
 8007676:	4606      	mov	r6, r0
 8007678:	b950      	cbnz	r0, 8007690 <__ssputs_r+0x5c>
 800767a:	230c      	movs	r3, #12
 800767c:	f8ca 3000 	str.w	r3, [sl]
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	6921      	ldr	r1, [r4, #16]
 8007692:	464a      	mov	r2, r9
 8007694:	f7ff fb46 	bl	8006d24 <memcpy>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	6126      	str	r6, [r4, #16]
 80076a6:	6165      	str	r5, [r4, #20]
 80076a8:	444e      	add	r6, r9
 80076aa:	eba5 0509 	sub.w	r5, r5, r9
 80076ae:	6026      	str	r6, [r4, #0]
 80076b0:	60a5      	str	r5, [r4, #8]
 80076b2:	463e      	mov	r6, r7
 80076b4:	42be      	cmp	r6, r7
 80076b6:	d900      	bls.n	80076ba <__ssputs_r+0x86>
 80076b8:	463e      	mov	r6, r7
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	4632      	mov	r2, r6
 80076be:	4641      	mov	r1, r8
 80076c0:	f000 f966 	bl	8007990 <memmove>
 80076c4:	68a3      	ldr	r3, [r4, #8]
 80076c6:	1b9b      	subs	r3, r3, r6
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	4433      	add	r3, r6
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	2000      	movs	r0, #0
 80076d2:	e7db      	b.n	800768c <__ssputs_r+0x58>
 80076d4:	462a      	mov	r2, r5
 80076d6:	f000 f981 	bl	80079dc <_realloc_r>
 80076da:	4606      	mov	r6, r0
 80076dc:	2800      	cmp	r0, #0
 80076de:	d1e1      	bne.n	80076a4 <__ssputs_r+0x70>
 80076e0:	6921      	ldr	r1, [r4, #16]
 80076e2:	4650      	mov	r0, sl
 80076e4:	f7ff fec6 	bl	8007474 <_free_r>
 80076e8:	e7c7      	b.n	800767a <__ssputs_r+0x46>
	...

080076ec <_svfiprintf_r>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4698      	mov	r8, r3
 80076f2:	898b      	ldrh	r3, [r1, #12]
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	b09d      	sub	sp, #116	; 0x74
 80076f8:	4607      	mov	r7, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	d50e      	bpl.n	800771e <_svfiprintf_r+0x32>
 8007700:	690b      	ldr	r3, [r1, #16]
 8007702:	b963      	cbnz	r3, 800771e <_svfiprintf_r+0x32>
 8007704:	2140      	movs	r1, #64	; 0x40
 8007706:	f7ff ff21 	bl	800754c <_malloc_r>
 800770a:	6028      	str	r0, [r5, #0]
 800770c:	6128      	str	r0, [r5, #16]
 800770e:	b920      	cbnz	r0, 800771a <_svfiprintf_r+0x2e>
 8007710:	230c      	movs	r3, #12
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e0d1      	b.n	80078be <_svfiprintf_r+0x1d2>
 800771a:	2340      	movs	r3, #64	; 0x40
 800771c:	616b      	str	r3, [r5, #20]
 800771e:	2300      	movs	r3, #0
 8007720:	9309      	str	r3, [sp, #36]	; 0x24
 8007722:	2320      	movs	r3, #32
 8007724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007728:	f8cd 800c 	str.w	r8, [sp, #12]
 800772c:	2330      	movs	r3, #48	; 0x30
 800772e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078d8 <_svfiprintf_r+0x1ec>
 8007732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007736:	f04f 0901 	mov.w	r9, #1
 800773a:	4623      	mov	r3, r4
 800773c:	469a      	mov	sl, r3
 800773e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007742:	b10a      	cbz	r2, 8007748 <_svfiprintf_r+0x5c>
 8007744:	2a25      	cmp	r2, #37	; 0x25
 8007746:	d1f9      	bne.n	800773c <_svfiprintf_r+0x50>
 8007748:	ebba 0b04 	subs.w	fp, sl, r4
 800774c:	d00b      	beq.n	8007766 <_svfiprintf_r+0x7a>
 800774e:	465b      	mov	r3, fp
 8007750:	4622      	mov	r2, r4
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ff6d 	bl	8007634 <__ssputs_r>
 800775a:	3001      	adds	r0, #1
 800775c:	f000 80aa 	beq.w	80078b4 <_svfiprintf_r+0x1c8>
 8007760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007762:	445a      	add	r2, fp
 8007764:	9209      	str	r2, [sp, #36]	; 0x24
 8007766:	f89a 3000 	ldrb.w	r3, [sl]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80a2 	beq.w	80078b4 <_svfiprintf_r+0x1c8>
 8007770:	2300      	movs	r3, #0
 8007772:	f04f 32ff 	mov.w	r2, #4294967295
 8007776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777a:	f10a 0a01 	add.w	sl, sl, #1
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007786:	931a      	str	r3, [sp, #104]	; 0x68
 8007788:	4654      	mov	r4, sl
 800778a:	2205      	movs	r2, #5
 800778c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007790:	4851      	ldr	r0, [pc, #324]	; (80078d8 <_svfiprintf_r+0x1ec>)
 8007792:	f7f8 fd45 	bl	8000220 <memchr>
 8007796:	9a04      	ldr	r2, [sp, #16]
 8007798:	b9d8      	cbnz	r0, 80077d2 <_svfiprintf_r+0xe6>
 800779a:	06d0      	lsls	r0, r2, #27
 800779c:	bf44      	itt	mi
 800779e:	2320      	movmi	r3, #32
 80077a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a4:	0711      	lsls	r1, r2, #28
 80077a6:	bf44      	itt	mi
 80077a8:	232b      	movmi	r3, #43	; 0x2b
 80077aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ae:	f89a 3000 	ldrb.w	r3, [sl]
 80077b2:	2b2a      	cmp	r3, #42	; 0x2a
 80077b4:	d015      	beq.n	80077e2 <_svfiprintf_r+0xf6>
 80077b6:	9a07      	ldr	r2, [sp, #28]
 80077b8:	4654      	mov	r4, sl
 80077ba:	2000      	movs	r0, #0
 80077bc:	f04f 0c0a 	mov.w	ip, #10
 80077c0:	4621      	mov	r1, r4
 80077c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c6:	3b30      	subs	r3, #48	; 0x30
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d94e      	bls.n	800786a <_svfiprintf_r+0x17e>
 80077cc:	b1b0      	cbz	r0, 80077fc <_svfiprintf_r+0x110>
 80077ce:	9207      	str	r2, [sp, #28]
 80077d0:	e014      	b.n	80077fc <_svfiprintf_r+0x110>
 80077d2:	eba0 0308 	sub.w	r3, r0, r8
 80077d6:	fa09 f303 	lsl.w	r3, r9, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	46a2      	mov	sl, r4
 80077e0:	e7d2      	b.n	8007788 <_svfiprintf_r+0x9c>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	1d19      	adds	r1, r3, #4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	9103      	str	r1, [sp, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bfbb      	ittet	lt
 80077ee:	425b      	neglt	r3, r3
 80077f0:	f042 0202 	orrlt.w	r2, r2, #2
 80077f4:	9307      	strge	r3, [sp, #28]
 80077f6:	9307      	strlt	r3, [sp, #28]
 80077f8:	bfb8      	it	lt
 80077fa:	9204      	strlt	r2, [sp, #16]
 80077fc:	7823      	ldrb	r3, [r4, #0]
 80077fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007800:	d10c      	bne.n	800781c <_svfiprintf_r+0x130>
 8007802:	7863      	ldrb	r3, [r4, #1]
 8007804:	2b2a      	cmp	r3, #42	; 0x2a
 8007806:	d135      	bne.n	8007874 <_svfiprintf_r+0x188>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9203      	str	r2, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfb8      	it	lt
 8007814:	f04f 33ff 	movlt.w	r3, #4294967295
 8007818:	3402      	adds	r4, #2
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078e8 <_svfiprintf_r+0x1fc>
 8007820:	7821      	ldrb	r1, [r4, #0]
 8007822:	2203      	movs	r2, #3
 8007824:	4650      	mov	r0, sl
 8007826:	f7f8 fcfb 	bl	8000220 <memchr>
 800782a:	b140      	cbz	r0, 800783e <_svfiprintf_r+0x152>
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	eba0 000a 	sub.w	r0, r0, sl
 8007832:	fa03 f000 	lsl.w	r0, r3, r0
 8007836:	9b04      	ldr	r3, [sp, #16]
 8007838:	4303      	orrs	r3, r0
 800783a:	3401      	adds	r4, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007842:	4826      	ldr	r0, [pc, #152]	; (80078dc <_svfiprintf_r+0x1f0>)
 8007844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007848:	2206      	movs	r2, #6
 800784a:	f7f8 fce9 	bl	8000220 <memchr>
 800784e:	2800      	cmp	r0, #0
 8007850:	d038      	beq.n	80078c4 <_svfiprintf_r+0x1d8>
 8007852:	4b23      	ldr	r3, [pc, #140]	; (80078e0 <_svfiprintf_r+0x1f4>)
 8007854:	bb1b      	cbnz	r3, 800789e <_svfiprintf_r+0x1b2>
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	3307      	adds	r3, #7
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	3308      	adds	r3, #8
 8007860:	9303      	str	r3, [sp, #12]
 8007862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007864:	4433      	add	r3, r6
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	e767      	b.n	800773a <_svfiprintf_r+0x4e>
 800786a:	fb0c 3202 	mla	r2, ip, r2, r3
 800786e:	460c      	mov	r4, r1
 8007870:	2001      	movs	r0, #1
 8007872:	e7a5      	b.n	80077c0 <_svfiprintf_r+0xd4>
 8007874:	2300      	movs	r3, #0
 8007876:	3401      	adds	r4, #1
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	4619      	mov	r1, r3
 800787c:	f04f 0c0a 	mov.w	ip, #10
 8007880:	4620      	mov	r0, r4
 8007882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007886:	3a30      	subs	r2, #48	; 0x30
 8007888:	2a09      	cmp	r2, #9
 800788a:	d903      	bls.n	8007894 <_svfiprintf_r+0x1a8>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0c5      	beq.n	800781c <_svfiprintf_r+0x130>
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	e7c3      	b.n	800781c <_svfiprintf_r+0x130>
 8007894:	fb0c 2101 	mla	r1, ip, r1, r2
 8007898:	4604      	mov	r4, r0
 800789a:	2301      	movs	r3, #1
 800789c:	e7f0      	b.n	8007880 <_svfiprintf_r+0x194>
 800789e:	ab03      	add	r3, sp, #12
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	462a      	mov	r2, r5
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <_svfiprintf_r+0x1f8>)
 80078a6:	a904      	add	r1, sp, #16
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7fd ffa5 	bl	80057f8 <_printf_float>
 80078ae:	1c42      	adds	r2, r0, #1
 80078b0:	4606      	mov	r6, r0
 80078b2:	d1d6      	bne.n	8007862 <_svfiprintf_r+0x176>
 80078b4:	89ab      	ldrh	r3, [r5, #12]
 80078b6:	065b      	lsls	r3, r3, #25
 80078b8:	f53f af2c 	bmi.w	8007714 <_svfiprintf_r+0x28>
 80078bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078be:	b01d      	add	sp, #116	; 0x74
 80078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c4:	ab03      	add	r3, sp, #12
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	462a      	mov	r2, r5
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <_svfiprintf_r+0x1f8>)
 80078cc:	a904      	add	r1, sp, #16
 80078ce:	4638      	mov	r0, r7
 80078d0:	f7fe fa36 	bl	8005d40 <_printf_i>
 80078d4:	e7eb      	b.n	80078ae <_svfiprintf_r+0x1c2>
 80078d6:	bf00      	nop
 80078d8:	080091fc 	.word	0x080091fc
 80078dc:	08009206 	.word	0x08009206
 80078e0:	080057f9 	.word	0x080057f9
 80078e4:	08007635 	.word	0x08007635
 80078e8:	08009202 	.word	0x08009202

080078ec <_sbrk_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d06      	ldr	r5, [pc, #24]	; (8007908 <_sbrk_r+0x1c>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	f7fa f974 	bl	8001be4 <_sbrk>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_sbrk_r+0x1a>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_sbrk_r+0x1a>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20000b64 	.word	0x20000b64

0800790c <__assert_func>:
 800790c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800790e:	4614      	mov	r4, r2
 8007910:	461a      	mov	r2, r3
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <__assert_func+0x2c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4605      	mov	r5, r0
 8007918:	68d8      	ldr	r0, [r3, #12]
 800791a:	b14c      	cbz	r4, 8007930 <__assert_func+0x24>
 800791c:	4b07      	ldr	r3, [pc, #28]	; (800793c <__assert_func+0x30>)
 800791e:	9100      	str	r1, [sp, #0]
 8007920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007924:	4906      	ldr	r1, [pc, #24]	; (8007940 <__assert_func+0x34>)
 8007926:	462b      	mov	r3, r5
 8007928:	f000 f80e 	bl	8007948 <fiprintf>
 800792c:	f000 faac 	bl	8007e88 <abort>
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <__assert_func+0x38>)
 8007932:	461c      	mov	r4, r3
 8007934:	e7f3      	b.n	800791e <__assert_func+0x12>
 8007936:	bf00      	nop
 8007938:	20000014 	.word	0x20000014
 800793c:	0800920d 	.word	0x0800920d
 8007940:	0800921a 	.word	0x0800921a
 8007944:	08009248 	.word	0x08009248

08007948 <fiprintf>:
 8007948:	b40e      	push	{r1, r2, r3}
 800794a:	b503      	push	{r0, r1, lr}
 800794c:	4601      	mov	r1, r0
 800794e:	ab03      	add	r3, sp, #12
 8007950:	4805      	ldr	r0, [pc, #20]	; (8007968 <fiprintf+0x20>)
 8007952:	f853 2b04 	ldr.w	r2, [r3], #4
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f000 f897 	bl	8007a8c <_vfiprintf_r>
 800795e:	b002      	add	sp, #8
 8007960:	f85d eb04 	ldr.w	lr, [sp], #4
 8007964:	b003      	add	sp, #12
 8007966:	4770      	bx	lr
 8007968:	20000014 	.word	0x20000014

0800796c <__ascii_mbtowc>:
 800796c:	b082      	sub	sp, #8
 800796e:	b901      	cbnz	r1, 8007972 <__ascii_mbtowc+0x6>
 8007970:	a901      	add	r1, sp, #4
 8007972:	b142      	cbz	r2, 8007986 <__ascii_mbtowc+0x1a>
 8007974:	b14b      	cbz	r3, 800798a <__ascii_mbtowc+0x1e>
 8007976:	7813      	ldrb	r3, [r2, #0]
 8007978:	600b      	str	r3, [r1, #0]
 800797a:	7812      	ldrb	r2, [r2, #0]
 800797c:	1e10      	subs	r0, r2, #0
 800797e:	bf18      	it	ne
 8007980:	2001      	movne	r0, #1
 8007982:	b002      	add	sp, #8
 8007984:	4770      	bx	lr
 8007986:	4610      	mov	r0, r2
 8007988:	e7fb      	b.n	8007982 <__ascii_mbtowc+0x16>
 800798a:	f06f 0001 	mvn.w	r0, #1
 800798e:	e7f8      	b.n	8007982 <__ascii_mbtowc+0x16>

08007990 <memmove>:
 8007990:	4288      	cmp	r0, r1
 8007992:	b510      	push	{r4, lr}
 8007994:	eb01 0402 	add.w	r4, r1, r2
 8007998:	d902      	bls.n	80079a0 <memmove+0x10>
 800799a:	4284      	cmp	r4, r0
 800799c:	4623      	mov	r3, r4
 800799e:	d807      	bhi.n	80079b0 <memmove+0x20>
 80079a0:	1e43      	subs	r3, r0, #1
 80079a2:	42a1      	cmp	r1, r4
 80079a4:	d008      	beq.n	80079b8 <memmove+0x28>
 80079a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ae:	e7f8      	b.n	80079a2 <memmove+0x12>
 80079b0:	4402      	add	r2, r0
 80079b2:	4601      	mov	r1, r0
 80079b4:	428a      	cmp	r2, r1
 80079b6:	d100      	bne.n	80079ba <memmove+0x2a>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079c2:	e7f7      	b.n	80079b4 <memmove+0x24>

080079c4 <__malloc_lock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__malloc_lock+0x8>)
 80079c6:	f000 bc1f 	b.w	8008208 <__retarget_lock_acquire_recursive>
 80079ca:	bf00      	nop
 80079cc:	20000b68 	.word	0x20000b68

080079d0 <__malloc_unlock>:
 80079d0:	4801      	ldr	r0, [pc, #4]	; (80079d8 <__malloc_unlock+0x8>)
 80079d2:	f000 bc1a 	b.w	800820a <__retarget_lock_release_recursive>
 80079d6:	bf00      	nop
 80079d8:	20000b68 	.word	0x20000b68

080079dc <_realloc_r>:
 80079dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e0:	4680      	mov	r8, r0
 80079e2:	4614      	mov	r4, r2
 80079e4:	460e      	mov	r6, r1
 80079e6:	b921      	cbnz	r1, 80079f2 <_realloc_r+0x16>
 80079e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	4611      	mov	r1, r2
 80079ee:	f7ff bdad 	b.w	800754c <_malloc_r>
 80079f2:	b92a      	cbnz	r2, 8007a00 <_realloc_r+0x24>
 80079f4:	f7ff fd3e 	bl	8007474 <_free_r>
 80079f8:	4625      	mov	r5, r4
 80079fa:	4628      	mov	r0, r5
 80079fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a00:	f000 fc6a 	bl	80082d8 <_malloc_usable_size_r>
 8007a04:	4284      	cmp	r4, r0
 8007a06:	4607      	mov	r7, r0
 8007a08:	d802      	bhi.n	8007a10 <_realloc_r+0x34>
 8007a0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a0e:	d812      	bhi.n	8007a36 <_realloc_r+0x5a>
 8007a10:	4621      	mov	r1, r4
 8007a12:	4640      	mov	r0, r8
 8007a14:	f7ff fd9a 	bl	800754c <_malloc_r>
 8007a18:	4605      	mov	r5, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d0ed      	beq.n	80079fa <_realloc_r+0x1e>
 8007a1e:	42bc      	cmp	r4, r7
 8007a20:	4622      	mov	r2, r4
 8007a22:	4631      	mov	r1, r6
 8007a24:	bf28      	it	cs
 8007a26:	463a      	movcs	r2, r7
 8007a28:	f7ff f97c 	bl	8006d24 <memcpy>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4640      	mov	r0, r8
 8007a30:	f7ff fd20 	bl	8007474 <_free_r>
 8007a34:	e7e1      	b.n	80079fa <_realloc_r+0x1e>
 8007a36:	4635      	mov	r5, r6
 8007a38:	e7df      	b.n	80079fa <_realloc_r+0x1e>

08007a3a <__sfputc_r>:
 8007a3a:	6893      	ldr	r3, [r2, #8]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	b410      	push	{r4}
 8007a42:	6093      	str	r3, [r2, #8]
 8007a44:	da08      	bge.n	8007a58 <__sfputc_r+0x1e>
 8007a46:	6994      	ldr	r4, [r2, #24]
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	db01      	blt.n	8007a50 <__sfputc_r+0x16>
 8007a4c:	290a      	cmp	r1, #10
 8007a4e:	d103      	bne.n	8007a58 <__sfputc_r+0x1e>
 8007a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a54:	f000 b94a 	b.w	8007cec <__swbuf_r>
 8007a58:	6813      	ldr	r3, [r2, #0]
 8007a5a:	1c58      	adds	r0, r3, #1
 8007a5c:	6010      	str	r0, [r2, #0]
 8007a5e:	7019      	strb	r1, [r3, #0]
 8007a60:	4608      	mov	r0, r1
 8007a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <__sfputs_r>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	4614      	mov	r4, r2
 8007a70:	18d5      	adds	r5, r2, r3
 8007a72:	42ac      	cmp	r4, r5
 8007a74:	d101      	bne.n	8007a7a <__sfputs_r+0x12>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e007      	b.n	8007a8a <__sfputs_r+0x22>
 8007a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7e:	463a      	mov	r2, r7
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7ff ffda 	bl	8007a3a <__sfputc_r>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d1f3      	bne.n	8007a72 <__sfputs_r+0xa>
 8007a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a8c <_vfiprintf_r>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	460d      	mov	r5, r1
 8007a92:	b09d      	sub	sp, #116	; 0x74
 8007a94:	4614      	mov	r4, r2
 8007a96:	4698      	mov	r8, r3
 8007a98:	4606      	mov	r6, r0
 8007a9a:	b118      	cbz	r0, 8007aa4 <_vfiprintf_r+0x18>
 8007a9c:	6983      	ldr	r3, [r0, #24]
 8007a9e:	b90b      	cbnz	r3, 8007aa4 <_vfiprintf_r+0x18>
 8007aa0:	f000 fb14 	bl	80080cc <__sinit>
 8007aa4:	4b89      	ldr	r3, [pc, #548]	; (8007ccc <_vfiprintf_r+0x240>)
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	d11b      	bne.n	8007ae2 <_vfiprintf_r+0x56>
 8007aaa:	6875      	ldr	r5, [r6, #4]
 8007aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aae:	07d9      	lsls	r1, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_vfiprintf_r+0x32>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	059a      	lsls	r2, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_vfiprintf_r+0x32>
 8007ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aba:	f000 fba5 	bl	8008208 <__retarget_lock_acquire_recursive>
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	071b      	lsls	r3, r3, #28
 8007ac2:	d501      	bpl.n	8007ac8 <_vfiprintf_r+0x3c>
 8007ac4:	692b      	ldr	r3, [r5, #16]
 8007ac6:	b9eb      	cbnz	r3, 8007b04 <_vfiprintf_r+0x78>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 f96e 	bl	8007dac <__swsetup_r>
 8007ad0:	b1c0      	cbz	r0, 8007b04 <_vfiprintf_r+0x78>
 8007ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ad4:	07dc      	lsls	r4, r3, #31
 8007ad6:	d50e      	bpl.n	8007af6 <_vfiprintf_r+0x6a>
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	b01d      	add	sp, #116	; 0x74
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	4b7b      	ldr	r3, [pc, #492]	; (8007cd0 <_vfiprintf_r+0x244>)
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	d101      	bne.n	8007aec <_vfiprintf_r+0x60>
 8007ae8:	68b5      	ldr	r5, [r6, #8]
 8007aea:	e7df      	b.n	8007aac <_vfiprintf_r+0x20>
 8007aec:	4b79      	ldr	r3, [pc, #484]	; (8007cd4 <_vfiprintf_r+0x248>)
 8007aee:	429d      	cmp	r5, r3
 8007af0:	bf08      	it	eq
 8007af2:	68f5      	ldreq	r5, [r6, #12]
 8007af4:	e7da      	b.n	8007aac <_vfiprintf_r+0x20>
 8007af6:	89ab      	ldrh	r3, [r5, #12]
 8007af8:	0598      	lsls	r0, r3, #22
 8007afa:	d4ed      	bmi.n	8007ad8 <_vfiprintf_r+0x4c>
 8007afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afe:	f000 fb84 	bl	800820a <__retarget_lock_release_recursive>
 8007b02:	e7e9      	b.n	8007ad8 <_vfiprintf_r+0x4c>
 8007b04:	2300      	movs	r3, #0
 8007b06:	9309      	str	r3, [sp, #36]	; 0x24
 8007b08:	2320      	movs	r3, #32
 8007b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b12:	2330      	movs	r3, #48	; 0x30
 8007b14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cd8 <_vfiprintf_r+0x24c>
 8007b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1c:	f04f 0901 	mov.w	r9, #1
 8007b20:	4623      	mov	r3, r4
 8007b22:	469a      	mov	sl, r3
 8007b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b28:	b10a      	cbz	r2, 8007b2e <_vfiprintf_r+0xa2>
 8007b2a:	2a25      	cmp	r2, #37	; 0x25
 8007b2c:	d1f9      	bne.n	8007b22 <_vfiprintf_r+0x96>
 8007b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b32:	d00b      	beq.n	8007b4c <_vfiprintf_r+0xc0>
 8007b34:	465b      	mov	r3, fp
 8007b36:	4622      	mov	r2, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff ff94 	bl	8007a68 <__sfputs_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	f000 80aa 	beq.w	8007c9a <_vfiprintf_r+0x20e>
 8007b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b48:	445a      	add	r2, fp
 8007b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80a2 	beq.w	8007c9a <_vfiprintf_r+0x20e>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b60:	f10a 0a01 	add.w	sl, sl, #1
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6e:	4654      	mov	r4, sl
 8007b70:	2205      	movs	r2, #5
 8007b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b76:	4858      	ldr	r0, [pc, #352]	; (8007cd8 <_vfiprintf_r+0x24c>)
 8007b78:	f7f8 fb52 	bl	8000220 <memchr>
 8007b7c:	9a04      	ldr	r2, [sp, #16]
 8007b7e:	b9d8      	cbnz	r0, 8007bb8 <_vfiprintf_r+0x12c>
 8007b80:	06d1      	lsls	r1, r2, #27
 8007b82:	bf44      	itt	mi
 8007b84:	2320      	movmi	r3, #32
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8a:	0713      	lsls	r3, r2, #28
 8007b8c:	bf44      	itt	mi
 8007b8e:	232b      	movmi	r3, #43	; 0x2b
 8007b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b94:	f89a 3000 	ldrb.w	r3, [sl]
 8007b98:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9a:	d015      	beq.n	8007bc8 <_vfiprintf_r+0x13c>
 8007b9c:	9a07      	ldr	r2, [sp, #28]
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bac:	3b30      	subs	r3, #48	; 0x30
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	d94e      	bls.n	8007c50 <_vfiprintf_r+0x1c4>
 8007bb2:	b1b0      	cbz	r0, 8007be2 <_vfiprintf_r+0x156>
 8007bb4:	9207      	str	r2, [sp, #28]
 8007bb6:	e014      	b.n	8007be2 <_vfiprintf_r+0x156>
 8007bb8:	eba0 0308 	sub.w	r3, r0, r8
 8007bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	46a2      	mov	sl, r4
 8007bc6:	e7d2      	b.n	8007b6e <_vfiprintf_r+0xe2>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	1d19      	adds	r1, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9103      	str	r1, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfbb      	ittet	lt
 8007bd4:	425b      	neglt	r3, r3
 8007bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bda:	9307      	strge	r3, [sp, #28]
 8007bdc:	9307      	strlt	r3, [sp, #28]
 8007bde:	bfb8      	it	lt
 8007be0:	9204      	strlt	r2, [sp, #16]
 8007be2:	7823      	ldrb	r3, [r4, #0]
 8007be4:	2b2e      	cmp	r3, #46	; 0x2e
 8007be6:	d10c      	bne.n	8007c02 <_vfiprintf_r+0x176>
 8007be8:	7863      	ldrb	r3, [r4, #1]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d135      	bne.n	8007c5a <_vfiprintf_r+0x1ce>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	1d1a      	adds	r2, r3, #4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	9203      	str	r2, [sp, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfb8      	it	lt
 8007bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bfe:	3402      	adds	r4, #2
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ce8 <_vfiprintf_r+0x25c>
 8007c06:	7821      	ldrb	r1, [r4, #0]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f7f8 fb08 	bl	8000220 <memchr>
 8007c10:	b140      	cbz	r0, 8007c24 <_vfiprintf_r+0x198>
 8007c12:	2340      	movs	r3, #64	; 0x40
 8007c14:	eba0 000a 	sub.w	r0, r0, sl
 8007c18:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	4303      	orrs	r3, r0
 8007c20:	3401      	adds	r4, #1
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c28:	482c      	ldr	r0, [pc, #176]	; (8007cdc <_vfiprintf_r+0x250>)
 8007c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c2e:	2206      	movs	r2, #6
 8007c30:	f7f8 faf6 	bl	8000220 <memchr>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d03f      	beq.n	8007cb8 <_vfiprintf_r+0x22c>
 8007c38:	4b29      	ldr	r3, [pc, #164]	; (8007ce0 <_vfiprintf_r+0x254>)
 8007c3a:	bb1b      	cbnz	r3, 8007c84 <_vfiprintf_r+0x1f8>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	3307      	adds	r3, #7
 8007c40:	f023 0307 	bic.w	r3, r3, #7
 8007c44:	3308      	adds	r3, #8
 8007c46:	9303      	str	r3, [sp, #12]
 8007c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4a:	443b      	add	r3, r7
 8007c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4e:	e767      	b.n	8007b20 <_vfiprintf_r+0x94>
 8007c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c54:	460c      	mov	r4, r1
 8007c56:	2001      	movs	r0, #1
 8007c58:	e7a5      	b.n	8007ba6 <_vfiprintf_r+0x11a>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	4619      	mov	r1, r3
 8007c62:	f04f 0c0a 	mov.w	ip, #10
 8007c66:	4620      	mov	r0, r4
 8007c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6c:	3a30      	subs	r2, #48	; 0x30
 8007c6e:	2a09      	cmp	r2, #9
 8007c70:	d903      	bls.n	8007c7a <_vfiprintf_r+0x1ee>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0c5      	beq.n	8007c02 <_vfiprintf_r+0x176>
 8007c76:	9105      	str	r1, [sp, #20]
 8007c78:	e7c3      	b.n	8007c02 <_vfiprintf_r+0x176>
 8007c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c7e:	4604      	mov	r4, r0
 8007c80:	2301      	movs	r3, #1
 8007c82:	e7f0      	b.n	8007c66 <_vfiprintf_r+0x1da>
 8007c84:	ab03      	add	r3, sp, #12
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	462a      	mov	r2, r5
 8007c8a:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <_vfiprintf_r+0x258>)
 8007c8c:	a904      	add	r1, sp, #16
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7fd fdb2 	bl	80057f8 <_printf_float>
 8007c94:	4607      	mov	r7, r0
 8007c96:	1c78      	adds	r0, r7, #1
 8007c98:	d1d6      	bne.n	8007c48 <_vfiprintf_r+0x1bc>
 8007c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9c:	07d9      	lsls	r1, r3, #31
 8007c9e:	d405      	bmi.n	8007cac <_vfiprintf_r+0x220>
 8007ca0:	89ab      	ldrh	r3, [r5, #12]
 8007ca2:	059a      	lsls	r2, r3, #22
 8007ca4:	d402      	bmi.n	8007cac <_vfiprintf_r+0x220>
 8007ca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca8:	f000 faaf 	bl	800820a <__retarget_lock_release_recursive>
 8007cac:	89ab      	ldrh	r3, [r5, #12]
 8007cae:	065b      	lsls	r3, r3, #25
 8007cb0:	f53f af12 	bmi.w	8007ad8 <_vfiprintf_r+0x4c>
 8007cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb6:	e711      	b.n	8007adc <_vfiprintf_r+0x50>
 8007cb8:	ab03      	add	r3, sp, #12
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <_vfiprintf_r+0x258>)
 8007cc0:	a904      	add	r1, sp, #16
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7fe f83c 	bl	8005d40 <_printf_i>
 8007cc8:	e7e4      	b.n	8007c94 <_vfiprintf_r+0x208>
 8007cca:	bf00      	nop
 8007ccc:	08009374 	.word	0x08009374
 8007cd0:	08009394 	.word	0x08009394
 8007cd4:	08009354 	.word	0x08009354
 8007cd8:	080091fc 	.word	0x080091fc
 8007cdc:	08009206 	.word	0x08009206
 8007ce0:	080057f9 	.word	0x080057f9
 8007ce4:	08007a69 	.word	0x08007a69
 8007ce8:	08009202 	.word	0x08009202

08007cec <__swbuf_r>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	460e      	mov	r6, r1
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	b118      	cbz	r0, 8007cfe <__swbuf_r+0x12>
 8007cf6:	6983      	ldr	r3, [r0, #24]
 8007cf8:	b90b      	cbnz	r3, 8007cfe <__swbuf_r+0x12>
 8007cfa:	f000 f9e7 	bl	80080cc <__sinit>
 8007cfe:	4b21      	ldr	r3, [pc, #132]	; (8007d84 <__swbuf_r+0x98>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d12b      	bne.n	8007d5c <__swbuf_r+0x70>
 8007d04:	686c      	ldr	r4, [r5, #4]
 8007d06:	69a3      	ldr	r3, [r4, #24]
 8007d08:	60a3      	str	r3, [r4, #8]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	071a      	lsls	r2, r3, #28
 8007d0e:	d52f      	bpl.n	8007d70 <__swbuf_r+0x84>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	b36b      	cbz	r3, 8007d70 <__swbuf_r+0x84>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	6820      	ldr	r0, [r4, #0]
 8007d18:	1ac0      	subs	r0, r0, r3
 8007d1a:	6963      	ldr	r3, [r4, #20]
 8007d1c:	b2f6      	uxtb	r6, r6
 8007d1e:	4283      	cmp	r3, r0
 8007d20:	4637      	mov	r7, r6
 8007d22:	dc04      	bgt.n	8007d2e <__swbuf_r+0x42>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f93c 	bl	8007fa4 <_fflush_r>
 8007d2c:	bb30      	cbnz	r0, 8007d7c <__swbuf_r+0x90>
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	6022      	str	r2, [r4, #0]
 8007d3a:	701e      	strb	r6, [r3, #0]
 8007d3c:	6963      	ldr	r3, [r4, #20]
 8007d3e:	3001      	adds	r0, #1
 8007d40:	4283      	cmp	r3, r0
 8007d42:	d004      	beq.n	8007d4e <__swbuf_r+0x62>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	07db      	lsls	r3, r3, #31
 8007d48:	d506      	bpl.n	8007d58 <__swbuf_r+0x6c>
 8007d4a:	2e0a      	cmp	r6, #10
 8007d4c:	d104      	bne.n	8007d58 <__swbuf_r+0x6c>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 f927 	bl	8007fa4 <_fflush_r>
 8007d56:	b988      	cbnz	r0, 8007d7c <__swbuf_r+0x90>
 8007d58:	4638      	mov	r0, r7
 8007d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <__swbuf_r+0x9c>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <__swbuf_r+0x7a>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7cf      	b.n	8007d06 <__swbuf_r+0x1a>
 8007d66:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <__swbuf_r+0xa0>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7ca      	b.n	8007d06 <__swbuf_r+0x1a>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f81a 	bl	8007dac <__swsetup_r>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d0cb      	beq.n	8007d14 <__swbuf_r+0x28>
 8007d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d80:	e7ea      	b.n	8007d58 <__swbuf_r+0x6c>
 8007d82:	bf00      	nop
 8007d84:	08009374 	.word	0x08009374
 8007d88:	08009394 	.word	0x08009394
 8007d8c:	08009354 	.word	0x08009354

08007d90 <__ascii_wctomb>:
 8007d90:	b149      	cbz	r1, 8007da6 <__ascii_wctomb+0x16>
 8007d92:	2aff      	cmp	r2, #255	; 0xff
 8007d94:	bf85      	ittet	hi
 8007d96:	238a      	movhi	r3, #138	; 0x8a
 8007d98:	6003      	strhi	r3, [r0, #0]
 8007d9a:	700a      	strbls	r2, [r1, #0]
 8007d9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007da0:	bf98      	it	ls
 8007da2:	2001      	movls	r0, #1
 8007da4:	4770      	bx	lr
 8007da6:	4608      	mov	r0, r1
 8007da8:	4770      	bx	lr
	...

08007dac <__swsetup_r>:
 8007dac:	4b32      	ldr	r3, [pc, #200]	; (8007e78 <__swsetup_r+0xcc>)
 8007dae:	b570      	push	{r4, r5, r6, lr}
 8007db0:	681d      	ldr	r5, [r3, #0]
 8007db2:	4606      	mov	r6, r0
 8007db4:	460c      	mov	r4, r1
 8007db6:	b125      	cbz	r5, 8007dc2 <__swsetup_r+0x16>
 8007db8:	69ab      	ldr	r3, [r5, #24]
 8007dba:	b913      	cbnz	r3, 8007dc2 <__swsetup_r+0x16>
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 f985 	bl	80080cc <__sinit>
 8007dc2:	4b2e      	ldr	r3, [pc, #184]	; (8007e7c <__swsetup_r+0xd0>)
 8007dc4:	429c      	cmp	r4, r3
 8007dc6:	d10f      	bne.n	8007de8 <__swsetup_r+0x3c>
 8007dc8:	686c      	ldr	r4, [r5, #4]
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd0:	0719      	lsls	r1, r3, #28
 8007dd2:	d42c      	bmi.n	8007e2e <__swsetup_r+0x82>
 8007dd4:	06dd      	lsls	r5, r3, #27
 8007dd6:	d411      	bmi.n	8007dfc <__swsetup_r+0x50>
 8007dd8:	2309      	movs	r3, #9
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	e03e      	b.n	8007e66 <__swsetup_r+0xba>
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <__swsetup_r+0xd4>)
 8007dea:	429c      	cmp	r4, r3
 8007dec:	d101      	bne.n	8007df2 <__swsetup_r+0x46>
 8007dee:	68ac      	ldr	r4, [r5, #8]
 8007df0:	e7eb      	b.n	8007dca <__swsetup_r+0x1e>
 8007df2:	4b24      	ldr	r3, [pc, #144]	; (8007e84 <__swsetup_r+0xd8>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	bf08      	it	eq
 8007df8:	68ec      	ldreq	r4, [r5, #12]
 8007dfa:	e7e6      	b.n	8007dca <__swsetup_r+0x1e>
 8007dfc:	0758      	lsls	r0, r3, #29
 8007dfe:	d512      	bpl.n	8007e26 <__swsetup_r+0x7a>
 8007e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e02:	b141      	cbz	r1, 8007e16 <__swsetup_r+0x6a>
 8007e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e08:	4299      	cmp	r1, r3
 8007e0a:	d002      	beq.n	8007e12 <__swsetup_r+0x66>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff fb31 	bl	8007474 <_free_r>
 8007e12:	2300      	movs	r3, #0
 8007e14:	6363      	str	r3, [r4, #52]	; 0x34
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f043 0308 	orr.w	r3, r3, #8
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	b94b      	cbnz	r3, 8007e46 <__swsetup_r+0x9a>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3c:	d003      	beq.n	8007e46 <__swsetup_r+0x9a>
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 fa09 	bl	8008258 <__smakebuf_r>
 8007e46:	89a0      	ldrh	r0, [r4, #12]
 8007e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e4c:	f010 0301 	ands.w	r3, r0, #1
 8007e50:	d00a      	beq.n	8007e68 <__swsetup_r+0xbc>
 8007e52:	2300      	movs	r3, #0
 8007e54:	60a3      	str	r3, [r4, #8]
 8007e56:	6963      	ldr	r3, [r4, #20]
 8007e58:	425b      	negs	r3, r3
 8007e5a:	61a3      	str	r3, [r4, #24]
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	b943      	cbnz	r3, 8007e72 <__swsetup_r+0xc6>
 8007e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e64:	d1ba      	bne.n	8007ddc <__swsetup_r+0x30>
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	0781      	lsls	r1, r0, #30
 8007e6a:	bf58      	it	pl
 8007e6c:	6963      	ldrpl	r3, [r4, #20]
 8007e6e:	60a3      	str	r3, [r4, #8]
 8007e70:	e7f4      	b.n	8007e5c <__swsetup_r+0xb0>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e7f7      	b.n	8007e66 <__swsetup_r+0xba>
 8007e76:	bf00      	nop
 8007e78:	20000014 	.word	0x20000014
 8007e7c:	08009374 	.word	0x08009374
 8007e80:	08009394 	.word	0x08009394
 8007e84:	08009354 	.word	0x08009354

08007e88 <abort>:
 8007e88:	b508      	push	{r3, lr}
 8007e8a:	2006      	movs	r0, #6
 8007e8c:	f000 fa54 	bl	8008338 <raise>
 8007e90:	2001      	movs	r0, #1
 8007e92:	f7f9 fe2f 	bl	8001af4 <_exit>
	...

08007e98 <__sflush_r>:
 8007e98:	898a      	ldrh	r2, [r1, #12]
 8007e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	0710      	lsls	r0, r2, #28
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	d458      	bmi.n	8007f58 <__sflush_r+0xc0>
 8007ea6:	684b      	ldr	r3, [r1, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dc05      	bgt.n	8007eb8 <__sflush_r+0x20>
 8007eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dc02      	bgt.n	8007eb8 <__sflush_r+0x20>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	d0f9      	beq.n	8007eb2 <__sflush_r+0x1a>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ec4:	682f      	ldr	r7, [r5, #0]
 8007ec6:	602b      	str	r3, [r5, #0]
 8007ec8:	d032      	beq.n	8007f30 <__sflush_r+0x98>
 8007eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	075a      	lsls	r2, r3, #29
 8007ed0:	d505      	bpl.n	8007ede <__sflush_r+0x46>
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	1ac0      	subs	r0, r0, r3
 8007ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ed8:	b10b      	cbz	r3, 8007ede <__sflush_r+0x46>
 8007eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007edc:	1ac0      	subs	r0, r0, r3
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ee4:	6a21      	ldr	r1, [r4, #32]
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b0      	blx	r6
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	d106      	bne.n	8007efe <__sflush_r+0x66>
 8007ef0:	6829      	ldr	r1, [r5, #0]
 8007ef2:	291d      	cmp	r1, #29
 8007ef4:	d82c      	bhi.n	8007f50 <__sflush_r+0xb8>
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	; (8007fa0 <__sflush_r+0x108>)
 8007ef8:	40ca      	lsrs	r2, r1
 8007efa:	07d6      	lsls	r6, r2, #31
 8007efc:	d528      	bpl.n	8007f50 <__sflush_r+0xb8>
 8007efe:	2200      	movs	r2, #0
 8007f00:	6062      	str	r2, [r4, #4]
 8007f02:	04d9      	lsls	r1, r3, #19
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	d504      	bpl.n	8007f14 <__sflush_r+0x7c>
 8007f0a:	1c42      	adds	r2, r0, #1
 8007f0c:	d101      	bne.n	8007f12 <__sflush_r+0x7a>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	b903      	cbnz	r3, 8007f14 <__sflush_r+0x7c>
 8007f12:	6560      	str	r0, [r4, #84]	; 0x54
 8007f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f16:	602f      	str	r7, [r5, #0]
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	d0ca      	beq.n	8007eb2 <__sflush_r+0x1a>
 8007f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d002      	beq.n	8007f2a <__sflush_r+0x92>
 8007f24:	4628      	mov	r0, r5
 8007f26:	f7ff faa5 	bl	8007474 <_free_r>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f2e:	e7c1      	b.n	8007eb4 <__sflush_r+0x1c>
 8007f30:	6a21      	ldr	r1, [r4, #32]
 8007f32:	2301      	movs	r3, #1
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b0      	blx	r6
 8007f38:	1c41      	adds	r1, r0, #1
 8007f3a:	d1c7      	bne.n	8007ecc <__sflush_r+0x34>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0c4      	beq.n	8007ecc <__sflush_r+0x34>
 8007f42:	2b1d      	cmp	r3, #29
 8007f44:	d001      	beq.n	8007f4a <__sflush_r+0xb2>
 8007f46:	2b16      	cmp	r3, #22
 8007f48:	d101      	bne.n	8007f4e <__sflush_r+0xb6>
 8007f4a:	602f      	str	r7, [r5, #0]
 8007f4c:	e7b1      	b.n	8007eb2 <__sflush_r+0x1a>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f54:	81a3      	strh	r3, [r4, #12]
 8007f56:	e7ad      	b.n	8007eb4 <__sflush_r+0x1c>
 8007f58:	690f      	ldr	r7, [r1, #16]
 8007f5a:	2f00      	cmp	r7, #0
 8007f5c:	d0a9      	beq.n	8007eb2 <__sflush_r+0x1a>
 8007f5e:	0793      	lsls	r3, r2, #30
 8007f60:	680e      	ldr	r6, [r1, #0]
 8007f62:	bf08      	it	eq
 8007f64:	694b      	ldreq	r3, [r1, #20]
 8007f66:	600f      	str	r7, [r1, #0]
 8007f68:	bf18      	it	ne
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	eba6 0807 	sub.w	r8, r6, r7
 8007f70:	608b      	str	r3, [r1, #8]
 8007f72:	f1b8 0f00 	cmp.w	r8, #0
 8007f76:	dd9c      	ble.n	8007eb2 <__sflush_r+0x1a>
 8007f78:	6a21      	ldr	r1, [r4, #32]
 8007f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f7c:	4643      	mov	r3, r8
 8007f7e:	463a      	mov	r2, r7
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b0      	blx	r6
 8007f84:	2800      	cmp	r0, #0
 8007f86:	dc06      	bgt.n	8007f96 <__sflush_r+0xfe>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	e78e      	b.n	8007eb4 <__sflush_r+0x1c>
 8007f96:	4407      	add	r7, r0
 8007f98:	eba8 0800 	sub.w	r8, r8, r0
 8007f9c:	e7e9      	b.n	8007f72 <__sflush_r+0xda>
 8007f9e:	bf00      	nop
 8007fa0:	20400001 	.word	0x20400001

08007fa4 <_fflush_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	690b      	ldr	r3, [r1, #16]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	b913      	cbnz	r3, 8007fb4 <_fflush_r+0x10>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	b118      	cbz	r0, 8007fbe <_fflush_r+0x1a>
 8007fb6:	6983      	ldr	r3, [r0, #24]
 8007fb8:	b90b      	cbnz	r3, 8007fbe <_fflush_r+0x1a>
 8007fba:	f000 f887 	bl	80080cc <__sinit>
 8007fbe:	4b14      	ldr	r3, [pc, #80]	; (8008010 <_fflush_r+0x6c>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d11b      	bne.n	8007ffc <_fflush_r+0x58>
 8007fc4:	686c      	ldr	r4, [r5, #4]
 8007fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0ef      	beq.n	8007fae <_fflush_r+0xa>
 8007fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fd0:	07d0      	lsls	r0, r2, #31
 8007fd2:	d404      	bmi.n	8007fde <_fflush_r+0x3a>
 8007fd4:	0599      	lsls	r1, r3, #22
 8007fd6:	d402      	bmi.n	8007fde <_fflush_r+0x3a>
 8007fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fda:	f000 f915 	bl	8008208 <__retarget_lock_acquire_recursive>
 8007fde:	4628      	mov	r0, r5
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	f7ff ff59 	bl	8007e98 <__sflush_r>
 8007fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe8:	07da      	lsls	r2, r3, #31
 8007fea:	4605      	mov	r5, r0
 8007fec:	d4e0      	bmi.n	8007fb0 <_fflush_r+0xc>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	059b      	lsls	r3, r3, #22
 8007ff2:	d4dd      	bmi.n	8007fb0 <_fflush_r+0xc>
 8007ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff6:	f000 f908 	bl	800820a <__retarget_lock_release_recursive>
 8007ffa:	e7d9      	b.n	8007fb0 <_fflush_r+0xc>
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <_fflush_r+0x70>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	d101      	bne.n	8008006 <_fflush_r+0x62>
 8008002:	68ac      	ldr	r4, [r5, #8]
 8008004:	e7df      	b.n	8007fc6 <_fflush_r+0x22>
 8008006:	4b04      	ldr	r3, [pc, #16]	; (8008018 <_fflush_r+0x74>)
 8008008:	429c      	cmp	r4, r3
 800800a:	bf08      	it	eq
 800800c:	68ec      	ldreq	r4, [r5, #12]
 800800e:	e7da      	b.n	8007fc6 <_fflush_r+0x22>
 8008010:	08009374 	.word	0x08009374
 8008014:	08009394 	.word	0x08009394
 8008018:	08009354 	.word	0x08009354

0800801c <std>:
 800801c:	2300      	movs	r3, #0
 800801e:	b510      	push	{r4, lr}
 8008020:	4604      	mov	r4, r0
 8008022:	e9c0 3300 	strd	r3, r3, [r0]
 8008026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800802a:	6083      	str	r3, [r0, #8]
 800802c:	8181      	strh	r1, [r0, #12]
 800802e:	6643      	str	r3, [r0, #100]	; 0x64
 8008030:	81c2      	strh	r2, [r0, #14]
 8008032:	6183      	str	r3, [r0, #24]
 8008034:	4619      	mov	r1, r3
 8008036:	2208      	movs	r2, #8
 8008038:	305c      	adds	r0, #92	; 0x5c
 800803a:	f7fd fb35 	bl	80056a8 <memset>
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <std+0x38>)
 8008040:	6263      	str	r3, [r4, #36]	; 0x24
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <std+0x3c>)
 8008044:	62a3      	str	r3, [r4, #40]	; 0x28
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <std+0x40>)
 8008048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <std+0x44>)
 800804c:	6224      	str	r4, [r4, #32]
 800804e:	6323      	str	r3, [r4, #48]	; 0x30
 8008050:	bd10      	pop	{r4, pc}
 8008052:	bf00      	nop
 8008054:	08008371 	.word	0x08008371
 8008058:	08008393 	.word	0x08008393
 800805c:	080083cb 	.word	0x080083cb
 8008060:	080083ef 	.word	0x080083ef

08008064 <_cleanup_r>:
 8008064:	4901      	ldr	r1, [pc, #4]	; (800806c <_cleanup_r+0x8>)
 8008066:	f000 b8af 	b.w	80081c8 <_fwalk_reent>
 800806a:	bf00      	nop
 800806c:	08007fa5 	.word	0x08007fa5

08008070 <__sfmoreglue>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	2268      	movs	r2, #104	; 0x68
 8008074:	1e4d      	subs	r5, r1, #1
 8008076:	4355      	muls	r5, r2
 8008078:	460e      	mov	r6, r1
 800807a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800807e:	f7ff fa65 	bl	800754c <_malloc_r>
 8008082:	4604      	mov	r4, r0
 8008084:	b140      	cbz	r0, 8008098 <__sfmoreglue+0x28>
 8008086:	2100      	movs	r1, #0
 8008088:	e9c0 1600 	strd	r1, r6, [r0]
 800808c:	300c      	adds	r0, #12
 800808e:	60a0      	str	r0, [r4, #8]
 8008090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008094:	f7fd fb08 	bl	80056a8 <memset>
 8008098:	4620      	mov	r0, r4
 800809a:	bd70      	pop	{r4, r5, r6, pc}

0800809c <__sfp_lock_acquire>:
 800809c:	4801      	ldr	r0, [pc, #4]	; (80080a4 <__sfp_lock_acquire+0x8>)
 800809e:	f000 b8b3 	b.w	8008208 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	20000b69 	.word	0x20000b69

080080a8 <__sfp_lock_release>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__sfp_lock_release+0x8>)
 80080aa:	f000 b8ae 	b.w	800820a <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	20000b69 	.word	0x20000b69

080080b4 <__sinit_lock_acquire>:
 80080b4:	4801      	ldr	r0, [pc, #4]	; (80080bc <__sinit_lock_acquire+0x8>)
 80080b6:	f000 b8a7 	b.w	8008208 <__retarget_lock_acquire_recursive>
 80080ba:	bf00      	nop
 80080bc:	20000b6a 	.word	0x20000b6a

080080c0 <__sinit_lock_release>:
 80080c0:	4801      	ldr	r0, [pc, #4]	; (80080c8 <__sinit_lock_release+0x8>)
 80080c2:	f000 b8a2 	b.w	800820a <__retarget_lock_release_recursive>
 80080c6:	bf00      	nop
 80080c8:	20000b6a 	.word	0x20000b6a

080080cc <__sinit>:
 80080cc:	b510      	push	{r4, lr}
 80080ce:	4604      	mov	r4, r0
 80080d0:	f7ff fff0 	bl	80080b4 <__sinit_lock_acquire>
 80080d4:	69a3      	ldr	r3, [r4, #24]
 80080d6:	b11b      	cbz	r3, 80080e0 <__sinit+0x14>
 80080d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080dc:	f7ff bff0 	b.w	80080c0 <__sinit_lock_release>
 80080e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080e4:	6523      	str	r3, [r4, #80]	; 0x50
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <__sinit+0x68>)
 80080e8:	4a13      	ldr	r2, [pc, #76]	; (8008138 <__sinit+0x6c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	bf04      	itt	eq
 80080f2:	2301      	moveq	r3, #1
 80080f4:	61a3      	streq	r3, [r4, #24]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 f820 	bl	800813c <__sfp>
 80080fc:	6060      	str	r0, [r4, #4]
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f81c 	bl	800813c <__sfp>
 8008104:	60a0      	str	r0, [r4, #8]
 8008106:	4620      	mov	r0, r4
 8008108:	f000 f818 	bl	800813c <__sfp>
 800810c:	2200      	movs	r2, #0
 800810e:	60e0      	str	r0, [r4, #12]
 8008110:	2104      	movs	r1, #4
 8008112:	6860      	ldr	r0, [r4, #4]
 8008114:	f7ff ff82 	bl	800801c <std>
 8008118:	68a0      	ldr	r0, [r4, #8]
 800811a:	2201      	movs	r2, #1
 800811c:	2109      	movs	r1, #9
 800811e:	f7ff ff7d 	bl	800801c <std>
 8008122:	68e0      	ldr	r0, [r4, #12]
 8008124:	2202      	movs	r2, #2
 8008126:	2112      	movs	r1, #18
 8008128:	f7ff ff78 	bl	800801c <std>
 800812c:	2301      	movs	r3, #1
 800812e:	61a3      	str	r3, [r4, #24]
 8008130:	e7d2      	b.n	80080d8 <__sinit+0xc>
 8008132:	bf00      	nop
 8008134:	08008fdc 	.word	0x08008fdc
 8008138:	08008065 	.word	0x08008065

0800813c <__sfp>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	4607      	mov	r7, r0
 8008140:	f7ff ffac 	bl	800809c <__sfp_lock_acquire>
 8008144:	4b1e      	ldr	r3, [pc, #120]	; (80081c0 <__sfp+0x84>)
 8008146:	681e      	ldr	r6, [r3, #0]
 8008148:	69b3      	ldr	r3, [r6, #24]
 800814a:	b913      	cbnz	r3, 8008152 <__sfp+0x16>
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ffbd 	bl	80080cc <__sinit>
 8008152:	3648      	adds	r6, #72	; 0x48
 8008154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008158:	3b01      	subs	r3, #1
 800815a:	d503      	bpl.n	8008164 <__sfp+0x28>
 800815c:	6833      	ldr	r3, [r6, #0]
 800815e:	b30b      	cbz	r3, 80081a4 <__sfp+0x68>
 8008160:	6836      	ldr	r6, [r6, #0]
 8008162:	e7f7      	b.n	8008154 <__sfp+0x18>
 8008164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008168:	b9d5      	cbnz	r5, 80081a0 <__sfp+0x64>
 800816a:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <__sfp+0x88>)
 800816c:	60e3      	str	r3, [r4, #12]
 800816e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008172:	6665      	str	r5, [r4, #100]	; 0x64
 8008174:	f000 f847 	bl	8008206 <__retarget_lock_init_recursive>
 8008178:	f7ff ff96 	bl	80080a8 <__sfp_lock_release>
 800817c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008184:	6025      	str	r5, [r4, #0]
 8008186:	61a5      	str	r5, [r4, #24]
 8008188:	2208      	movs	r2, #8
 800818a:	4629      	mov	r1, r5
 800818c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008190:	f7fd fa8a 	bl	80056a8 <memset>
 8008194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800819c:	4620      	mov	r0, r4
 800819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a0:	3468      	adds	r4, #104	; 0x68
 80081a2:	e7d9      	b.n	8008158 <__sfp+0x1c>
 80081a4:	2104      	movs	r1, #4
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7ff ff62 	bl	8008070 <__sfmoreglue>
 80081ac:	4604      	mov	r4, r0
 80081ae:	6030      	str	r0, [r6, #0]
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1d5      	bne.n	8008160 <__sfp+0x24>
 80081b4:	f7ff ff78 	bl	80080a8 <__sfp_lock_release>
 80081b8:	230c      	movs	r3, #12
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	e7ee      	b.n	800819c <__sfp+0x60>
 80081be:	bf00      	nop
 80081c0:	08008fdc 	.word	0x08008fdc
 80081c4:	ffff0001 	.word	0xffff0001

080081c8 <_fwalk_reent>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	4606      	mov	r6, r0
 80081ce:	4688      	mov	r8, r1
 80081d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081d4:	2700      	movs	r7, #0
 80081d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081da:	f1b9 0901 	subs.w	r9, r9, #1
 80081de:	d505      	bpl.n	80081ec <_fwalk_reent+0x24>
 80081e0:	6824      	ldr	r4, [r4, #0]
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	d1f7      	bne.n	80081d6 <_fwalk_reent+0xe>
 80081e6:	4638      	mov	r0, r7
 80081e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d907      	bls.n	8008202 <_fwalk_reent+0x3a>
 80081f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081f6:	3301      	adds	r3, #1
 80081f8:	d003      	beq.n	8008202 <_fwalk_reent+0x3a>
 80081fa:	4629      	mov	r1, r5
 80081fc:	4630      	mov	r0, r6
 80081fe:	47c0      	blx	r8
 8008200:	4307      	orrs	r7, r0
 8008202:	3568      	adds	r5, #104	; 0x68
 8008204:	e7e9      	b.n	80081da <_fwalk_reent+0x12>

08008206 <__retarget_lock_init_recursive>:
 8008206:	4770      	bx	lr

08008208 <__retarget_lock_acquire_recursive>:
 8008208:	4770      	bx	lr

0800820a <__retarget_lock_release_recursive>:
 800820a:	4770      	bx	lr

0800820c <__swhatbuf_r>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	460e      	mov	r6, r1
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	2900      	cmp	r1, #0
 8008216:	b096      	sub	sp, #88	; 0x58
 8008218:	4614      	mov	r4, r2
 800821a:	461d      	mov	r5, r3
 800821c:	da08      	bge.n	8008230 <__swhatbuf_r+0x24>
 800821e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	061a      	lsls	r2, r3, #24
 8008228:	d410      	bmi.n	800824c <__swhatbuf_r+0x40>
 800822a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800822e:	e00e      	b.n	800824e <__swhatbuf_r+0x42>
 8008230:	466a      	mov	r2, sp
 8008232:	f000 f903 	bl	800843c <_fstat_r>
 8008236:	2800      	cmp	r0, #0
 8008238:	dbf1      	blt.n	800821e <__swhatbuf_r+0x12>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008240:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008244:	425a      	negs	r2, r3
 8008246:	415a      	adcs	r2, r3
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	e7ee      	b.n	800822a <__swhatbuf_r+0x1e>
 800824c:	2340      	movs	r3, #64	; 0x40
 800824e:	2000      	movs	r0, #0
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	b016      	add	sp, #88	; 0x58
 8008254:	bd70      	pop	{r4, r5, r6, pc}
	...

08008258 <__smakebuf_r>:
 8008258:	898b      	ldrh	r3, [r1, #12]
 800825a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800825c:	079d      	lsls	r5, r3, #30
 800825e:	4606      	mov	r6, r0
 8008260:	460c      	mov	r4, r1
 8008262:	d507      	bpl.n	8008274 <__smakebuf_r+0x1c>
 8008264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	6123      	str	r3, [r4, #16]
 800826c:	2301      	movs	r3, #1
 800826e:	6163      	str	r3, [r4, #20]
 8008270:	b002      	add	sp, #8
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	ab01      	add	r3, sp, #4
 8008276:	466a      	mov	r2, sp
 8008278:	f7ff ffc8 	bl	800820c <__swhatbuf_r>
 800827c:	9900      	ldr	r1, [sp, #0]
 800827e:	4605      	mov	r5, r0
 8008280:	4630      	mov	r0, r6
 8008282:	f7ff f963 	bl	800754c <_malloc_r>
 8008286:	b948      	cbnz	r0, 800829c <__smakebuf_r+0x44>
 8008288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828c:	059a      	lsls	r2, r3, #22
 800828e:	d4ef      	bmi.n	8008270 <__smakebuf_r+0x18>
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	f043 0302 	orr.w	r3, r3, #2
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	e7e3      	b.n	8008264 <__smakebuf_r+0xc>
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <__smakebuf_r+0x7c>)
 800829e:	62b3      	str	r3, [r6, #40]	; 0x28
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	6020      	str	r0, [r4, #0]
 80082a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	6163      	str	r3, [r4, #20]
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	6120      	str	r0, [r4, #16]
 80082b2:	b15b      	cbz	r3, 80082cc <__smakebuf_r+0x74>
 80082b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b8:	4630      	mov	r0, r6
 80082ba:	f000 f8d1 	bl	8008460 <_isatty_r>
 80082be:	b128      	cbz	r0, 80082cc <__smakebuf_r+0x74>
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	89a0      	ldrh	r0, [r4, #12]
 80082ce:	4305      	orrs	r5, r0
 80082d0:	81a5      	strh	r5, [r4, #12]
 80082d2:	e7cd      	b.n	8008270 <__smakebuf_r+0x18>
 80082d4:	08008065 	.word	0x08008065

080082d8 <_malloc_usable_size_r>:
 80082d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082dc:	1f18      	subs	r0, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfbc      	itt	lt
 80082e2:	580b      	ldrlt	r3, [r1, r0]
 80082e4:	18c0      	addlt	r0, r0, r3
 80082e6:	4770      	bx	lr

080082e8 <_raise_r>:
 80082e8:	291f      	cmp	r1, #31
 80082ea:	b538      	push	{r3, r4, r5, lr}
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	d904      	bls.n	80082fc <_raise_r+0x14>
 80082f2:	2316      	movs	r3, #22
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	f04f 30ff 	mov.w	r0, #4294967295
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082fe:	b112      	cbz	r2, 8008306 <_raise_r+0x1e>
 8008300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008304:	b94b      	cbnz	r3, 800831a <_raise_r+0x32>
 8008306:	4620      	mov	r0, r4
 8008308:	f000 f830 	bl	800836c <_getpid_r>
 800830c:	462a      	mov	r2, r5
 800830e:	4601      	mov	r1, r0
 8008310:	4620      	mov	r0, r4
 8008312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008316:	f000 b817 	b.w	8008348 <_kill_r>
 800831a:	2b01      	cmp	r3, #1
 800831c:	d00a      	beq.n	8008334 <_raise_r+0x4c>
 800831e:	1c59      	adds	r1, r3, #1
 8008320:	d103      	bne.n	800832a <_raise_r+0x42>
 8008322:	2316      	movs	r3, #22
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	2001      	movs	r0, #1
 8008328:	e7e7      	b.n	80082fa <_raise_r+0x12>
 800832a:	2400      	movs	r4, #0
 800832c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008330:	4628      	mov	r0, r5
 8008332:	4798      	blx	r3
 8008334:	2000      	movs	r0, #0
 8008336:	e7e0      	b.n	80082fa <_raise_r+0x12>

08008338 <raise>:
 8008338:	4b02      	ldr	r3, [pc, #8]	; (8008344 <raise+0xc>)
 800833a:	4601      	mov	r1, r0
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	f7ff bfd3 	b.w	80082e8 <_raise_r>
 8008342:	bf00      	nop
 8008344:	20000014 	.word	0x20000014

08008348 <_kill_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	; (8008368 <_kill_r+0x20>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	4611      	mov	r1, r2
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	f7f9 fbbd 	bl	8001ad4 <_kill>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	d102      	bne.n	8008364 <_kill_r+0x1c>
 800835e:	682b      	ldr	r3, [r5, #0]
 8008360:	b103      	cbz	r3, 8008364 <_kill_r+0x1c>
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	bd38      	pop	{r3, r4, r5, pc}
 8008366:	bf00      	nop
 8008368:	20000b64 	.word	0x20000b64

0800836c <_getpid_r>:
 800836c:	f7f9 bbaa 	b.w	8001ac4 <_getpid>

08008370 <__sread>:
 8008370:	b510      	push	{r4, lr}
 8008372:	460c      	mov	r4, r1
 8008374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008378:	f000 f894 	bl	80084a4 <_read_r>
 800837c:	2800      	cmp	r0, #0
 800837e:	bfab      	itete	ge
 8008380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008382:	89a3      	ldrhlt	r3, [r4, #12]
 8008384:	181b      	addge	r3, r3, r0
 8008386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800838a:	bfac      	ite	ge
 800838c:	6563      	strge	r3, [r4, #84]	; 0x54
 800838e:	81a3      	strhlt	r3, [r4, #12]
 8008390:	bd10      	pop	{r4, pc}

08008392 <__swrite>:
 8008392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	461f      	mov	r7, r3
 8008398:	898b      	ldrh	r3, [r1, #12]
 800839a:	05db      	lsls	r3, r3, #23
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	4616      	mov	r6, r2
 80083a2:	d505      	bpl.n	80083b0 <__swrite+0x1e>
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	2302      	movs	r3, #2
 80083aa:	2200      	movs	r2, #0
 80083ac:	f000 f868 	bl	8008480 <_lseek_r>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	4632      	mov	r2, r6
 80083be:	463b      	mov	r3, r7
 80083c0:	4628      	mov	r0, r5
 80083c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	f000 b817 	b.w	80083f8 <_write_r>

080083ca <__sseek>:
 80083ca:	b510      	push	{r4, lr}
 80083cc:	460c      	mov	r4, r1
 80083ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d2:	f000 f855 	bl	8008480 <_lseek_r>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	bf15      	itete	ne
 80083dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083e6:	81a3      	strheq	r3, [r4, #12]
 80083e8:	bf18      	it	ne
 80083ea:	81a3      	strhne	r3, [r4, #12]
 80083ec:	bd10      	pop	{r4, pc}

080083ee <__sclose>:
 80083ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f2:	f000 b813 	b.w	800841c <_close_r>
	...

080083f8 <_write_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	; (8008418 <_write_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f7f9 fb9b 	bl	8001b42 <_write>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_write_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_write_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20000b64 	.word	0x20000b64

0800841c <_close_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d06      	ldr	r5, [pc, #24]	; (8008438 <_close_r+0x1c>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7f9 fba7 	bl	8001b7a <_close>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_close_r+0x1a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_close_r+0x1a>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	20000b64 	.word	0x20000b64

0800843c <_fstat_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d07      	ldr	r5, [pc, #28]	; (800845c <_fstat_r+0x20>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	4611      	mov	r1, r2
 8008448:	602b      	str	r3, [r5, #0]
 800844a:	f7f9 fba2 	bl	8001b92 <_fstat>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d102      	bne.n	8008458 <_fstat_r+0x1c>
 8008452:	682b      	ldr	r3, [r5, #0]
 8008454:	b103      	cbz	r3, 8008458 <_fstat_r+0x1c>
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	20000b64 	.word	0x20000b64

08008460 <_isatty_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d06      	ldr	r5, [pc, #24]	; (800847c <_isatty_r+0x1c>)
 8008464:	2300      	movs	r3, #0
 8008466:	4604      	mov	r4, r0
 8008468:	4608      	mov	r0, r1
 800846a:	602b      	str	r3, [r5, #0]
 800846c:	f7f9 fba1 	bl	8001bb2 <_isatty>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_isatty_r+0x1a>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	b103      	cbz	r3, 800847a <_isatty_r+0x1a>
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	20000b64 	.word	0x20000b64

08008480 <_lseek_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d07      	ldr	r5, [pc, #28]	; (80084a0 <_lseek_r+0x20>)
 8008484:	4604      	mov	r4, r0
 8008486:	4608      	mov	r0, r1
 8008488:	4611      	mov	r1, r2
 800848a:	2200      	movs	r2, #0
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f7f9 fb9a 	bl	8001bc8 <_lseek>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_lseek_r+0x1e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_lseek_r+0x1e>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20000b64 	.word	0x20000b64

080084a4 <_read_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	; (80084c4 <_read_r+0x20>)
 80084a8:	4604      	mov	r4, r0
 80084aa:	4608      	mov	r0, r1
 80084ac:	4611      	mov	r1, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	602a      	str	r2, [r5, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f7f9 fb28 	bl	8001b08 <_read>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_read_r+0x1e>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_read_r+0x1e>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	20000b64 	.word	0x20000b64

080084c8 <sinf>:
 80084c8:	ee10 3a10 	vmov	r3, s0
 80084cc:	b507      	push	{r0, r1, r2, lr}
 80084ce:	4a1f      	ldr	r2, [pc, #124]	; (800854c <sinf+0x84>)
 80084d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d4:	4293      	cmp	r3, r2
 80084d6:	dc07      	bgt.n	80084e8 <sinf+0x20>
 80084d8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008550 <sinf+0x88>
 80084dc:	2000      	movs	r0, #0
 80084de:	b003      	add	sp, #12
 80084e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e4:	f000 bc48 	b.w	8008d78 <__kernel_sinf>
 80084e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084ec:	db04      	blt.n	80084f8 <sinf+0x30>
 80084ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80084f2:	b003      	add	sp, #12
 80084f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80084f8:	4668      	mov	r0, sp
 80084fa:	f000 f82b 	bl	8008554 <__ieee754_rem_pio2f>
 80084fe:	f000 0003 	and.w	r0, r0, #3
 8008502:	2801      	cmp	r0, #1
 8008504:	d00a      	beq.n	800851c <sinf+0x54>
 8008506:	2802      	cmp	r0, #2
 8008508:	d00f      	beq.n	800852a <sinf+0x62>
 800850a:	b9c0      	cbnz	r0, 800853e <sinf+0x76>
 800850c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008510:	ed9d 0a00 	vldr	s0, [sp]
 8008514:	2001      	movs	r0, #1
 8008516:	f000 fc2f 	bl	8008d78 <__kernel_sinf>
 800851a:	e7ea      	b.n	80084f2 <sinf+0x2a>
 800851c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008520:	ed9d 0a00 	vldr	s0, [sp]
 8008524:	f000 f952 	bl	80087cc <__kernel_cosf>
 8008528:	e7e3      	b.n	80084f2 <sinf+0x2a>
 800852a:	eddd 0a01 	vldr	s1, [sp, #4]
 800852e:	ed9d 0a00 	vldr	s0, [sp]
 8008532:	2001      	movs	r0, #1
 8008534:	f000 fc20 	bl	8008d78 <__kernel_sinf>
 8008538:	eeb1 0a40 	vneg.f32	s0, s0
 800853c:	e7d9      	b.n	80084f2 <sinf+0x2a>
 800853e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008542:	ed9d 0a00 	vldr	s0, [sp]
 8008546:	f000 f941 	bl	80087cc <__kernel_cosf>
 800854a:	e7f5      	b.n	8008538 <sinf+0x70>
 800854c:	3f490fd8 	.word	0x3f490fd8
 8008550:	00000000 	.word	0x00000000

08008554 <__ieee754_rem_pio2f>:
 8008554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008556:	ee10 6a10 	vmov	r6, s0
 800855a:	4b8e      	ldr	r3, [pc, #568]	; (8008794 <__ieee754_rem_pio2f+0x240>)
 800855c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008560:	429d      	cmp	r5, r3
 8008562:	b087      	sub	sp, #28
 8008564:	eef0 7a40 	vmov.f32	s15, s0
 8008568:	4604      	mov	r4, r0
 800856a:	dc05      	bgt.n	8008578 <__ieee754_rem_pio2f+0x24>
 800856c:	2300      	movs	r3, #0
 800856e:	ed80 0a00 	vstr	s0, [r0]
 8008572:	6043      	str	r3, [r0, #4]
 8008574:	2000      	movs	r0, #0
 8008576:	e01a      	b.n	80085ae <__ieee754_rem_pio2f+0x5a>
 8008578:	4b87      	ldr	r3, [pc, #540]	; (8008798 <__ieee754_rem_pio2f+0x244>)
 800857a:	429d      	cmp	r5, r3
 800857c:	dc46      	bgt.n	800860c <__ieee754_rem_pio2f+0xb8>
 800857e:	2e00      	cmp	r6, #0
 8008580:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800879c <__ieee754_rem_pio2f+0x248>
 8008584:	4b86      	ldr	r3, [pc, #536]	; (80087a0 <__ieee754_rem_pio2f+0x24c>)
 8008586:	f025 050f 	bic.w	r5, r5, #15
 800858a:	dd1f      	ble.n	80085cc <__ieee754_rem_pio2f+0x78>
 800858c:	429d      	cmp	r5, r3
 800858e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008592:	d00e      	beq.n	80085b2 <__ieee754_rem_pio2f+0x5e>
 8008594:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80087a4 <__ieee754_rem_pio2f+0x250>
 8008598:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800859c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085a0:	ed80 0a00 	vstr	s0, [r0]
 80085a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085a8:	2001      	movs	r0, #1
 80085aa:	edc4 7a01 	vstr	s15, [r4, #4]
 80085ae:	b007      	add	sp, #28
 80085b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80087a8 <__ieee754_rem_pio2f+0x254>
 80085b6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80087ac <__ieee754_rem_pio2f+0x258>
 80085ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085be:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80085c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085c6:	edc0 6a00 	vstr	s13, [r0]
 80085ca:	e7eb      	b.n	80085a4 <__ieee754_rem_pio2f+0x50>
 80085cc:	429d      	cmp	r5, r3
 80085ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085d2:	d00e      	beq.n	80085f2 <__ieee754_rem_pio2f+0x9e>
 80085d4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80087a4 <__ieee754_rem_pio2f+0x250>
 80085d8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80085dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085e0:	ed80 0a00 	vstr	s0, [r0]
 80085e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	edc4 7a01 	vstr	s15, [r4, #4]
 80085f0:	e7dd      	b.n	80085ae <__ieee754_rem_pio2f+0x5a>
 80085f2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80087a8 <__ieee754_rem_pio2f+0x254>
 80085f6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80087ac <__ieee754_rem_pio2f+0x258>
 80085fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008602:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008606:	edc0 6a00 	vstr	s13, [r0]
 800860a:	e7eb      	b.n	80085e4 <__ieee754_rem_pio2f+0x90>
 800860c:	4b68      	ldr	r3, [pc, #416]	; (80087b0 <__ieee754_rem_pio2f+0x25c>)
 800860e:	429d      	cmp	r5, r3
 8008610:	dc72      	bgt.n	80086f8 <__ieee754_rem_pio2f+0x1a4>
 8008612:	f000 fbf9 	bl	8008e08 <fabsf>
 8008616:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80087b4 <__ieee754_rem_pio2f+0x260>
 800861a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800861e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800862a:	ee17 0a90 	vmov	r0, s15
 800862e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800879c <__ieee754_rem_pio2f+0x248>
 8008632:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008636:	281f      	cmp	r0, #31
 8008638:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80087a4 <__ieee754_rem_pio2f+0x250>
 800863c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008640:	eeb1 6a47 	vneg.f32	s12, s14
 8008644:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008648:	ee16 2a90 	vmov	r2, s13
 800864c:	dc1c      	bgt.n	8008688 <__ieee754_rem_pio2f+0x134>
 800864e:	495a      	ldr	r1, [pc, #360]	; (80087b8 <__ieee754_rem_pio2f+0x264>)
 8008650:	1e47      	subs	r7, r0, #1
 8008652:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008656:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800865a:	428b      	cmp	r3, r1
 800865c:	d014      	beq.n	8008688 <__ieee754_rem_pio2f+0x134>
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	ed94 7a00 	vldr	s14, [r4]
 8008664:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008668:	2e00      	cmp	r6, #0
 800866a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800866e:	ed84 0a01 	vstr	s0, [r4, #4]
 8008672:	da9c      	bge.n	80085ae <__ieee754_rem_pio2f+0x5a>
 8008674:	eeb1 7a47 	vneg.f32	s14, s14
 8008678:	eeb1 0a40 	vneg.f32	s0, s0
 800867c:	ed84 7a00 	vstr	s14, [r4]
 8008680:	ed84 0a01 	vstr	s0, [r4, #4]
 8008684:	4240      	negs	r0, r0
 8008686:	e792      	b.n	80085ae <__ieee754_rem_pio2f+0x5a>
 8008688:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800868c:	15eb      	asrs	r3, r5, #23
 800868e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008692:	2d08      	cmp	r5, #8
 8008694:	dde3      	ble.n	800865e <__ieee754_rem_pio2f+0x10a>
 8008696:	eddf 7a44 	vldr	s15, [pc, #272]	; 80087a8 <__ieee754_rem_pio2f+0x254>
 800869a:	eddf 5a44 	vldr	s11, [pc, #272]	; 80087ac <__ieee754_rem_pio2f+0x258>
 800869e:	eef0 6a40 	vmov.f32	s13, s0
 80086a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086a6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80086aa:	eea6 0a27 	vfma.f32	s0, s12, s15
 80086ae:	eef0 7a40 	vmov.f32	s15, s0
 80086b2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80086b6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80086ba:	ee15 2a90 	vmov	r2, s11
 80086be:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80086c2:	1a5b      	subs	r3, r3, r1
 80086c4:	2b19      	cmp	r3, #25
 80086c6:	dc04      	bgt.n	80086d2 <__ieee754_rem_pio2f+0x17e>
 80086c8:	edc4 5a00 	vstr	s11, [r4]
 80086cc:	eeb0 0a66 	vmov.f32	s0, s13
 80086d0:	e7c6      	b.n	8008660 <__ieee754_rem_pio2f+0x10c>
 80086d2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80087bc <__ieee754_rem_pio2f+0x268>
 80086d6:	eeb0 0a66 	vmov.f32	s0, s13
 80086da:	eea6 0a25 	vfma.f32	s0, s12, s11
 80086de:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80086e2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80087c0 <__ieee754_rem_pio2f+0x26c>
 80086e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80086ea:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80086ee:	ee30 7a67 	vsub.f32	s14, s0, s15
 80086f2:	ed84 7a00 	vstr	s14, [r4]
 80086f6:	e7b3      	b.n	8008660 <__ieee754_rem_pio2f+0x10c>
 80086f8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80086fc:	db06      	blt.n	800870c <__ieee754_rem_pio2f+0x1b8>
 80086fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008702:	edc0 7a01 	vstr	s15, [r0, #4]
 8008706:	edc0 7a00 	vstr	s15, [r0]
 800870a:	e733      	b.n	8008574 <__ieee754_rem_pio2f+0x20>
 800870c:	15ea      	asrs	r2, r5, #23
 800870e:	3a86      	subs	r2, #134	; 0x86
 8008710:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008714:	ee07 3a90 	vmov	s15, r3
 8008718:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800871c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80087c4 <__ieee754_rem_pio2f+0x270>
 8008720:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008728:	ed8d 7a03 	vstr	s14, [sp, #12]
 800872c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008730:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800873c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008744:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874c:	edcd 7a05 	vstr	s15, [sp, #20]
 8008750:	d11e      	bne.n	8008790 <__ieee754_rem_pio2f+0x23c>
 8008752:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875a:	bf14      	ite	ne
 800875c:	2302      	movne	r3, #2
 800875e:	2301      	moveq	r3, #1
 8008760:	4919      	ldr	r1, [pc, #100]	; (80087c8 <__ieee754_rem_pio2f+0x274>)
 8008762:	9101      	str	r1, [sp, #4]
 8008764:	2102      	movs	r1, #2
 8008766:	9100      	str	r1, [sp, #0]
 8008768:	a803      	add	r0, sp, #12
 800876a:	4621      	mov	r1, r4
 800876c:	f000 f88e 	bl	800888c <__kernel_rem_pio2f>
 8008770:	2e00      	cmp	r6, #0
 8008772:	f6bf af1c 	bge.w	80085ae <__ieee754_rem_pio2f+0x5a>
 8008776:	edd4 7a00 	vldr	s15, [r4]
 800877a:	eef1 7a67 	vneg.f32	s15, s15
 800877e:	edc4 7a00 	vstr	s15, [r4]
 8008782:	edd4 7a01 	vldr	s15, [r4, #4]
 8008786:	eef1 7a67 	vneg.f32	s15, s15
 800878a:	edc4 7a01 	vstr	s15, [r4, #4]
 800878e:	e779      	b.n	8008684 <__ieee754_rem_pio2f+0x130>
 8008790:	2303      	movs	r3, #3
 8008792:	e7e5      	b.n	8008760 <__ieee754_rem_pio2f+0x20c>
 8008794:	3f490fd8 	.word	0x3f490fd8
 8008798:	4016cbe3 	.word	0x4016cbe3
 800879c:	3fc90f80 	.word	0x3fc90f80
 80087a0:	3fc90fd0 	.word	0x3fc90fd0
 80087a4:	37354443 	.word	0x37354443
 80087a8:	37354400 	.word	0x37354400
 80087ac:	2e85a308 	.word	0x2e85a308
 80087b0:	43490f80 	.word	0x43490f80
 80087b4:	3f22f984 	.word	0x3f22f984
 80087b8:	080093b4 	.word	0x080093b4
 80087bc:	2e85a300 	.word	0x2e85a300
 80087c0:	248d3132 	.word	0x248d3132
 80087c4:	43800000 	.word	0x43800000
 80087c8:	08009434 	.word	0x08009434

080087cc <__kernel_cosf>:
 80087cc:	ee10 3a10 	vmov	r3, s0
 80087d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80087d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087dc:	da05      	bge.n	80087ea <__kernel_cosf+0x1e>
 80087de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80087e2:	ee17 2a90 	vmov	r2, s15
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d03d      	beq.n	8008866 <__kernel_cosf+0x9a>
 80087ea:	ee60 5a00 	vmul.f32	s11, s0, s0
 80087ee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800886c <__kernel_cosf+0xa0>
 80087f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008870 <__kernel_cosf+0xa4>
 80087f6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008874 <__kernel_cosf+0xa8>
 80087fa:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <__kernel_cosf+0xac>)
 80087fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008800:	4293      	cmp	r3, r2
 8008802:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800887c <__kernel_cosf+0xb0>
 8008806:	eee7 7a25 	vfma.f32	s15, s14, s11
 800880a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008880 <__kernel_cosf+0xb4>
 800880e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008812:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008884 <__kernel_cosf+0xb8>
 8008816:	eee7 7a25 	vfma.f32	s15, s14, s11
 800881a:	eeb0 7a66 	vmov.f32	s14, s13
 800881e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008822:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008826:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800882a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800882e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008832:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008836:	dc04      	bgt.n	8008842 <__kernel_cosf+0x76>
 8008838:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800883c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008840:	4770      	bx	lr
 8008842:	4a11      	ldr	r2, [pc, #68]	; (8008888 <__kernel_cosf+0xbc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	bfda      	itte	le
 8008848:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800884c:	ee06 3a90 	vmovle	s13, r3
 8008850:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008854:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008858:	ee36 0a66 	vsub.f32	s0, s12, s13
 800885c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008860:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008864:	4770      	bx	lr
 8008866:	eeb0 0a46 	vmov.f32	s0, s12
 800886a:	4770      	bx	lr
 800886c:	ad47d74e 	.word	0xad47d74e
 8008870:	310f74f6 	.word	0x310f74f6
 8008874:	3d2aaaab 	.word	0x3d2aaaab
 8008878:	3e999999 	.word	0x3e999999
 800887c:	b493f27c 	.word	0xb493f27c
 8008880:	37d00d01 	.word	0x37d00d01
 8008884:	bab60b61 	.word	0xbab60b61
 8008888:	3f480000 	.word	0x3f480000

0800888c <__kernel_rem_pio2f>:
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	ed2d 8b04 	vpush	{d8-d9}
 8008894:	b0d9      	sub	sp, #356	; 0x164
 8008896:	4688      	mov	r8, r1
 8008898:	9002      	str	r0, [sp, #8]
 800889a:	49bb      	ldr	r1, [pc, #748]	; (8008b88 <__kernel_rem_pio2f+0x2fc>)
 800889c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80088a4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80088a8:	1e59      	subs	r1, r3, #1
 80088aa:	1d13      	adds	r3, r2, #4
 80088ac:	db27      	blt.n	80088fe <__kernel_rem_pio2f+0x72>
 80088ae:	f1b2 0b03 	subs.w	fp, r2, #3
 80088b2:	bf48      	it	mi
 80088b4:	f102 0b04 	addmi.w	fp, r2, #4
 80088b8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80088bc:	1c45      	adds	r5, r0, #1
 80088be:	00ec      	lsls	r4, r5, #3
 80088c0:	1a47      	subs	r7, r0, r1
 80088c2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 80088c6:	9403      	str	r4, [sp, #12]
 80088c8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80088cc:	eb0a 0c01 	add.w	ip, sl, r1
 80088d0:	ae1c      	add	r6, sp, #112	; 0x70
 80088d2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80088d6:	2400      	movs	r4, #0
 80088d8:	4564      	cmp	r4, ip
 80088da:	dd12      	ble.n	8008902 <__kernel_rem_pio2f+0x76>
 80088dc:	9b01      	ldr	r3, [sp, #4]
 80088de:	ac1c      	add	r4, sp, #112	; 0x70
 80088e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80088e4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80088e8:	f04f 0c00 	mov.w	ip, #0
 80088ec:	45d4      	cmp	ip, sl
 80088ee:	dc27      	bgt.n	8008940 <__kernel_rem_pio2f+0xb4>
 80088f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80088f4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 80088f8:	4627      	mov	r7, r4
 80088fa:	2600      	movs	r6, #0
 80088fc:	e016      	b.n	800892c <__kernel_rem_pio2f+0xa0>
 80088fe:	2000      	movs	r0, #0
 8008900:	e7dc      	b.n	80088bc <__kernel_rem_pio2f+0x30>
 8008902:	42e7      	cmn	r7, r4
 8008904:	bf5d      	ittte	pl
 8008906:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800890a:	ee07 3a90 	vmovpl	s15, r3
 800890e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008912:	eef0 7a47 	vmovmi.f32	s15, s14
 8008916:	ece6 7a01 	vstmia	r6!, {s15}
 800891a:	3401      	adds	r4, #1
 800891c:	e7dc      	b.n	80088d8 <__kernel_rem_pio2f+0x4c>
 800891e:	ecf9 6a01 	vldmia	r9!, {s13}
 8008922:	ed97 7a00 	vldr	s14, [r7]
 8008926:	eee6 7a87 	vfma.f32	s15, s13, s14
 800892a:	3601      	adds	r6, #1
 800892c:	428e      	cmp	r6, r1
 800892e:	f1a7 0704 	sub.w	r7, r7, #4
 8008932:	ddf4      	ble.n	800891e <__kernel_rem_pio2f+0x92>
 8008934:	eceb 7a01 	vstmia	fp!, {s15}
 8008938:	f10c 0c01 	add.w	ip, ip, #1
 800893c:	3404      	adds	r4, #4
 800893e:	e7d5      	b.n	80088ec <__kernel_rem_pio2f+0x60>
 8008940:	ab08      	add	r3, sp, #32
 8008942:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008946:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008b94 <__kernel_rem_pio2f+0x308>
 800894a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008b90 <__kernel_rem_pio2f+0x304>
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008954:	4656      	mov	r6, sl
 8008956:	00b3      	lsls	r3, r6, #2
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	ab58      	add	r3, sp, #352	; 0x160
 800895c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008960:	ac08      	add	r4, sp, #32
 8008962:	ab44      	add	r3, sp, #272	; 0x110
 8008964:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008968:	46a4      	mov	ip, r4
 800896a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800896e:	4637      	mov	r7, r6
 8008970:	2f00      	cmp	r7, #0
 8008972:	f1a0 0004 	sub.w	r0, r0, #4
 8008976:	dc4f      	bgt.n	8008a18 <__kernel_rem_pio2f+0x18c>
 8008978:	4628      	mov	r0, r5
 800897a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800897e:	f000 fa8d 	bl	8008e9c <scalbnf>
 8008982:	eeb0 8a40 	vmov.f32	s16, s0
 8008986:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800898a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800898e:	f000 fa43 	bl	8008e18 <floorf>
 8008992:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008996:	eea0 8a67 	vfms.f32	s16, s0, s15
 800899a:	2d00      	cmp	r5, #0
 800899c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80089a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80089a4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80089a8:	ee17 9a90 	vmov	r9, s15
 80089ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 80089b0:	dd44      	ble.n	8008a3c <__kernel_rem_pio2f+0x1b0>
 80089b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80089b6:	ab08      	add	r3, sp, #32
 80089b8:	f1c5 0e08 	rsb	lr, r5, #8
 80089bc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80089c0:	fa47 f00e 	asr.w	r0, r7, lr
 80089c4:	4481      	add	r9, r0
 80089c6:	fa00 f00e 	lsl.w	r0, r0, lr
 80089ca:	1a3f      	subs	r7, r7, r0
 80089cc:	f1c5 0007 	rsb	r0, r5, #7
 80089d0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80089d4:	4107      	asrs	r7, r0
 80089d6:	2f00      	cmp	r7, #0
 80089d8:	dd3f      	ble.n	8008a5a <__kernel_rem_pio2f+0x1ce>
 80089da:	f04f 0e00 	mov.w	lr, #0
 80089de:	f109 0901 	add.w	r9, r9, #1
 80089e2:	4673      	mov	r3, lr
 80089e4:	4576      	cmp	r6, lr
 80089e6:	dc6b      	bgt.n	8008ac0 <__kernel_rem_pio2f+0x234>
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	dd04      	ble.n	80089f6 <__kernel_rem_pio2f+0x16a>
 80089ec:	2d01      	cmp	r5, #1
 80089ee:	d078      	beq.n	8008ae2 <__kernel_rem_pio2f+0x256>
 80089f0:	2d02      	cmp	r5, #2
 80089f2:	f000 8081 	beq.w	8008af8 <__kernel_rem_pio2f+0x26c>
 80089f6:	2f02      	cmp	r7, #2
 80089f8:	d12f      	bne.n	8008a5a <__kernel_rem_pio2f+0x1ce>
 80089fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80089fe:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008a02:	b353      	cbz	r3, 8008a5a <__kernel_rem_pio2f+0x1ce>
 8008a04:	4628      	mov	r0, r5
 8008a06:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008a0a:	f000 fa47 	bl	8008e9c <scalbnf>
 8008a0e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008a12:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008a16:	e020      	b.n	8008a5a <__kernel_rem_pio2f+0x1ce>
 8008a18:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008a1c:	3f01      	subs	r7, #1
 8008a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a26:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008a2a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a2e:	ecac 0a01 	vstmia	ip!, {s0}
 8008a32:	ed90 0a00 	vldr	s0, [r0]
 8008a36:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008a3a:	e799      	b.n	8008970 <__kernel_rem_pio2f+0xe4>
 8008a3c:	d105      	bne.n	8008a4a <__kernel_rem_pio2f+0x1be>
 8008a3e:	1e70      	subs	r0, r6, #1
 8008a40:	ab08      	add	r3, sp, #32
 8008a42:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008a46:	11ff      	asrs	r7, r7, #7
 8008a48:	e7c5      	b.n	80089d6 <__kernel_rem_pio2f+0x14a>
 8008a4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a4e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	da31      	bge.n	8008abc <__kernel_rem_pio2f+0x230>
 8008a58:	2700      	movs	r7, #0
 8008a5a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a62:	f040 809b 	bne.w	8008b9c <__kernel_rem_pio2f+0x310>
 8008a66:	1e74      	subs	r4, r6, #1
 8008a68:	46a4      	mov	ip, r4
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	45d4      	cmp	ip, sl
 8008a6e:	da4a      	bge.n	8008b06 <__kernel_rem_pio2f+0x27a>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d07a      	beq.n	8008b6a <__kernel_rem_pio2f+0x2de>
 8008a74:	ab08      	add	r3, sp, #32
 8008a76:	3d08      	subs	r5, #8
 8008a78:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8081 	beq.w	8008b84 <__kernel_rem_pio2f+0x2f8>
 8008a82:	4628      	mov	r0, r5
 8008a84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a88:	00a5      	lsls	r5, r4, #2
 8008a8a:	f000 fa07 	bl	8008e9c <scalbnf>
 8008a8e:	aa44      	add	r2, sp, #272	; 0x110
 8008a90:	1d2b      	adds	r3, r5, #4
 8008a92:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008b94 <__kernel_rem_pio2f+0x308>
 8008a96:	18d1      	adds	r1, r2, r3
 8008a98:	4622      	mov	r2, r4
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	f280 80ae 	bge.w	8008bfc <__kernel_rem_pio2f+0x370>
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	f2c0 80cc 	blt.w	8008c40 <__kernel_rem_pio2f+0x3b4>
 8008aa8:	a944      	add	r1, sp, #272	; 0x110
 8008aaa:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008aae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008b8c <__kernel_rem_pio2f+0x300>
 8008ab2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	1aa1      	subs	r1, r4, r2
 8008aba:	e0b6      	b.n	8008c2a <__kernel_rem_pio2f+0x39e>
 8008abc:	2702      	movs	r7, #2
 8008abe:	e78c      	b.n	80089da <__kernel_rem_pio2f+0x14e>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	b94b      	cbnz	r3, 8008ad8 <__kernel_rem_pio2f+0x24c>
 8008ac4:	b118      	cbz	r0, 8008ace <__kernel_rem_pio2f+0x242>
 8008ac6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	2001      	movs	r0, #1
 8008ace:	f10e 0e01 	add.w	lr, lr, #1
 8008ad2:	3404      	adds	r4, #4
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	e785      	b.n	80089e4 <__kernel_rem_pio2f+0x158>
 8008ad8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008adc:	6020      	str	r0, [r4, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	e7f5      	b.n	8008ace <__kernel_rem_pio2f+0x242>
 8008ae2:	1e74      	subs	r4, r6, #1
 8008ae4:	a808      	add	r0, sp, #32
 8008ae6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008aea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008aee:	f10d 0c20 	add.w	ip, sp, #32
 8008af2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008af6:	e77e      	b.n	80089f6 <__kernel_rem_pio2f+0x16a>
 8008af8:	1e74      	subs	r4, r6, #1
 8008afa:	a808      	add	r0, sp, #32
 8008afc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008b00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008b04:	e7f3      	b.n	8008aee <__kernel_rem_pio2f+0x262>
 8008b06:	ab08      	add	r3, sp, #32
 8008b08:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008b0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b10:	4318      	orrs	r0, r3
 8008b12:	e7ab      	b.n	8008a6c <__kernel_rem_pio2f+0x1e0>
 8008b14:	f10c 0c01 	add.w	ip, ip, #1
 8008b18:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008b1c:	2c00      	cmp	r4, #0
 8008b1e:	d0f9      	beq.n	8008b14 <__kernel_rem_pio2f+0x288>
 8008b20:	9b05      	ldr	r3, [sp, #20]
 8008b22:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008b26:	eb0d 0003 	add.w	r0, sp, r3
 8008b2a:	9b01      	ldr	r3, [sp, #4]
 8008b2c:	18f4      	adds	r4, r6, r3
 8008b2e:	ab1c      	add	r3, sp, #112	; 0x70
 8008b30:	1c77      	adds	r7, r6, #1
 8008b32:	384c      	subs	r0, #76	; 0x4c
 8008b34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b38:	4466      	add	r6, ip
 8008b3a:	42be      	cmp	r6, r7
 8008b3c:	f6ff af0b 	blt.w	8008956 <__kernel_rem_pio2f+0xca>
 8008b40:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008b44:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b50:	f04f 0c00 	mov.w	ip, #0
 8008b54:	ece4 7a01 	vstmia	r4!, {s15}
 8008b58:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 8008b5c:	46a1      	mov	r9, r4
 8008b5e:	458c      	cmp	ip, r1
 8008b60:	dd07      	ble.n	8008b72 <__kernel_rem_pio2f+0x2e6>
 8008b62:	ece0 7a01 	vstmia	r0!, {s15}
 8008b66:	3701      	adds	r7, #1
 8008b68:	e7e7      	b.n	8008b3a <__kernel_rem_pio2f+0x2ae>
 8008b6a:	9804      	ldr	r0, [sp, #16]
 8008b6c:	f04f 0c01 	mov.w	ip, #1
 8008b70:	e7d2      	b.n	8008b18 <__kernel_rem_pio2f+0x28c>
 8008b72:	ecfe 6a01 	vldmia	lr!, {s13}
 8008b76:	ed39 7a01 	vldmdb	r9!, {s14}
 8008b7a:	f10c 0c01 	add.w	ip, ip, #1
 8008b7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008b82:	e7ec      	b.n	8008b5e <__kernel_rem_pio2f+0x2d2>
 8008b84:	3c01      	subs	r4, #1
 8008b86:	e775      	b.n	8008a74 <__kernel_rem_pio2f+0x1e8>
 8008b88:	08009778 	.word	0x08009778
 8008b8c:	0800974c 	.word	0x0800974c
 8008b90:	43800000 	.word	0x43800000
 8008b94:	3b800000 	.word	0x3b800000
 8008b98:	00000000 	.word	0x00000000
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8008ba2:	1a98      	subs	r0, r3, r2
 8008ba4:	f000 f97a 	bl	8008e9c <scalbnf>
 8008ba8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008b90 <__kernel_rem_pio2f+0x304>
 8008bac:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb4:	db19      	blt.n	8008bea <__kernel_rem_pio2f+0x35e>
 8008bb6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008b94 <__kernel_rem_pio2f+0x308>
 8008bba:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008bbe:	aa08      	add	r2, sp, #32
 8008bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bc4:	1c74      	adds	r4, r6, #1
 8008bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bca:	3508      	adds	r5, #8
 8008bcc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bd8:	ee10 3a10 	vmov	r3, s0
 8008bdc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008be0:	ee17 3a90 	vmov	r3, s15
 8008be4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008be8:	e74b      	b.n	8008a82 <__kernel_rem_pio2f+0x1f6>
 8008bea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bee:	aa08      	add	r2, sp, #32
 8008bf0:	ee10 3a10 	vmov	r3, s0
 8008bf4:	4634      	mov	r4, r6
 8008bf6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008bfa:	e742      	b.n	8008a82 <__kernel_rem_pio2f+0x1f6>
 8008bfc:	a808      	add	r0, sp, #32
 8008bfe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008c02:	9001      	str	r0, [sp, #4]
 8008c04:	ee07 0a90 	vmov	s15, r0
 8008c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c0c:	3a01      	subs	r2, #1
 8008c0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008c12:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008c16:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c1a:	e73e      	b.n	8008a9a <__kernel_rem_pio2f+0x20e>
 8008c1c:	ecfc 6a01 	vldmia	ip!, {s13}
 8008c20:	ecb6 7a01 	vldmia	r6!, {s14}
 8008c24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c28:	3001      	adds	r0, #1
 8008c2a:	4550      	cmp	r0, sl
 8008c2c:	dc01      	bgt.n	8008c32 <__kernel_rem_pio2f+0x3a6>
 8008c2e:	4288      	cmp	r0, r1
 8008c30:	ddf4      	ble.n	8008c1c <__kernel_rem_pio2f+0x390>
 8008c32:	a858      	add	r0, sp, #352	; 0x160
 8008c34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c38:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008c3c:	3a01      	subs	r2, #1
 8008c3e:	e730      	b.n	8008aa2 <__kernel_rem_pio2f+0x216>
 8008c40:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008c42:	2a02      	cmp	r2, #2
 8008c44:	dc09      	bgt.n	8008c5a <__kernel_rem_pio2f+0x3ce>
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	dc2a      	bgt.n	8008ca0 <__kernel_rem_pio2f+0x414>
 8008c4a:	d043      	beq.n	8008cd4 <__kernel_rem_pio2f+0x448>
 8008c4c:	f009 0007 	and.w	r0, r9, #7
 8008c50:	b059      	add	sp, #356	; 0x164
 8008c52:	ecbd 8b04 	vpop	{d8-d9}
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d1f5      	bne.n	8008c4c <__kernel_rem_pio2f+0x3c0>
 8008c60:	ab30      	add	r3, sp, #192	; 0xc0
 8008c62:	442b      	add	r3, r5
 8008c64:	461a      	mov	r2, r3
 8008c66:	4619      	mov	r1, r3
 8008c68:	4620      	mov	r0, r4
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f1a1 0104 	sub.w	r1, r1, #4
 8008c70:	dc51      	bgt.n	8008d16 <__kernel_rem_pio2f+0x48a>
 8008c72:	4621      	mov	r1, r4
 8008c74:	2901      	cmp	r1, #1
 8008c76:	f1a2 0204 	sub.w	r2, r2, #4
 8008c7a:	dc5c      	bgt.n	8008d36 <__kernel_rem_pio2f+0x4aa>
 8008c7c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 8008c80:	3304      	adds	r3, #4
 8008c82:	2c01      	cmp	r4, #1
 8008c84:	dc67      	bgt.n	8008d56 <__kernel_rem_pio2f+0x4ca>
 8008c86:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008c8a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	d167      	bne.n	8008d62 <__kernel_rem_pio2f+0x4d6>
 8008c92:	edc8 6a00 	vstr	s13, [r8]
 8008c96:	ed88 7a01 	vstr	s14, [r8, #4]
 8008c9a:	edc8 7a02 	vstr	s15, [r8, #8]
 8008c9e:	e7d5      	b.n	8008c4c <__kernel_rem_pio2f+0x3c0>
 8008ca0:	aa30      	add	r2, sp, #192	; 0xc0
 8008ca2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 8008ca6:	4413      	add	r3, r2
 8008ca8:	4622      	mov	r2, r4
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	da24      	bge.n	8008cf8 <__kernel_rem_pio2f+0x46c>
 8008cae:	b34f      	cbz	r7, 8008d04 <__kernel_rem_pio2f+0x478>
 8008cb0:	eef1 7a47 	vneg.f32	s15, s14
 8008cb4:	edc8 7a00 	vstr	s15, [r8]
 8008cb8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008cbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cc0:	aa31      	add	r2, sp, #196	; 0xc4
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	da20      	bge.n	8008d0a <__kernel_rem_pio2f+0x47e>
 8008cc8:	b10f      	cbz	r7, 8008cce <__kernel_rem_pio2f+0x442>
 8008cca:	eef1 7a67 	vneg.f32	s15, s15
 8008cce:	edc8 7a01 	vstr	s15, [r8, #4]
 8008cd2:	e7bb      	b.n	8008c4c <__kernel_rem_pio2f+0x3c0>
 8008cd4:	aa30      	add	r2, sp, #192	; 0xc0
 8008cd6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008b98 <__kernel_rem_pio2f+0x30c>
 8008cda:	4413      	add	r3, r2
 8008cdc:	2c00      	cmp	r4, #0
 8008cde:	da05      	bge.n	8008cec <__kernel_rem_pio2f+0x460>
 8008ce0:	b10f      	cbz	r7, 8008ce6 <__kernel_rem_pio2f+0x45a>
 8008ce2:	eef1 7a67 	vneg.f32	s15, s15
 8008ce6:	edc8 7a00 	vstr	s15, [r8]
 8008cea:	e7af      	b.n	8008c4c <__kernel_rem_pio2f+0x3c0>
 8008cec:	ed33 7a01 	vldmdb	r3!, {s14}
 8008cf0:	3c01      	subs	r4, #1
 8008cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cf6:	e7f1      	b.n	8008cdc <__kernel_rem_pio2f+0x450>
 8008cf8:	ed73 7a01 	vldmdb	r3!, {s15}
 8008cfc:	3a01      	subs	r2, #1
 8008cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d02:	e7d2      	b.n	8008caa <__kernel_rem_pio2f+0x41e>
 8008d04:	eef0 7a47 	vmov.f32	s15, s14
 8008d08:	e7d4      	b.n	8008cb4 <__kernel_rem_pio2f+0x428>
 8008d0a:	ecb2 7a01 	vldmia	r2!, {s14}
 8008d0e:	3301      	adds	r3, #1
 8008d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d14:	e7d6      	b.n	8008cc4 <__kernel_rem_pio2f+0x438>
 8008d16:	edd1 7a00 	vldr	s15, [r1]
 8008d1a:	edd1 6a01 	vldr	s13, [r1, #4]
 8008d1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d22:	3801      	subs	r0, #1
 8008d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d28:	ed81 7a00 	vstr	s14, [r1]
 8008d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d30:	edc1 7a01 	vstr	s15, [r1, #4]
 8008d34:	e799      	b.n	8008c6a <__kernel_rem_pio2f+0x3de>
 8008d36:	edd2 7a00 	vldr	s15, [r2]
 8008d3a:	edd2 6a01 	vldr	s13, [r2, #4]
 8008d3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d42:	3901      	subs	r1, #1
 8008d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d48:	ed82 7a00 	vstr	s14, [r2]
 8008d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d50:	edc2 7a01 	vstr	s15, [r2, #4]
 8008d54:	e78e      	b.n	8008c74 <__kernel_rem_pio2f+0x3e8>
 8008d56:	ed33 7a01 	vldmdb	r3!, {s14}
 8008d5a:	3c01      	subs	r4, #1
 8008d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d60:	e78f      	b.n	8008c82 <__kernel_rem_pio2f+0x3f6>
 8008d62:	eef1 6a66 	vneg.f32	s13, s13
 8008d66:	eeb1 7a47 	vneg.f32	s14, s14
 8008d6a:	edc8 6a00 	vstr	s13, [r8]
 8008d6e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008d72:	eef1 7a67 	vneg.f32	s15, s15
 8008d76:	e790      	b.n	8008c9a <__kernel_rem_pio2f+0x40e>

08008d78 <__kernel_sinf>:
 8008d78:	ee10 3a10 	vmov	r3, s0
 8008d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008d84:	da04      	bge.n	8008d90 <__kernel_sinf+0x18>
 8008d86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008d8a:	ee17 3a90 	vmov	r3, s15
 8008d8e:	b35b      	cbz	r3, 8008de8 <__kernel_sinf+0x70>
 8008d90:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008d94:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008dec <__kernel_sinf+0x74>
 8008d98:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008df0 <__kernel_sinf+0x78>
 8008d9c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008da0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008df4 <__kernel_sinf+0x7c>
 8008da4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008da8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008df8 <__kernel_sinf+0x80>
 8008dac:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008db0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008dfc <__kernel_sinf+0x84>
 8008db4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008db8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008dbc:	b930      	cbnz	r0, 8008dcc <__kernel_sinf+0x54>
 8008dbe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008e00 <__kernel_sinf+0x88>
 8008dc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008dc6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008dca:	4770      	bx	lr
 8008dcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008dd0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008dd4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008dd8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008ddc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008e04 <__kernel_sinf+0x8c>
 8008de0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008de4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	2f2ec9d3 	.word	0x2f2ec9d3
 8008df0:	b2d72f34 	.word	0xb2d72f34
 8008df4:	3638ef1b 	.word	0x3638ef1b
 8008df8:	b9500d01 	.word	0xb9500d01
 8008dfc:	3c088889 	.word	0x3c088889
 8008e00:	be2aaaab 	.word	0xbe2aaaab
 8008e04:	3e2aaaab 	.word	0x3e2aaaab

08008e08 <fabsf>:
 8008e08:	ee10 3a10 	vmov	r3, s0
 8008e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e10:	ee00 3a10 	vmov	s0, r3
 8008e14:	4770      	bx	lr
	...

08008e18 <floorf>:
 8008e18:	ee10 3a10 	vmov	r3, s0
 8008e1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e20:	3a7f      	subs	r2, #127	; 0x7f
 8008e22:	2a16      	cmp	r2, #22
 8008e24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e28:	dc2a      	bgt.n	8008e80 <floorf+0x68>
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	da11      	bge.n	8008e52 <floorf+0x3a>
 8008e2e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008e90 <floorf+0x78>
 8008e32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3e:	dd05      	ble.n	8008e4c <floorf+0x34>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da23      	bge.n	8008e8c <floorf+0x74>
 8008e44:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <floorf+0x7c>)
 8008e46:	2900      	cmp	r1, #0
 8008e48:	bf18      	it	ne
 8008e4a:	4613      	movne	r3, r2
 8008e4c:	ee00 3a10 	vmov	s0, r3
 8008e50:	4770      	bx	lr
 8008e52:	4911      	ldr	r1, [pc, #68]	; (8008e98 <floorf+0x80>)
 8008e54:	4111      	asrs	r1, r2
 8008e56:	420b      	tst	r3, r1
 8008e58:	d0fa      	beq.n	8008e50 <floorf+0x38>
 8008e5a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008e90 <floorf+0x78>
 8008e5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6a:	ddef      	ble.n	8008e4c <floorf+0x34>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bfbe      	ittt	lt
 8008e70:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008e74:	fa40 f202 	asrlt.w	r2, r0, r2
 8008e78:	189b      	addlt	r3, r3, r2
 8008e7a:	ea23 0301 	bic.w	r3, r3, r1
 8008e7e:	e7e5      	b.n	8008e4c <floorf+0x34>
 8008e80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008e84:	d3e4      	bcc.n	8008e50 <floorf+0x38>
 8008e86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e8a:	4770      	bx	lr
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e7dd      	b.n	8008e4c <floorf+0x34>
 8008e90:	7149f2ca 	.word	0x7149f2ca
 8008e94:	bf800000 	.word	0xbf800000
 8008e98:	007fffff 	.word	0x007fffff

08008e9c <scalbnf>:
 8008e9c:	ee10 3a10 	vmov	r3, s0
 8008ea0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008ea4:	d025      	beq.n	8008ef2 <scalbnf+0x56>
 8008ea6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008eaa:	d302      	bcc.n	8008eb2 <scalbnf+0x16>
 8008eac:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008eb0:	4770      	bx	lr
 8008eb2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008eb6:	d122      	bne.n	8008efe <scalbnf+0x62>
 8008eb8:	4b2a      	ldr	r3, [pc, #168]	; (8008f64 <scalbnf+0xc8>)
 8008eba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008f68 <scalbnf+0xcc>
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ec4:	db16      	blt.n	8008ef4 <scalbnf+0x58>
 8008ec6:	ee10 3a10 	vmov	r3, s0
 8008eca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008ece:	3a19      	subs	r2, #25
 8008ed0:	4402      	add	r2, r0
 8008ed2:	2afe      	cmp	r2, #254	; 0xfe
 8008ed4:	dd15      	ble.n	8008f02 <scalbnf+0x66>
 8008ed6:	ee10 3a10 	vmov	r3, s0
 8008eda:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008f6c <scalbnf+0xd0>
 8008ede:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008f70 <scalbnf+0xd4>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	eeb0 7a67 	vmov.f32	s14, s15
 8008ee8:	bfb8      	it	lt
 8008eea:	eef0 7a66 	vmovlt.f32	s15, s13
 8008eee:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008ef2:	4770      	bx	lr
 8008ef4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008f74 <scalbnf+0xd8>
 8008ef8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008efc:	4770      	bx	lr
 8008efe:	0dd2      	lsrs	r2, r2, #23
 8008f00:	e7e6      	b.n	8008ed0 <scalbnf+0x34>
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	dd06      	ble.n	8008f14 <scalbnf+0x78>
 8008f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f0a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f0e:	ee00 3a10 	vmov	s0, r3
 8008f12:	4770      	bx	lr
 8008f14:	f112 0f16 	cmn.w	r2, #22
 8008f18:	da1a      	bge.n	8008f50 <scalbnf+0xb4>
 8008f1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f1e:	4298      	cmp	r0, r3
 8008f20:	ee10 3a10 	vmov	r3, s0
 8008f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	dd0a      	ble.n	8008f40 <scalbnf+0xa4>
 8008f2a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008f6c <scalbnf+0xd0>
 8008f2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008f70 <scalbnf+0xd4>
 8008f32:	eef0 7a40 	vmov.f32	s15, s0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bf18      	it	ne
 8008f3a:	eeb0 0a47 	vmovne.f32	s0, s14
 8008f3e:	e7db      	b.n	8008ef8 <scalbnf+0x5c>
 8008f40:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008f74 <scalbnf+0xd8>
 8008f44:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008f78 <scalbnf+0xdc>
 8008f48:	eef0 7a40 	vmov.f32	s15, s0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	e7f3      	b.n	8008f38 <scalbnf+0x9c>
 8008f50:	3219      	adds	r2, #25
 8008f52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f56:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f5a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008f7c <scalbnf+0xe0>
 8008f5e:	ee07 3a10 	vmov	s14, r3
 8008f62:	e7c4      	b.n	8008eee <scalbnf+0x52>
 8008f64:	ffff3cb0 	.word	0xffff3cb0
 8008f68:	4c000000 	.word	0x4c000000
 8008f6c:	7149f2ca 	.word	0x7149f2ca
 8008f70:	f149f2ca 	.word	0xf149f2ca
 8008f74:	0da24260 	.word	0x0da24260
 8008f78:	8da24260 	.word	0x8da24260
 8008f7c:	33000000 	.word	0x33000000

08008f80 <_init>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr

08008f8c <_fini>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	bf00      	nop
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr
