
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005094  08005094  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800509c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000014  080050b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080050b0  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f90b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ce  00000000  00000000  0002f94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00032810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220b4  00000000  00000000  00033538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106f4  00000000  00000000  000555ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1b31  00000000  00000000  00065ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  00137864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004c70 	.word	0x08004c70

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08004c70 	.word	0x08004c70

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <generate_sin>:
void handle_command(char* command);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_sin(float ampl, float offset, float freq, float sample_rate) {
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d56:	ed87 1a01 	vstr	s2, [r7, #4]
 8000d5a:	edc7 1a00 	vstr	s3, [r7]
	float omega = 2.0f * M_PI * freq / sample_rate;
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fbb6 	bl	80004d0 <__aeabi_f2d>
 8000d64:	a331      	add	r3, pc, #196	; (adr r3, 8000e2c <generate_sin+0xe4>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	f7ff fc09 	bl	8000580 <__aeabi_dmul>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4614      	mov	r4, r2
 8000d74:	461d      	mov	r5, r3
 8000d76:	6838      	ldr	r0, [r7, #0]
 8000d78:	f7ff fbaa 	bl	80004d0 <__aeabi_f2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4620      	mov	r0, r4
 8000d82:	4629      	mov	r1, r5
 8000d84:	f7ff fd26 	bl	80007d4 <__aeabi_ddiv>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fe08 	bl	80009a4 <__aeabi_d2f>
 8000d94:	4603      	mov	r3, r0
 8000d96:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < SINE_SAMPLE_POINTS; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	e036      	b.n	8000e0c <generate_sin+0xc4>
		float value = offset + ampl * sinf(omega * i);
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db0:	eeb0 0a67 	vmov.f32	s0, s15
 8000db4:	f003 fa00 	bl	80041b8 <sinf>
 8000db8:	eeb0 7a40 	vmov.f32	s14, s0
 8000dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dcc:	edc7 7a05 	vstr	s15, [r7, #20]
		value = (value + ampl) / (2 * VREF);
 8000dd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ddc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000e20 <generate_sin+0xd8>
 8000de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de4:	edc7 7a05 	vstr	s15, [r7, #20]
		sine[i] = (uint16_t)(value * 4095);
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000e24 <generate_sin+0xdc>
 8000df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df8:	ee17 3a90 	vmov	r3, s15
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <generate_sin+0xe0>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SINE_SAMPLE_POINTS; i++) {
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	2bff      	cmp	r3, #255	; 0xff
 8000e10:	ddc5      	ble.n	8000d9e <generate_sin+0x56>
	}
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	40d33333 	.word	0x40d33333
 8000e24:	457ff000 	.word	0x457ff000
 8000e28:	200000d0 	.word	0x200000d0
 8000e2c:	54442d18 	.word	0x54442d18
 8000e30:	401921fb 	.word	0x401921fb

08000e34 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d115      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x3e>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine[sample_index]);
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e58:	f000 fdfb 	bl	8001a52 <HAL_DAC_SetValue>
		sample_index = (sample_index + 1) % SINE_SAMPLE_POINTS;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	425a      	negs	r2, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	bf58      	it	pl
 8000e6a:	4253      	negpl	r3, r2
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e70:	801a      	strh	r2, [r3, #0]
	}
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40001000 	.word	0x40001000
 8000e80:	200002d0 	.word	0x200002d0
 8000e84:	200000d0 	.word	0x200000d0
 8000e88:	20000030 	.word	0x20000030

08000e8c <handle_invalid_command>:


void handle_invalid_command() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)INVALID_COMMAND, strlen(INVALID_COMMAND));
 8000e90:	220f      	movs	r2, #15
 8000e92:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <handle_invalid_command+0x14>)
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <handle_invalid_command+0x18>)
 8000e96:	f002 f9e0 	bl	800325a <HAL_UART_Transmit_IT>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08004c88 	.word	0x08004c88
 8000ea4:	2000008c 	.word	0x2000008c

08000ea8 <handle_command>:


void handle_command(char* command) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if (command[0] == 'F' && command[4] == 'A') {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b46      	cmp	r3, #70	; 0x46
 8000eb6:	d15e      	bne.n	8000f76 <handle_command+0xce>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b41      	cmp	r3, #65	; 0x41
 8000ec0:	d159      	bne.n	8000f76 <handle_command+0xce>
		float f_val = (float)((command[1] - '0') * 100 + (command[2] - '0') * 10 + command[3] - '0');
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3b30      	subs	r3, #48	; 0x30
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	fb02 f103 	mul.w	r1, r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	440b      	add	r3, r1
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	3203      	adds	r2, #3
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	3b30      	subs	r3, #48	; 0x30
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef6:	edc7 7a02 	vstr	s15, [r7, #8]
		float a_val = command[5] - '0' + (command[7] - '0') * 0.1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3305      	adds	r3, #5
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3b30      	subs	r3, #48	; 0x30
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fad2 	bl	80004ac <__aeabi_i2d>
 8000f08:	4604      	mov	r4, r0
 8000f0a:	460d      	mov	r5, r1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3307      	adds	r3, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3b30      	subs	r3, #48	; 0x30
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fac9 	bl	80004ac <__aeabi_i2d>
 8000f1a:	a321      	add	r3, pc, #132	; (adr r3, 8000fa0 <handle_command+0xf8>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff fb2e 	bl	8000580 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff f972 	bl	8000214 <__adddf3>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd34 	bl	80009a4 <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60fb      	str	r3, [r7, #12]
		if (a_val > VREF) {
 8000f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f44:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f88 <handle_command+0xe0>
 8000f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	dd01      	ble.n	8000f56 <handle_command+0xae>
			a_val = VREF;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <handle_command+0xe4>)
 8000f54:	60fb      	str	r3, [r7, #12]
		}
		generate_sin(a_val, 0, f_val, SAMPLE_RATE);
 8000f56:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8000f90 <handle_command+0xe8>
 8000f5a:	ed97 1a02 	vldr	s2, [r7, #8]
 8000f5e:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8000f94 <handle_command+0xec>
 8000f62:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f66:	f7ff feef 	bl	8000d48 <generate_sin>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)SUCCESSFUL, strlen(SUCCESSFUL));
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	490a      	ldr	r1, [pc, #40]	; (8000f98 <handle_command+0xf0>)
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <handle_command+0xf4>)
 8000f70:	f002 f973 	bl	800325a <HAL_UART_Transmit_IT>
	if (command[0] == 'F' && command[4] == 'A') {
 8000f74:	e002      	b.n	8000f7c <handle_command+0xd4>
	} else {
		handle_invalid_command();
 8000f76:	f7ff ff89 	bl	8000e8c <handle_invalid_command>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	f3af 8000 	nop.w
 8000f88:	40533333 	.word	0x40533333
 8000f8c:	40533333 	.word	0x40533333
 8000f90:	447a0000 	.word	0x447a0000
 8000f94:	00000000 	.word	0x00000000
 8000f98:	08004c98 	.word	0x08004c98
 8000f9c:	2000008c 	.word	0x2000008c
 8000fa0:	9999999a 	.word	0x9999999a
 8000fa4:	3fb99999 	.word	0x3fb99999

08000fa8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_UART_RxCpltCallback+0x60>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d122      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x58>
		if (rxData[0] == START_SYMBOL && rxData[9] == END_SYMBOL) {
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_UART_RxCpltCallback+0x64>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b53      	cmp	r3, #83	; 0x53
 8000fc0:	d112      	bne.n	8000fe8 <HAL_UART_RxCpltCallback+0x40>
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_UART_RxCpltCallback+0x64>)
 8000fc4:	7a5b      	ldrb	r3, [r3, #9]
 8000fc6:	2b45      	cmp	r3, #69	; 0x45
 8000fc8:	d10e      	bne.n	8000fe8 <HAL_UART_RxCpltCallback+0x40>
			char command[COMMAND_SIZE + 1];
			strncpy(command, (char *)&rxData[1], COMMAND_SIZE);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2208      	movs	r2, #8
 8000fd0:	490f      	ldr	r1, [pc, #60]	; (8001010 <HAL_UART_RxCpltCallback+0x68>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f8dc 	bl	8004190 <strncpy>
			command[COMMAND_SIZE] = '\0';
 8000fd8:	2300      	movs	r3, #0
 8000fda:	753b      	strb	r3, [r7, #20]
			handle_command(command);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff61 	bl	8000ea8 <handle_command>
		if (rxData[0] == START_SYMBOL && rxData[9] == END_SYMBOL) {
 8000fe6:	e001      	b.n	8000fec <HAL_UART_RxCpltCallback+0x44>
		} else {
			handle_invalid_command();
 8000fe8:	f7ff ff50 	bl	8000e8c <handle_invalid_command>
		}
		memset(rxData, 0, sizeof(rxData));
 8000fec:	220a      	movs	r2, #10
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <HAL_UART_RxCpltCallback+0x64>)
 8000ff2:	f003 f8c5 	bl	8004180 <memset>
		HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000ff6:	220a      	movs	r2, #10
 8000ff8:	4904      	ldr	r1, [pc, #16]	; (800100c <HAL_UART_RxCpltCallback+0x64>)
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <HAL_UART_RxCpltCallback+0x6c>)
 8000ffc:	f002 f972 	bl	80032e4 <HAL_UART_Receive_IT>
	}
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40004400 	.word	0x40004400
 800100c:	200002d8 	.word	0x200002d8
 8001010:	200002d9 	.word	0x200002d9
 8001014:	2000008c 	.word	0x2000008c

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fac8 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f838 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f92c 	bl	8001280 <MX_GPIO_Init>
  MX_DAC_Init();
 8001028:	f000 f8a0 	bl	800116c <MX_DAC_Init>
  MX_TIM6_Init();
 800102c:	f000 f8c8 	bl	80011c0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001030:	f000 f8fc 	bl	800122c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  generate_sin(amplitude, offs, f, SAMPLE_RATE);
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <main+0x5c>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <main+0x60>)
 800103c:	ed93 7a00 	vldr	s14, [r3]
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <main+0x64>)
 8001042:	edd3 6a00 	vldr	s13, [r3]
 8001046:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001080 <main+0x68>
 800104a:	eeb0 1a66 	vmov.f32	s2, s13
 800104e:	eef0 0a47 	vmov.f32	s1, s14
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f7ff fe77 	bl	8000d48 <generate_sin>
  HAL_TIM_Base_Start_IT(&htim6);
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <main+0x6c>)
 800105c:	f001 fde0 	bl	8002c20 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8001060:	220a      	movs	r2, #10
 8001062:	4909      	ldr	r1, [pc, #36]	; (8001088 <main+0x70>)
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <main+0x74>)
 8001066:	f002 f93d 	bl	80032e4 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800106a:	2100      	movs	r1, #0
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <main+0x78>)
 800106e:	f000 fc44 	bl	80018fa <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001072:	e7fe      	b.n	8001072 <main+0x5a>
 8001074:	20000000 	.word	0x20000000
 8001078:	200002d4 	.word	0x200002d4
 800107c:	20000004 	.word	0x20000004
 8001080:	447a0000 	.word	0x447a0000
 8001084:	20000044 	.word	0x20000044
 8001088:	200002d8 	.word	0x200002d8
 800108c:	2000008c 	.word	0x2000008c
 8001090:	20000030 	.word	0x20000030

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	2234      	movs	r2, #52	; 0x34
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f86c 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0xd0>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a28      	ldr	r2, [pc, #160]	; (8001164 <SystemClock_Config+0xd0>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <SystemClock_Config+0xd0>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <SystemClock_Config+0xd4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <SystemClock_Config+0xd4>)
 80010de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <SystemClock_Config+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001104:	2304      	movs	r3, #4
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001108:	2396      	movs	r3, #150	; 0x96
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fa91 	bl	8002644 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001128:	f000 f8d2 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ff30 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001156:	f000 f8bb 	bl	80012d0 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_DAC_Init+0x4c>)
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <MX_DAC_Init+0x50>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_DAC_Init+0x4c>)
 8001182:	f000 fb98 	bl	80018b6 <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800118c:	f000 f8a0 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_DAC_Init+0x4c>)
 80011a0:	f000 fc86 	bl	8001ab0 <HAL_DAC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011aa:	f000 f891 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000030 	.word	0x20000030
 80011bc:	40007400 	.word	0x40007400

080011c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM6_Init+0x64>)
 80011d0:	4a15      	ldr	r2, [pc, #84]	; (8001228 <MX_TIM6_Init+0x68>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_TIM6_Init+0x64>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_TIM6_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_TIM6_Init+0x64>)
 80011e2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80011e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_TIM6_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM6_Init+0x64>)
 80011f0:	f001 fcc6 	bl	8002b80 <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011fa:	f000 f869 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM6_Init+0x64>)
 800120c:	f001 ff48 	bl	80030a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001216:	f000 f85b 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000044 	.word	0x20000044
 8001228:	40001000 	.word	0x40001000

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f001 ffac 	bl	80031c0 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f82f 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000008c 	.word	0x2000008c
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_GPIO_Init+0x4c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <MX_GPIO_Init+0x4c>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_GPIO_Init+0x4c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_GPIO_Init+0x4c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <MX_GPIO_Init+0x4c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_GPIO_Init+0x4c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <HAL_MspInit+0x4c>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_MspInit+0x4c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_MspInit+0x4c>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_DAC_MspInit+0x8c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12f      	bne.n	80013ae <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_DAC_MspInit+0x90>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_DAC_MspInit+0x90>)
 8001358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_DAC_MspInit+0x90>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_DAC_MspInit+0x90>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_DAC_MspInit+0x90>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_DAC_MspInit+0x90>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001386:	2310      	movs	r3, #16
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138a:	2303      	movs	r3, #3
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <HAL_DAC_MspInit+0x94>)
 800139a:	f000 fc75 	bl	8001c88 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2036      	movs	r0, #54	; 0x36
 80013a4:	f000 fa51 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013a8:	2036      	movs	r0, #54	; 0x36
 80013aa:	f000 fa6a 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40007400 	.word	0x40007400
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_TIM_Base_MspInit+0x48>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d115      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_TIM_Base_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_TIM_Base_MspInit+0x4c>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_TIM_Base_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2036      	movs	r0, #54	; 0x36
 80013f8:	f000 fa27 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013fc:	2036      	movs	r0, #54	; 0x36
 80013fe:	f000 fa40 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40001000 	.word	0x40001000
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_UART_MspInit+0x94>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d133      	bne.n	800149e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_UART_MspInit+0x98>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <HAL_UART_MspInit+0x98>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_UART_MspInit+0x98>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_UART_MspInit+0x98>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_UART_MspInit+0x98>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_UART_MspInit+0x98>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146e:	230c      	movs	r3, #12
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147e:	2307      	movs	r3, #7
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_UART_MspInit+0x9c>)
 800148a:	f000 fbfd 	bl	8001c88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2026      	movs	r0, #38	; 0x26
 8001494:	f000 f9d9 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001498:	2026      	movs	r0, #38	; 0x26
 800149a:	f000 f9f2 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40004400 	.word	0x40004400
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f8a8 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART2_IRQHandler+0x10>)
 800150e:	f001 ff19 	bl	8003344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000008c 	.word	0x2000008c

0800151c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <TIM6_DAC_IRQHandler+0x14>)
 8001522:	f000 fa3c 	bl	800199e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <TIM6_DAC_IRQHandler+0x18>)
 8001528:	f001 fbea 	bl	8002d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000030 	.word	0x20000030
 8001534:	20000044 	.word	0x20000044

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001586:	f7ff ffd7 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f002 fdd5 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff fd43 	bl	8001018 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80015a0:	0800509c 	.word	0x0800509c
  ldr r2, =_sbss
 80015a4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80015a8:	200002e8 	.word	0x200002e8

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f92b 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fe7a 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f943 	bl	800189e <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f90b 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000008 	.word	0x20000008
 800164c:	20000010 	.word	0x20000010
 8001650:	2000000c 	.word	0x2000000c

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000010 	.word	0x20000010
 8001678:	200002e4 	.word	0x200002e4

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200002e4 	.word	0x200002e4

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff3e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff31 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e014      	b.n	80018f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fd27 	bl	800132c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	795b      	ldrb	r3, [r3, #5]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_DAC_Start+0x16>
 800190c:	2302      	movs	r3, #2
 800190e:	e040      	b.n	8001992 <HAL_DAC_Start+0x98>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2201      	movs	r2, #1
 800192a:	409a      	lsls	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001944:	2b3c      	cmp	r3, #60	; 0x3c
 8001946:	d11d      	bne.n	8001984 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	e014      	b.n	8001984 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	213c      	movs	r1, #60	; 0x3c
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0202 	orr.w	r2, r2, #2
 8001982:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b4:	d120      	bne.n	80019f8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c4:	d118      	bne.n	80019f8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2204      	movs	r2, #4
 80019ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f852 	bl	8001a9c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a06:	d120      	bne.n	8001a4a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a16:	d118      	bne.n	8001a4a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a42:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f882 	bl	8001b4e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b087      	sub	sp, #28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	3308      	adds	r3, #8
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e004      	b.n	8001a86 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	3314      	adds	r3, #20
 8001a84:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DAC_ConfigChannel+0x18>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e03c      	b.n	8001b42 <HAL_DAC_ConfigChannel+0x92>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4013      	ands	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	22c0      	movs	r2, #192	; 0xc0
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fd84 	bl	800167c <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d008      	beq.n	8001b94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e052      	b.n	8001c3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0216 	bic.w	r2, r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <HAL_DMA_Abort+0x62>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0208 	bic.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e013      	b.n	8001c0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fd49 	bl	800167c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d90c      	bls.n	8001c0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e015      	b.n	8001c3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e4      	bne.n	8001be6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	223f      	movs	r2, #63	; 0x3f
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d004      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e00c      	b.n	8001c7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2205      	movs	r2, #5
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e165      	b.n	8001f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8154 	bne.w	8001f6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d005      	beq.n	8001cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d130      	bne.n	8001d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d017      	beq.n	8001d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d123      	bne.n	8001dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80ae 	beq.w	8001f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b5d      	ldr	r3, [pc, #372]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_GPIO_Init+0x308>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d025      	beq.n	8001ea2 <HAL_GPIO_Init+0x21a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <HAL_GPIO_Init+0x30c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01f      	beq.n	8001e9e <HAL_GPIO_Init+0x216>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4d      	ldr	r2, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x310>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x212>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4c      	ldr	r2, [pc, #304]	; (8001f9c <HAL_GPIO_Init+0x314>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x20e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_GPIO_Init+0x318>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x20a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_GPIO_Init+0x31c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x206>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x202>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e00c      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e00a      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e8e:	2305      	movs	r3, #5
 8001e90:	e008      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb4:	4935      	ldr	r1, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a31      	ldr	r2, [pc, #196]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f64:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f67f ae96 	bls.w	8001ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40021400 	.word	0x40021400
 8001fa8:	40021800 	.word	0x40021800
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b68      	ldr	r3, [pc, #416]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b65      	ldr	r3, [pc, #404]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7ff faec 	bl	800167c <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff fae8 	bl	800167c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f855 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fa4c 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	08004ca4 	.word	0x08004ca4
 8002174:	20000008 	.word	0x20000008
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_RCC_GetHCLKFreq+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008

08002194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002198:	f7ff fff0 	bl	800217c <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0a9b      	lsrs	r3, r3, #10
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4903      	ldr	r1, [pc, #12]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	08004cb4 	.word	0x08004cb4

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021c0:	f7ff ffdc 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0b5b      	lsrs	r3, r3, #13
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08004cb4 	.word	0x08004cb4

080021e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e8:	b0ae      	sub	sp, #184	; 0xb8
 80021ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220a:	4bcb      	ldr	r3, [pc, #812]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b0c      	cmp	r3, #12
 8002214:	f200 8206 	bhi.w	8002624 <HAL_RCC_GetSysClockFreq+0x440>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_RCC_GetSysClockFreq+0x3c>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002255 	.word	0x08002255
 8002224:	08002625 	.word	0x08002625
 8002228:	08002625 	.word	0x08002625
 800222c:	08002625 	.word	0x08002625
 8002230:	0800225d 	.word	0x0800225d
 8002234:	08002625 	.word	0x08002625
 8002238:	08002625 	.word	0x08002625
 800223c:	08002625 	.word	0x08002625
 8002240:	08002265 	.word	0x08002265
 8002244:	08002625 	.word	0x08002625
 8002248:	08002625 	.word	0x08002625
 800224c:	08002625 	.word	0x08002625
 8002250:	08002455 	.word	0x08002455
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4bb9      	ldr	r3, [pc, #740]	; (800253c <HAL_RCC_GetSysClockFreq+0x358>)
 8002256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800225a:	e1e7      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4bb8      	ldr	r3, [pc, #736]	; (8002540 <HAL_RCC_GetSysClockFreq+0x35c>)
 800225e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002262:	e1e3      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002264:	4bb4      	ldr	r3, [pc, #720]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800226c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002270:	4bb1      	ldr	r3, [pc, #708]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d071      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227c:	4bae      	ldr	r3, [pc, #696]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	2200      	movs	r2, #0
 8002284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002288:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800228c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800229e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	0159      	lsls	r1, r3, #5
 80022b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b4:	0150      	lsls	r0, r2, #5
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4621      	mov	r1, r4
 80022bc:	1a51      	subs	r1, r2, r1
 80022be:	6439      	str	r1, [r7, #64]	; 0x40
 80022c0:	4629      	mov	r1, r5
 80022c2:	eb63 0301 	sbc.w	r3, r3, r1
 80022c6:	647b      	str	r3, [r7, #68]	; 0x44
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80022d4:	4649      	mov	r1, r9
 80022d6:	018b      	lsls	r3, r1, #6
 80022d8:	4641      	mov	r1, r8
 80022da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022de:	4641      	mov	r1, r8
 80022e0:	018a      	lsls	r2, r1, #6
 80022e2:	4641      	mov	r1, r8
 80022e4:	1a51      	subs	r1, r2, r1
 80022e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80022e8:	4649      	mov	r1, r9
 80022ea:	eb63 0301 	sbc.w	r3, r3, r1
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80022fc:	4649      	mov	r1, r9
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	4641      	mov	r1, r8
 8002302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002306:	4641      	mov	r1, r8
 8002308:	00ca      	lsls	r2, r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4603      	mov	r3, r0
 8002310:	4622      	mov	r2, r4
 8002312:	189b      	adds	r3, r3, r2
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
 8002316:	462b      	mov	r3, r5
 8002318:	460a      	mov	r2, r1
 800231a:	eb42 0303 	adc.w	r3, r2, r3
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800232c:	4629      	mov	r1, r5
 800232e:	024b      	lsls	r3, r1, #9
 8002330:	4621      	mov	r1, r4
 8002332:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002336:	4621      	mov	r1, r4
 8002338:	024a      	lsls	r2, r1, #9
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002342:	2200      	movs	r2, #0
 8002344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002348:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800234c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002350:	f7fe fb78 	bl	8000a44 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800235e:	e067      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800236c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002370:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	67bb      	str	r3, [r7, #120]	; 0x78
 800237a:	2300      	movs	r3, #0
 800237c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800237e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002382:	4622      	mov	r2, r4
 8002384:	462b      	mov	r3, r5
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4621      	mov	r1, r4
 800239c:	1a51      	subs	r1, r2, r1
 800239e:	62b9      	str	r1, [r7, #40]	; 0x28
 80023a0:	4629      	mov	r1, r5
 80023a2:	eb63 0301 	sbc.w	r3, r3, r1
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80023b4:	4649      	mov	r1, r9
 80023b6:	018b      	lsls	r3, r1, #6
 80023b8:	4641      	mov	r1, r8
 80023ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023be:	4641      	mov	r1, r8
 80023c0:	018a      	lsls	r2, r1, #6
 80023c2:	4641      	mov	r1, r8
 80023c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80023c8:	4649      	mov	r1, r9
 80023ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e2:	4692      	mov	sl, r2
 80023e4:	469b      	mov	fp, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	eb1a 0303 	adds.w	r3, sl, r3
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	462b      	mov	r3, r5
 80023f0:	eb4b 0303 	adc.w	r3, fp, r3
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002402:	4629      	mov	r1, r5
 8002404:	028b      	lsls	r3, r1, #10
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800240c:	4621      	mov	r1, r4
 800240e:	028a      	lsls	r2, r1, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002418:	2200      	movs	r2, #0
 800241a:	673b      	str	r3, [r7, #112]	; 0x70
 800241c:	677a      	str	r2, [r7, #116]	; 0x74
 800241e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002422:	f7fe fb0f 	bl	8000a44 <__aeabi_uldivmod>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4613      	mov	r3, r2
 800242c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	3301      	adds	r3, #1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002452:	e0eb      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d06b      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HAL_RCC_GetSysClockFreq+0x354>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	66bb      	str	r3, [r7, #104]	; 0x68
 8002476:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	663b      	str	r3, [r7, #96]	; 0x60
 8002480:	2300      	movs	r3, #0
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
 8002484:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002488:	4622      	mov	r2, r4
 800248a:	462b      	mov	r3, r5
 800248c:	f04f 0000 	mov.w	r0, #0
 8002490:	f04f 0100 	mov.w	r1, #0
 8002494:	0159      	lsls	r1, r3, #5
 8002496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800249a:	0150      	lsls	r0, r2, #5
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4621      	mov	r1, r4
 80024a2:	1a51      	subs	r1, r2, r1
 80024a4:	61b9      	str	r1, [r7, #24]
 80024a6:	4629      	mov	r1, r5
 80024a8:	eb63 0301 	sbc.w	r3, r3, r1
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024ba:	4659      	mov	r1, fp
 80024bc:	018b      	lsls	r3, r1, #6
 80024be:	4651      	mov	r1, sl
 80024c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c4:	4651      	mov	r1, sl
 80024c6:	018a      	lsls	r2, r1, #6
 80024c8:	4651      	mov	r1, sl
 80024ca:	ebb2 0801 	subs.w	r8, r2, r1
 80024ce:	4659      	mov	r1, fp
 80024d0:	eb63 0901 	sbc.w	r9, r3, r1
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e8:	4690      	mov	r8, r2
 80024ea:	4699      	mov	r9, r3
 80024ec:	4623      	mov	r3, r4
 80024ee:	eb18 0303 	adds.w	r3, r8, r3
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	462b      	mov	r3, r5
 80024f6:	eb49 0303 	adc.w	r3, r9, r3
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002508:	4629      	mov	r1, r5
 800250a:	024b      	lsls	r3, r1, #9
 800250c:	4621      	mov	r1, r4
 800250e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002512:	4621      	mov	r1, r4
 8002514:	024a      	lsls	r2, r1, #9
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800251e:	2200      	movs	r2, #0
 8002520:	65bb      	str	r3, [r7, #88]	; 0x58
 8002522:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002524:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002528:	f7fe fa8c 	bl	8000a44 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4613      	mov	r3, r2
 8002532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002536:	e065      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x420>
 8002538:	40023800 	.word	0x40023800
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002544:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_GetSysClockFreq+0x458>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	2200      	movs	r2, #0
 800254c:	4618      	mov	r0, r3
 800254e:	4611      	mov	r1, r2
 8002550:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002554:	653b      	str	r3, [r7, #80]	; 0x50
 8002556:	2300      	movs	r3, #0
 8002558:	657b      	str	r3, [r7, #84]	; 0x54
 800255a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800255e:	4642      	mov	r2, r8
 8002560:	464b      	mov	r3, r9
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4641      	mov	r1, r8
 8002578:	1a51      	subs	r1, r2, r1
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	4649      	mov	r1, r9
 800257e:	eb63 0301 	sbc.w	r3, r3, r1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002590:	4659      	mov	r1, fp
 8002592:	018b      	lsls	r3, r1, #6
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259a:	4651      	mov	r1, sl
 800259c:	018a      	lsls	r2, r1, #6
 800259e:	4651      	mov	r1, sl
 80025a0:	1a54      	subs	r4, r2, r1
 80025a2:	4659      	mov	r1, fp
 80025a4:	eb63 0501 	sbc.w	r5, r3, r1
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	00eb      	lsls	r3, r5, #3
 80025b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025b6:	00e2      	lsls	r2, r4, #3
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4643      	mov	r3, r8
 80025be:	18e3      	adds	r3, r4, r3
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	464b      	mov	r3, r9
 80025c4:	eb45 0303 	adc.w	r3, r5, r3
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025d6:	4629      	mov	r1, r5
 80025d8:	028b      	lsls	r3, r1, #10
 80025da:	4621      	mov	r1, r4
 80025dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e0:	4621      	mov	r1, r4
 80025e2:	028a      	lsls	r2, r1, #10
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ec:	2200      	movs	r2, #0
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025f6:	f7fe fa25 	bl	8000a44 <__aeabi_uldivmod>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4613      	mov	r3, r2
 8002600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_RCC_GetSysClockFreq+0x458>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0f1b      	lsrs	r3, r3, #28
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002622:	e003      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800262a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002630:	4618      	mov	r0, r3
 8002632:	37b8      	adds	r7, #184	; 0xb8
 8002634:	46bd      	mov	sp, r7
 8002636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	00f42400 	.word	0x00f42400

08002644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e28d      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8083 	beq.w	800276a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002664:	4b94      	ldr	r3, [pc, #592]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b04      	cmp	r3, #4
 800266e:	d019      	beq.n	80026a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002670:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002678:	2b08      	cmp	r3, #8
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800267c:	4b8e      	ldr	r3, [pc, #568]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002688:	d00c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d112      	bne.n	80026bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b84      	ldr	r3, [pc, #528]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05b      	beq.n	8002768 <HAL_RCC_OscConfig+0x124>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d157      	bne.n	8002768 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e25a      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x90>
 80026c6:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7b      	ldr	r2, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xcc>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0xb4>
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a72      	ldr	r2, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xcc>
 80026f8:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6b      	ldr	r2, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe ffb0 	bl	800167c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe ffac 	bl	800167c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e21f      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xdc>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe ff9c 	bl	800167c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe ff98 	bl	800167c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e20b      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x104>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d06f      	beq.n	8002856 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002776:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d017      	beq.n	80027b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002782:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800278a:	2b08      	cmp	r3, #8
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d11c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x186>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1d3      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4937      	ldr	r1, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	e03a      	b.n	8002856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0x278>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe ff45 	bl	800167c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe ff41 	bl	800167c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1b4      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4925      	ldr	r1, [pc, #148]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_OscConfig+0x278>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe ff24 	bl	800167c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe ff20 	bl	800167c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e193      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d036      	beq.n	80028d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCC_OscConfig+0x27c>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe ff04 	bl	800167c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe ff00 	bl	800167c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e173      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x234>
 8002896:	e01b      	b.n	80028d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_OscConfig+0x27c>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe feed 	bl	800167c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	e00e      	b.n	80028c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe fee9 	bl	800167c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d907      	bls.n	80028c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e15c      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470000 	.word	0x42470000
 80028c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ea      	bne.n	80028a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8097 	beq.w	8002a0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b83      	ldr	r3, [pc, #524]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <HAL_RCC_OscConfig+0x4b0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d118      	bne.n	800294c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291a:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <HAL_RCC_OscConfig+0x4b0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a75      	ldr	r2, [pc, #468]	; (8002af4 <HAL_RCC_OscConfig+0x4b0>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7fe fea9 	bl	800167c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe fea5 	bl	800167c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e118      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <HAL_RCC_OscConfig+0x4b0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x31e>
 8002954:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x358>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x340>
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a5d      	ldr	r2, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x358>
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a59      	ldr	r2, [pc, #356]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a56      	ldr	r2, [pc, #344]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fe6a 	bl	800167c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fe66 	bl	800167c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0d7      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0ee      	beq.n	80029ac <HAL_RCC_OscConfig+0x368>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fe54 	bl	800167c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fe50 	bl	800167c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0c1      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ee:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ee      	bne.n	80029d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80ad 	beq.w	8002b70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a16:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d145      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_RCC_OscConfig+0x4b4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe24 	bl	800167c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fe20 	bl	800167c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e093      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	071b      	lsls	r3, r3, #28
 8002a82:	491b      	ldr	r1, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x4b4>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fdf5 	bl	800167c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe fdf1 	bl	800167c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e064      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x452>
 8002ab4:	e05c      	b.n	8002b70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCC_OscConfig+0x4b4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fdde 	bl	800167c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fdda 	bl	800167c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e04d      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x480>
 8002ae2:	e045      	b.n	8002b70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e040      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <HAL_RCC_OscConfig+0x538>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d030      	beq.n	8002b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d129      	bne.n	8002b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d122      	bne.n	8002b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d119      	bne.n	8002b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	3b01      	subs	r3, #1
 8002b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d10f      	bne.n	8002b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e041      	b.n	8002c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fc0c 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f000 f9ce 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d001      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e04e      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d01d      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d018      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_TIM_Base_Start_IT+0xcc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x80>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_Base_Start_IT+0xdc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d010      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	e007      	b.n	8002cd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40000c00 	.word	0x40000c00
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40001800 	.word	0x40001800

08002d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0202 	mvn.w	r2, #2
 8002d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8ee 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8e0 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8f1 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0204 	mvn.w	r2, #4
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8c4 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8b6 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f8c7 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0208 	mvn.w	r2, #8
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f89a 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f88c 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f89d 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0210 	mvn.w	r2, #16
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f870 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f862 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f873 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0201 	mvn.w	r2, #1
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd ffd8 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d10e      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d107      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f97e 	bl	80031ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d10e      	bne.n	8002edc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d107      	bne.n	8002edc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f838 	bl	8002f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0220 	mvn.w	r2, #32
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f948 	bl	8003198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <TIM_Base_SetConfig+0x114>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d00f      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <TIM_Base_SetConfig+0x118>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3c      	ldr	r2, [pc, #240]	; (800307c <TIM_Base_SetConfig+0x11c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <TIM_Base_SetConfig+0x120>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <TIM_Base_SetConfig+0x124>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <TIM_Base_SetConfig+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d027      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <TIM_Base_SetConfig+0x118>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d023      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	; (800307c <TIM_Base_SetConfig+0x11c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <TIM_Base_SetConfig+0x120>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01b      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a29      	ldr	r2, [pc, #164]	; (8003084 <TIM_Base_SetConfig+0x124>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d017      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	; (8003088 <TIM_Base_SetConfig+0x128>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a27      	ldr	r2, [pc, #156]	; (800308c <TIM_Base_SetConfig+0x12c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00f      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	; (8003090 <TIM_Base_SetConfig+0x130>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <TIM_Base_SetConfig+0x134>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <TIM_Base_SetConfig+0x138>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a23      	ldr	r2, [pc, #140]	; (800309c <TIM_Base_SetConfig+0x13c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <TIM_Base_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0xf8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <TIM_Base_SetConfig+0x124>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40010000 	.word	0x40010000
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800
 8003080:	40000c00 	.word	0x40000c00
 8003084:	40010400 	.word	0x40010400
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800
 8003094:	40001800 	.word	0x40001800
 8003098:	40001c00 	.word	0x40001c00
 800309c:	40002000 	.word	0x40002000

080030a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e05a      	b.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d01d      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10c      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40010400 	.word	0x40010400
 8003190:	40014000 	.word	0x40014000
 8003194:	40001800 	.word	0x40001800

08003198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e03f      	b.n	8003252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe f914 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	; 0x24
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fd23 	bl	8003c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	d130      	bne.n	80032d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Transmit_IT+0x26>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e029      	b.n	80032d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_UART_Transmit_IT+0x38>
 800328e:	2302      	movs	r3, #2
 8003290:	e022      	b.n	80032d8 <HAL_UART_Transmit_IT+0x7e>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2221      	movs	r2, #33	; 0x21
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d11d      	bne.n	800333a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_UART_Receive_IT+0x26>
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e016      	b.n	800333c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_UART_Receive_IT+0x38>
 8003318:	2302      	movs	r3, #2
 800331a:	e00f      	b.n	800333c <HAL_UART_Receive_IT+0x58>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	461a      	mov	r2, r3
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fab5 	bl	80038a0 <UART_Start_Receive_IT>
 8003336:	4603      	mov	r3, r0
 8003338:	e000      	b.n	800333c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b0ba      	sub	sp, #232	; 0xe8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0x66>
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fb99 	bl	8003ada <UART_Receive_IT>
      return;
 80033a8:	e256      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80de 	beq.w	8003570 <HAL_UART_IRQHandler+0x22c>
 80033b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80d1 	beq.w	8003570 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_UART_IRQHandler+0xae>
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_UART_IRQHandler+0xd2>
 80033fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xf6>
 8003422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0204 	orr.w	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d011      	beq.n	800346a <HAL_UART_IRQHandler+0x126>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0208 	orr.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 81ed 	beq.w	800384e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x14e>
 8003480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb24 	bl	8003ada <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_UART_IRQHandler+0x17a>
 80034b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04f      	beq.n	800355e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa2c 	bl	800391c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d141      	bne.n	8003556 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800350a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1d9      	bne.n	80034d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	4a7d      	ldr	r2, [pc, #500]	; (8003720 <HAL_UART_IRQHandler+0x3dc>)
 800352c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fb85 	bl	8001c42 <HAL_DMA_Abort_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003548:	4610      	mov	r0, r2
 800354a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00e      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f990 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e00a      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f98c 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e006      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f988 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800356a:	e170      	b.n	800384e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	bf00      	nop
    return;
 800356e:	e16e      	b.n	800384e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 814a 	bne.w	800380e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8143 	beq.w	800380e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 813c 	beq.w	800380e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	f040 80b4 	bne.w	8003724 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8140 	beq.w	8003852 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035da:	429a      	cmp	r2, r3
 80035dc:	f080 8139 	bcs.w	8003852 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f2:	f000 8088 	beq.w	8003706 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800360c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800362e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800363a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d9      	bne.n	80035f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3314      	adds	r3, #20
 8003648:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003666:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800366a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800366e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e1      	bne.n	8003642 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80036ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e3      	bne.n	80036c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fa2e 	bl	8001b62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370e:	b29b      	uxth	r3, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f8b6 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371c:	e099      	b.n	8003852 <HAL_UART_IRQHandler+0x50e>
 800371e:	bf00      	nop
 8003720:	080039e3 	.word	0x080039e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 808b 	beq.w	8003856 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8086 	beq.w	8003856 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800375a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800376e:	647a      	str	r2, [r7, #68]	; 0x44
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e3      	bne.n	800374a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	623b      	str	r3, [r7, #32]
   return(result);
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037a6:	633a      	str	r2, [r7, #48]	; 0x30
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e3      	bne.n	8003782 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0310 	bic.w	r3, r3, #16
 80037de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037ec:	61fa      	str	r2, [r7, #28]
 80037ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	617b      	str	r3, [r7, #20]
   return(result);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e3      	bne.n	80037c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f83e 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380c:	e023      	b.n	8003856 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_UART_IRQHandler+0x4ea>
 800381a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8ef 	bl	8003a0a <UART_Transmit_IT>
    return;
 800382c:	e014      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00e      	beq.n	8003858 <HAL_UART_IRQHandler+0x514>
 800383a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f92f 	bl	8003aaa <UART_EndTransmit_IT>
    return;
 800384c:	e004      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
    return;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
      return;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
      return;
 8003856:	bf00      	nop
  }
}
 8003858:	37e8      	adds	r7, #232	; 0xe8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop

08003860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	88fa      	ldrh	r2, [r7, #6]
 80038be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2222      	movs	r2, #34	; 0x22
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b095      	sub	sp, #84	; 0x54
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003944:	643a      	str	r2, [r7, #64]	; 0x40
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800394a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	61fb      	str	r3, [r7, #28]
   return(result);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d119      	bne.n	80039c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b4:	61ba      	str	r2, [r7, #24]
 80039b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6979      	ldr	r1, [r7, #20]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	613b      	str	r3, [r7, #16]
   return(result);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039d6:	bf00      	nop
 80039d8:	3754      	adds	r7, #84	; 0x54
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff ff39 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b21      	cmp	r3, #33	; 0x21
 8003a1c:	d13e      	bne.n	8003a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a26:	d114      	bne.n	8003a52 <UART_Transmit_IT+0x48>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d110      	bne.n	8003a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	1c9a      	adds	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]
 8003a50:	e008      	b.n	8003a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6211      	str	r1, [r2, #32]
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4619      	mov	r1, r3
 8003a72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fec8 	bl	8003860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b08c      	sub	sp, #48	; 0x30
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b22      	cmp	r3, #34	; 0x22
 8003aec:	f040 80ab 	bne.w	8003c46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d117      	bne.n	8003b2a <UART_Receive_IT+0x50>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	1c9a      	adds	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28
 8003b28:	e026      	b.n	8003b78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3c:	d007      	beq.n	8003b4e <UART_Receive_IT+0x74>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <UART_Receive_IT+0x82>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e008      	b.n	8003b6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4619      	mov	r1, r3
 8003b86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d15a      	bne.n	8003c42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0220 	bic.w	r2, r2, #32
 8003b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d135      	bne.n	8003c38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	613b      	str	r3, [r7, #16]
   return(result);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f023 0310 	bic.w	r3, r3, #16
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	623a      	str	r2, [r7, #32]
 8003bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	69f9      	ldr	r1, [r7, #28]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d10a      	bne.n	8003c2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe29 	bl	8003888 <HAL_UARTEx_RxEventCallback>
 8003c36:	e002      	b.n	8003c3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fd f9b5 	bl	8000fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e002      	b.n	8003c48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3730      	adds	r7, #48	; 0x30
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	b0c0      	sub	sp, #256	; 0x100
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	68d9      	ldr	r1, [r3, #12]
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	ea40 0301 	orr.w	r3, r0, r1
 8003c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca8:	f021 010c 	bic.w	r1, r1, #12
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	6999      	ldr	r1, [r3, #24]
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	ea40 0301 	orr.w	r3, r0, r1
 8003cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b8f      	ldr	r3, [pc, #572]	; (8003f1c <UART_SetConfig+0x2cc>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d005      	beq.n	8003cf0 <UART_SetConfig+0xa0>
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b8d      	ldr	r3, [pc, #564]	; (8003f20 <UART_SetConfig+0x2d0>)
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d104      	bne.n	8003cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7fe fa64 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8003cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf8:	e003      	b.n	8003d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cfa:	f7fe fa4b 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0c:	f040 810c 	bne.w	8003f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d22:	4622      	mov	r2, r4
 8003d24:	462b      	mov	r3, r5
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d32:	4621      	mov	r1, r4
 8003d34:	eb12 0801 	adds.w	r8, r2, r1
 8003d38:	4629      	mov	r1, r5
 8003d3a:	eb43 0901 	adc.w	r9, r3, r1
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d52:	4690      	mov	r8, r2
 8003d54:	4699      	mov	r9, r3
 8003d56:	4623      	mov	r3, r4
 8003d58:	eb18 0303 	adds.w	r3, r8, r3
 8003d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d60:	462b      	mov	r3, r5
 8003d62:	eb49 0303 	adc.w	r3, r9, r3
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d7e:	460b      	mov	r3, r1
 8003d80:	18db      	adds	r3, r3, r3
 8003d82:	653b      	str	r3, [r7, #80]	; 0x50
 8003d84:	4613      	mov	r3, r2
 8003d86:	eb42 0303 	adc.w	r3, r2, r3
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d94:	f7fc fe56 	bl	8000a44 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	011c      	lsls	r4, r3, #4
 8003da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc8:	4641      	mov	r1, r8
 8003dca:	eb12 0a01 	adds.w	sl, r2, r1
 8003dce:	4649      	mov	r1, r9
 8003dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de8:	4692      	mov	sl, r2
 8003dea:	469b      	mov	fp, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	eb1a 0303 	adds.w	r3, sl, r3
 8003df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003df6:	464b      	mov	r3, r9
 8003df8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e14:	460b      	mov	r3, r1
 8003e16:	18db      	adds	r3, r3, r3
 8003e18:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	647b      	str	r3, [r7, #68]	; 0x44
 8003e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e2a:	f7fc fe0b 	bl	8000a44 <__aeabi_uldivmod>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003e36:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	1acb      	subs	r3, r1, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e58:	441c      	add	r4, r3
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e74:	415b      	adcs	r3, r3
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	1851      	adds	r1, r2, r1
 8003e80:	6339      	str	r1, [r7, #48]	; 0x30
 8003e82:	4649      	mov	r1, r9
 8003e84:	414b      	adcs	r3, r1
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e94:	4659      	mov	r1, fp
 8003e96:	00cb      	lsls	r3, r1, #3
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	00ca      	lsls	r2, r1, #3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	18db      	adds	r3, r3, r3
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ee6:	f7fc fdad 	bl	8000a44 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	2164      	movs	r1, #100	; 0x64
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	3332      	adds	r3, #50	; 0x32
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	f003 0207 	and.w	r2, r3, #7
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4422      	add	r2, r4
 8003f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f18:	e105      	b.n	8004126 <UART_SetConfig+0x4d6>
 8003f1a:	bf00      	nop
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	1891      	adds	r1, r2, r2
 8003f40:	6239      	str	r1, [r7, #32]
 8003f42:	415b      	adcs	r3, r3
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
 8003f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	1854      	adds	r4, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb43 0501 	adc.w	r5, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	00eb      	lsls	r3, r5, #3
 8003f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f62:	00e2      	lsls	r2, r4, #3
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	18e3      	adds	r3, r4, r3
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f70:	464b      	mov	r3, r9
 8003f72:	eb45 0303 	adc.w	r3, r5, r3
 8003f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f96:	4629      	mov	r1, r5
 8003f98:	008b      	lsls	r3, r1, #2
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	008a      	lsls	r2, r1, #2
 8003fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa8:	f7fc fd4c 	bl	8000a44 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b60      	ldr	r3, [pc, #384]	; (8004134 <UART_SetConfig+0x4e4>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	011c      	lsls	r4, r3, #4
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	61b9      	str	r1, [r7, #24]
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fdc:	4641      	mov	r1, r8
 8003fde:	1851      	adds	r1, r2, r1
 8003fe0:	6139      	str	r1, [r7, #16]
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4651      	mov	r1, sl
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4642      	mov	r2, r8
 800400a:	189b      	adds	r3, r3, r2
 800400c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004010:	464b      	mov	r3, r9
 8004012:	460a      	mov	r2, r1
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	67bb      	str	r3, [r7, #120]	; 0x78
 8004026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004034:	4649      	mov	r1, r9
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	4641      	mov	r1, r8
 800403a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403e:	4641      	mov	r1, r8
 8004040:	008a      	lsls	r2, r1, #2
 8004042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004046:	f7fc fcfd 	bl	8000a44 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <UART_SetConfig+0x4e4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	; 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	3332      	adds	r3, #50	; 0x32
 8004062:	4a34      	ldr	r2, [pc, #208]	; (8004134 <UART_SetConfig+0x4e4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406e:	441c      	add	r4, r3
 8004070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004074:	2200      	movs	r2, #0
 8004076:	673b      	str	r3, [r7, #112]	; 0x70
 8004078:	677a      	str	r2, [r7, #116]	; 0x74
 800407a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800407e:	4642      	mov	r2, r8
 8004080:	464b      	mov	r3, r9
 8004082:	1891      	adds	r1, r2, r2
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	415b      	adcs	r3, r3
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800408e:	4641      	mov	r1, r8
 8004090:	1851      	adds	r1, r2, r1
 8004092:	6039      	str	r1, [r7, #0]
 8004094:	4649      	mov	r1, r9
 8004096:	414b      	adcs	r3, r1
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a6:	4659      	mov	r1, fp
 80040a8:	00cb      	lsls	r3, r1, #3
 80040aa:	4651      	mov	r1, sl
 80040ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b0:	4651      	mov	r1, sl
 80040b2:	00ca      	lsls	r2, r1, #3
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	4603      	mov	r3, r0
 80040ba:	4642      	mov	r2, r8
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	66bb      	str	r3, [r7, #104]	; 0x68
 80040c0:	464b      	mov	r3, r9
 80040c2:	460a      	mov	r2, r1
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	663b      	str	r3, [r7, #96]	; 0x60
 80040d4:	667a      	str	r2, [r7, #100]	; 0x64
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040e2:	4649      	mov	r1, r9
 80040e4:	008b      	lsls	r3, r1, #2
 80040e6:	4641      	mov	r1, r8
 80040e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ec:	4641      	mov	r1, r8
 80040ee:	008a      	lsls	r2, r1, #2
 80040f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040f4:	f7fc fca6 	bl	8000a44 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <UART_SetConfig+0x4e4>)
 80040fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2164      	movs	r1, #100	; 0x64
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	3332      	adds	r3, #50	; 0x32
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <UART_SetConfig+0x4e4>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4422      	add	r2, r4
 8004124:	609a      	str	r2, [r3, #8]
}
 8004126:	bf00      	nop
 8004128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	51eb851f 	.word	0x51eb851f

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4d0d      	ldr	r5, [pc, #52]	; (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	; (8004174 <__libc_init_array+0x3c>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2600      	movs	r6, #0
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4d0b      	ldr	r5, [pc, #44]	; (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	; (800417c <__libc_init_array+0x44>)
 800414c:	f000 fd90 	bl	8004c70 <_init>
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2600      	movs	r6, #0
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f855 3b04 	ldr.w	r3, [r5], #4
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	08005094 	.word	0x08005094
 8004174:	08005094 	.word	0x08005094
 8004178:	08005094 	.word	0x08005094
 800417c:	08005098 	.word	0x08005098

08004180 <memset>:
 8004180:	4402      	add	r2, r0
 8004182:	4603      	mov	r3, r0
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	f803 1b01 	strb.w	r1, [r3], #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <strncpy>:
 8004190:	b510      	push	{r4, lr}
 8004192:	3901      	subs	r1, #1
 8004194:	4603      	mov	r3, r0
 8004196:	b132      	cbz	r2, 80041a6 <strncpy+0x16>
 8004198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800419c:	f803 4b01 	strb.w	r4, [r3], #1
 80041a0:	3a01      	subs	r2, #1
 80041a2:	2c00      	cmp	r4, #0
 80041a4:	d1f7      	bne.n	8004196 <strncpy+0x6>
 80041a6:	441a      	add	r2, r3
 80041a8:	2100      	movs	r1, #0
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d100      	bne.n	80041b0 <strncpy+0x20>
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	f803 1b01 	strb.w	r1, [r3], #1
 80041b4:	e7f9      	b.n	80041aa <strncpy+0x1a>
	...

080041b8 <sinf>:
 80041b8:	ee10 3a10 	vmov	r3, s0
 80041bc:	b507      	push	{r0, r1, r2, lr}
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <sinf+0x84>)
 80041c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041c4:	4293      	cmp	r3, r2
 80041c6:	dc07      	bgt.n	80041d8 <sinf+0x20>
 80041c8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004240 <sinf+0x88>
 80041cc:	2000      	movs	r0, #0
 80041ce:	b003      	add	sp, #12
 80041d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d4:	f000 bc48 	b.w	8004a68 <__kernel_sinf>
 80041d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80041dc:	db04      	blt.n	80041e8 <sinf+0x30>
 80041de:	ee30 0a40 	vsub.f32	s0, s0, s0
 80041e2:	b003      	add	sp, #12
 80041e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80041e8:	4668      	mov	r0, sp
 80041ea:	f000 f82b 	bl	8004244 <__ieee754_rem_pio2f>
 80041ee:	f000 0003 	and.w	r0, r0, #3
 80041f2:	2801      	cmp	r0, #1
 80041f4:	d00a      	beq.n	800420c <sinf+0x54>
 80041f6:	2802      	cmp	r0, #2
 80041f8:	d00f      	beq.n	800421a <sinf+0x62>
 80041fa:	b9c0      	cbnz	r0, 800422e <sinf+0x76>
 80041fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8004200:	ed9d 0a00 	vldr	s0, [sp]
 8004204:	2001      	movs	r0, #1
 8004206:	f000 fc2f 	bl	8004a68 <__kernel_sinf>
 800420a:	e7ea      	b.n	80041e2 <sinf+0x2a>
 800420c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004210:	ed9d 0a00 	vldr	s0, [sp]
 8004214:	f000 f952 	bl	80044bc <__kernel_cosf>
 8004218:	e7e3      	b.n	80041e2 <sinf+0x2a>
 800421a:	eddd 0a01 	vldr	s1, [sp, #4]
 800421e:	ed9d 0a00 	vldr	s0, [sp]
 8004222:	2001      	movs	r0, #1
 8004224:	f000 fc20 	bl	8004a68 <__kernel_sinf>
 8004228:	eeb1 0a40 	vneg.f32	s0, s0
 800422c:	e7d9      	b.n	80041e2 <sinf+0x2a>
 800422e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004232:	ed9d 0a00 	vldr	s0, [sp]
 8004236:	f000 f941 	bl	80044bc <__kernel_cosf>
 800423a:	e7f5      	b.n	8004228 <sinf+0x70>
 800423c:	3f490fd8 	.word	0x3f490fd8
 8004240:	00000000 	.word	0x00000000

08004244 <__ieee754_rem_pio2f>:
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	ee10 6a10 	vmov	r6, s0
 800424a:	4b8e      	ldr	r3, [pc, #568]	; (8004484 <__ieee754_rem_pio2f+0x240>)
 800424c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004250:	429d      	cmp	r5, r3
 8004252:	b087      	sub	sp, #28
 8004254:	eef0 7a40 	vmov.f32	s15, s0
 8004258:	4604      	mov	r4, r0
 800425a:	dc05      	bgt.n	8004268 <__ieee754_rem_pio2f+0x24>
 800425c:	2300      	movs	r3, #0
 800425e:	ed80 0a00 	vstr	s0, [r0]
 8004262:	6043      	str	r3, [r0, #4]
 8004264:	2000      	movs	r0, #0
 8004266:	e01a      	b.n	800429e <__ieee754_rem_pio2f+0x5a>
 8004268:	4b87      	ldr	r3, [pc, #540]	; (8004488 <__ieee754_rem_pio2f+0x244>)
 800426a:	429d      	cmp	r5, r3
 800426c:	dc46      	bgt.n	80042fc <__ieee754_rem_pio2f+0xb8>
 800426e:	2e00      	cmp	r6, #0
 8004270:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800448c <__ieee754_rem_pio2f+0x248>
 8004274:	4b86      	ldr	r3, [pc, #536]	; (8004490 <__ieee754_rem_pio2f+0x24c>)
 8004276:	f025 050f 	bic.w	r5, r5, #15
 800427a:	dd1f      	ble.n	80042bc <__ieee754_rem_pio2f+0x78>
 800427c:	429d      	cmp	r5, r3
 800427e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004282:	d00e      	beq.n	80042a2 <__ieee754_rem_pio2f+0x5e>
 8004284:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004494 <__ieee754_rem_pio2f+0x250>
 8004288:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800428c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004290:	ed80 0a00 	vstr	s0, [r0]
 8004294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004298:	2001      	movs	r0, #1
 800429a:	edc4 7a01 	vstr	s15, [r4, #4]
 800429e:	b007      	add	sp, #28
 80042a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004498 <__ieee754_rem_pio2f+0x254>
 80042a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800449c <__ieee754_rem_pio2f+0x258>
 80042aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80042ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80042b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042b6:	edc0 6a00 	vstr	s13, [r0]
 80042ba:	e7eb      	b.n	8004294 <__ieee754_rem_pio2f+0x50>
 80042bc:	429d      	cmp	r5, r3
 80042be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80042c2:	d00e      	beq.n	80042e2 <__ieee754_rem_pio2f+0x9e>
 80042c4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004494 <__ieee754_rem_pio2f+0x250>
 80042c8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80042cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80042d0:	ed80 0a00 	vstr	s0, [r0]
 80042d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80042e0:	e7dd      	b.n	800429e <__ieee754_rem_pio2f+0x5a>
 80042e2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004498 <__ieee754_rem_pio2f+0x254>
 80042e6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800449c <__ieee754_rem_pio2f+0x258>
 80042ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80042ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80042f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042f6:	edc0 6a00 	vstr	s13, [r0]
 80042fa:	e7eb      	b.n	80042d4 <__ieee754_rem_pio2f+0x90>
 80042fc:	4b68      	ldr	r3, [pc, #416]	; (80044a0 <__ieee754_rem_pio2f+0x25c>)
 80042fe:	429d      	cmp	r5, r3
 8004300:	dc72      	bgt.n	80043e8 <__ieee754_rem_pio2f+0x1a4>
 8004302:	f000 fbf9 	bl	8004af8 <fabsf>
 8004306:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80044a4 <__ieee754_rem_pio2f+0x260>
 800430a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800430e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800431a:	ee17 0a90 	vmov	r0, s15
 800431e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800448c <__ieee754_rem_pio2f+0x248>
 8004322:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004326:	281f      	cmp	r0, #31
 8004328:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004494 <__ieee754_rem_pio2f+0x250>
 800432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004330:	eeb1 6a47 	vneg.f32	s12, s14
 8004334:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004338:	ee16 2a90 	vmov	r2, s13
 800433c:	dc1c      	bgt.n	8004378 <__ieee754_rem_pio2f+0x134>
 800433e:	495a      	ldr	r1, [pc, #360]	; (80044a8 <__ieee754_rem_pio2f+0x264>)
 8004340:	1e47      	subs	r7, r0, #1
 8004342:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004346:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800434a:	428b      	cmp	r3, r1
 800434c:	d014      	beq.n	8004378 <__ieee754_rem_pio2f+0x134>
 800434e:	6022      	str	r2, [r4, #0]
 8004350:	ed94 7a00 	vldr	s14, [r4]
 8004354:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004358:	2e00      	cmp	r6, #0
 800435a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800435e:	ed84 0a01 	vstr	s0, [r4, #4]
 8004362:	da9c      	bge.n	800429e <__ieee754_rem_pio2f+0x5a>
 8004364:	eeb1 7a47 	vneg.f32	s14, s14
 8004368:	eeb1 0a40 	vneg.f32	s0, s0
 800436c:	ed84 7a00 	vstr	s14, [r4]
 8004370:	ed84 0a01 	vstr	s0, [r4, #4]
 8004374:	4240      	negs	r0, r0
 8004376:	e792      	b.n	800429e <__ieee754_rem_pio2f+0x5a>
 8004378:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800437c:	15eb      	asrs	r3, r5, #23
 800437e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8004382:	2d08      	cmp	r5, #8
 8004384:	dde3      	ble.n	800434e <__ieee754_rem_pio2f+0x10a>
 8004386:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004498 <__ieee754_rem_pio2f+0x254>
 800438a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800449c <__ieee754_rem_pio2f+0x258>
 800438e:	eef0 6a40 	vmov.f32	s13, s0
 8004392:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004396:	ee30 0a66 	vsub.f32	s0, s0, s13
 800439a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800439e:	eef0 7a40 	vmov.f32	s15, s0
 80043a2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80043a6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80043aa:	ee15 2a90 	vmov	r2, s11
 80043ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80043b2:	1a5b      	subs	r3, r3, r1
 80043b4:	2b19      	cmp	r3, #25
 80043b6:	dc04      	bgt.n	80043c2 <__ieee754_rem_pio2f+0x17e>
 80043b8:	edc4 5a00 	vstr	s11, [r4]
 80043bc:	eeb0 0a66 	vmov.f32	s0, s13
 80043c0:	e7c6      	b.n	8004350 <__ieee754_rem_pio2f+0x10c>
 80043c2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80044ac <__ieee754_rem_pio2f+0x268>
 80043c6:	eeb0 0a66 	vmov.f32	s0, s13
 80043ca:	eea6 0a25 	vfma.f32	s0, s12, s11
 80043ce:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80043d2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80044b0 <__ieee754_rem_pio2f+0x26c>
 80043d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80043da:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80043de:	ee30 7a67 	vsub.f32	s14, s0, s15
 80043e2:	ed84 7a00 	vstr	s14, [r4]
 80043e6:	e7b3      	b.n	8004350 <__ieee754_rem_pio2f+0x10c>
 80043e8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80043ec:	db06      	blt.n	80043fc <__ieee754_rem_pio2f+0x1b8>
 80043ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80043f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80043f6:	edc0 7a00 	vstr	s15, [r0]
 80043fa:	e733      	b.n	8004264 <__ieee754_rem_pio2f+0x20>
 80043fc:	15ea      	asrs	r2, r5, #23
 80043fe:	3a86      	subs	r2, #134	; 0x86
 8004400:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004404:	ee07 3a90 	vmov	s15, r3
 8004408:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800440c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80044b4 <__ieee754_rem_pio2f+0x270>
 8004410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004418:	ed8d 7a03 	vstr	s14, [sp, #12]
 800441c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004420:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800442c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004434:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	edcd 7a05 	vstr	s15, [sp, #20]
 8004440:	d11e      	bne.n	8004480 <__ieee754_rem_pio2f+0x23c>
 8004442:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	bf14      	ite	ne
 800444c:	2302      	movne	r3, #2
 800444e:	2301      	moveq	r3, #1
 8004450:	4919      	ldr	r1, [pc, #100]	; (80044b8 <__ieee754_rem_pio2f+0x274>)
 8004452:	9101      	str	r1, [sp, #4]
 8004454:	2102      	movs	r1, #2
 8004456:	9100      	str	r1, [sp, #0]
 8004458:	a803      	add	r0, sp, #12
 800445a:	4621      	mov	r1, r4
 800445c:	f000 f88e 	bl	800457c <__kernel_rem_pio2f>
 8004460:	2e00      	cmp	r6, #0
 8004462:	f6bf af1c 	bge.w	800429e <__ieee754_rem_pio2f+0x5a>
 8004466:	edd4 7a00 	vldr	s15, [r4]
 800446a:	eef1 7a67 	vneg.f32	s15, s15
 800446e:	edc4 7a00 	vstr	s15, [r4]
 8004472:	edd4 7a01 	vldr	s15, [r4, #4]
 8004476:	eef1 7a67 	vneg.f32	s15, s15
 800447a:	edc4 7a01 	vstr	s15, [r4, #4]
 800447e:	e779      	b.n	8004374 <__ieee754_rem_pio2f+0x130>
 8004480:	2303      	movs	r3, #3
 8004482:	e7e5      	b.n	8004450 <__ieee754_rem_pio2f+0x20c>
 8004484:	3f490fd8 	.word	0x3f490fd8
 8004488:	4016cbe3 	.word	0x4016cbe3
 800448c:	3fc90f80 	.word	0x3fc90f80
 8004490:	3fc90fd0 	.word	0x3fc90fd0
 8004494:	37354443 	.word	0x37354443
 8004498:	37354400 	.word	0x37354400
 800449c:	2e85a308 	.word	0x2e85a308
 80044a0:	43490f80 	.word	0x43490f80
 80044a4:	3f22f984 	.word	0x3f22f984
 80044a8:	08004cbc 	.word	0x08004cbc
 80044ac:	2e85a300 	.word	0x2e85a300
 80044b0:	248d3132 	.word	0x248d3132
 80044b4:	43800000 	.word	0x43800000
 80044b8:	08004d3c 	.word	0x08004d3c

080044bc <__kernel_cosf>:
 80044bc:	ee10 3a10 	vmov	r3, s0
 80044c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80044c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80044cc:	da05      	bge.n	80044da <__kernel_cosf+0x1e>
 80044ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80044d2:	ee17 2a90 	vmov	r2, s15
 80044d6:	2a00      	cmp	r2, #0
 80044d8:	d03d      	beq.n	8004556 <__kernel_cosf+0x9a>
 80044da:	ee60 5a00 	vmul.f32	s11, s0, s0
 80044de:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800455c <__kernel_cosf+0xa0>
 80044e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004560 <__kernel_cosf+0xa4>
 80044e6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004564 <__kernel_cosf+0xa8>
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <__kernel_cosf+0xac>)
 80044ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80044f0:	4293      	cmp	r3, r2
 80044f2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800456c <__kernel_cosf+0xb0>
 80044f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80044fa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004570 <__kernel_cosf+0xb4>
 80044fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004502:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004574 <__kernel_cosf+0xb8>
 8004506:	eee7 7a25 	vfma.f32	s15, s14, s11
 800450a:	eeb0 7a66 	vmov.f32	s14, s13
 800450e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004512:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004516:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800451a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800451e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004522:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004526:	dc04      	bgt.n	8004532 <__kernel_cosf+0x76>
 8004528:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800452c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004530:	4770      	bx	lr
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <__kernel_cosf+0xbc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bfda      	itte	le
 8004538:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800453c:	ee06 3a90 	vmovle	s13, r3
 8004540:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004544:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004548:	ee36 0a66 	vsub.f32	s0, s12, s13
 800454c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004550:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004554:	4770      	bx	lr
 8004556:	eeb0 0a46 	vmov.f32	s0, s12
 800455a:	4770      	bx	lr
 800455c:	ad47d74e 	.word	0xad47d74e
 8004560:	310f74f6 	.word	0x310f74f6
 8004564:	3d2aaaab 	.word	0x3d2aaaab
 8004568:	3e999999 	.word	0x3e999999
 800456c:	b493f27c 	.word	0xb493f27c
 8004570:	37d00d01 	.word	0x37d00d01
 8004574:	bab60b61 	.word	0xbab60b61
 8004578:	3f480000 	.word	0x3f480000

0800457c <__kernel_rem_pio2f>:
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004580:	ed2d 8b04 	vpush	{d8-d9}
 8004584:	b0d9      	sub	sp, #356	; 0x164
 8004586:	4688      	mov	r8, r1
 8004588:	9002      	str	r0, [sp, #8]
 800458a:	49bb      	ldr	r1, [pc, #748]	; (8004878 <__kernel_rem_pio2f+0x2fc>)
 800458c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004594:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004598:	1e59      	subs	r1, r3, #1
 800459a:	1d13      	adds	r3, r2, #4
 800459c:	db27      	blt.n	80045ee <__kernel_rem_pio2f+0x72>
 800459e:	f1b2 0b03 	subs.w	fp, r2, #3
 80045a2:	bf48      	it	mi
 80045a4:	f102 0b04 	addmi.w	fp, r2, #4
 80045a8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80045ac:	1c45      	adds	r5, r0, #1
 80045ae:	00ec      	lsls	r4, r5, #3
 80045b0:	1a47      	subs	r7, r0, r1
 80045b2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004888 <__kernel_rem_pio2f+0x30c>
 80045b6:	9403      	str	r4, [sp, #12]
 80045b8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80045bc:	eb0a 0c01 	add.w	ip, sl, r1
 80045c0:	ae1c      	add	r6, sp, #112	; 0x70
 80045c2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80045c6:	2400      	movs	r4, #0
 80045c8:	4564      	cmp	r4, ip
 80045ca:	dd12      	ble.n	80045f2 <__kernel_rem_pio2f+0x76>
 80045cc:	9b01      	ldr	r3, [sp, #4]
 80045ce:	ac1c      	add	r4, sp, #112	; 0x70
 80045d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80045d4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80045d8:	f04f 0c00 	mov.w	ip, #0
 80045dc:	45d4      	cmp	ip, sl
 80045de:	dc27      	bgt.n	8004630 <__kernel_rem_pio2f+0xb4>
 80045e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80045e4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004888 <__kernel_rem_pio2f+0x30c>
 80045e8:	4627      	mov	r7, r4
 80045ea:	2600      	movs	r6, #0
 80045ec:	e016      	b.n	800461c <__kernel_rem_pio2f+0xa0>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e7dc      	b.n	80045ac <__kernel_rem_pio2f+0x30>
 80045f2:	42e7      	cmn	r7, r4
 80045f4:	bf5d      	ittte	pl
 80045f6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80045fa:	ee07 3a90 	vmovpl	s15, r3
 80045fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004602:	eef0 7a47 	vmovmi.f32	s15, s14
 8004606:	ece6 7a01 	vstmia	r6!, {s15}
 800460a:	3401      	adds	r4, #1
 800460c:	e7dc      	b.n	80045c8 <__kernel_rem_pio2f+0x4c>
 800460e:	ecf9 6a01 	vldmia	r9!, {s13}
 8004612:	ed97 7a00 	vldr	s14, [r7]
 8004616:	eee6 7a87 	vfma.f32	s15, s13, s14
 800461a:	3601      	adds	r6, #1
 800461c:	428e      	cmp	r6, r1
 800461e:	f1a7 0704 	sub.w	r7, r7, #4
 8004622:	ddf4      	ble.n	800460e <__kernel_rem_pio2f+0x92>
 8004624:	eceb 7a01 	vstmia	fp!, {s15}
 8004628:	f10c 0c01 	add.w	ip, ip, #1
 800462c:	3404      	adds	r4, #4
 800462e:	e7d5      	b.n	80045dc <__kernel_rem_pio2f+0x60>
 8004630:	ab08      	add	r3, sp, #32
 8004632:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004636:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004884 <__kernel_rem_pio2f+0x308>
 800463a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004880 <__kernel_rem_pio2f+0x304>
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8004644:	4656      	mov	r6, sl
 8004646:	00b3      	lsls	r3, r6, #2
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	ab58      	add	r3, sp, #352	; 0x160
 800464c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004650:	ac08      	add	r4, sp, #32
 8004652:	ab44      	add	r3, sp, #272	; 0x110
 8004654:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004658:	46a4      	mov	ip, r4
 800465a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800465e:	4637      	mov	r7, r6
 8004660:	2f00      	cmp	r7, #0
 8004662:	f1a0 0004 	sub.w	r0, r0, #4
 8004666:	dc4f      	bgt.n	8004708 <__kernel_rem_pio2f+0x18c>
 8004668:	4628      	mov	r0, r5
 800466a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800466e:	f000 fa8d 	bl	8004b8c <scalbnf>
 8004672:	eeb0 8a40 	vmov.f32	s16, s0
 8004676:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800467a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800467e:	f000 fa43 	bl	8004b08 <floorf>
 8004682:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004686:	eea0 8a67 	vfms.f32	s16, s0, s15
 800468a:	2d00      	cmp	r5, #0
 800468c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004690:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004694:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004698:	ee17 9a90 	vmov	r9, s15
 800469c:	ee38 8a40 	vsub.f32	s16, s16, s0
 80046a0:	dd44      	ble.n	800472c <__kernel_rem_pio2f+0x1b0>
 80046a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80046a6:	ab08      	add	r3, sp, #32
 80046a8:	f1c5 0e08 	rsb	lr, r5, #8
 80046ac:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80046b0:	fa47 f00e 	asr.w	r0, r7, lr
 80046b4:	4481      	add	r9, r0
 80046b6:	fa00 f00e 	lsl.w	r0, r0, lr
 80046ba:	1a3f      	subs	r7, r7, r0
 80046bc:	f1c5 0007 	rsb	r0, r5, #7
 80046c0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80046c4:	4107      	asrs	r7, r0
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	dd3f      	ble.n	800474a <__kernel_rem_pio2f+0x1ce>
 80046ca:	f04f 0e00 	mov.w	lr, #0
 80046ce:	f109 0901 	add.w	r9, r9, #1
 80046d2:	4673      	mov	r3, lr
 80046d4:	4576      	cmp	r6, lr
 80046d6:	dc6b      	bgt.n	80047b0 <__kernel_rem_pio2f+0x234>
 80046d8:	2d00      	cmp	r5, #0
 80046da:	dd04      	ble.n	80046e6 <__kernel_rem_pio2f+0x16a>
 80046dc:	2d01      	cmp	r5, #1
 80046de:	d078      	beq.n	80047d2 <__kernel_rem_pio2f+0x256>
 80046e0:	2d02      	cmp	r5, #2
 80046e2:	f000 8081 	beq.w	80047e8 <__kernel_rem_pio2f+0x26c>
 80046e6:	2f02      	cmp	r7, #2
 80046e8:	d12f      	bne.n	800474a <__kernel_rem_pio2f+0x1ce>
 80046ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80046ee:	ee30 8a48 	vsub.f32	s16, s0, s16
 80046f2:	b353      	cbz	r3, 800474a <__kernel_rem_pio2f+0x1ce>
 80046f4:	4628      	mov	r0, r5
 80046f6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80046fa:	f000 fa47 	bl	8004b8c <scalbnf>
 80046fe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004702:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004706:	e020      	b.n	800474a <__kernel_rem_pio2f+0x1ce>
 8004708:	ee60 7a28 	vmul.f32	s15, s0, s17
 800470c:	3f01      	subs	r7, #1
 800470e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004716:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800471a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800471e:	ecac 0a01 	vstmia	ip!, {s0}
 8004722:	ed90 0a00 	vldr	s0, [r0]
 8004726:	ee37 0a80 	vadd.f32	s0, s15, s0
 800472a:	e799      	b.n	8004660 <__kernel_rem_pio2f+0xe4>
 800472c:	d105      	bne.n	800473a <__kernel_rem_pio2f+0x1be>
 800472e:	1e70      	subs	r0, r6, #1
 8004730:	ab08      	add	r3, sp, #32
 8004732:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004736:	11ff      	asrs	r7, r7, #7
 8004738:	e7c5      	b.n	80046c6 <__kernel_rem_pio2f+0x14a>
 800473a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800473e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	da31      	bge.n	80047ac <__kernel_rem_pio2f+0x230>
 8004748:	2700      	movs	r7, #0
 800474a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	f040 809b 	bne.w	800488c <__kernel_rem_pio2f+0x310>
 8004756:	1e74      	subs	r4, r6, #1
 8004758:	46a4      	mov	ip, r4
 800475a:	2000      	movs	r0, #0
 800475c:	45d4      	cmp	ip, sl
 800475e:	da4a      	bge.n	80047f6 <__kernel_rem_pio2f+0x27a>
 8004760:	2800      	cmp	r0, #0
 8004762:	d07a      	beq.n	800485a <__kernel_rem_pio2f+0x2de>
 8004764:	ab08      	add	r3, sp, #32
 8004766:	3d08      	subs	r5, #8
 8004768:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8081 	beq.w	8004874 <__kernel_rem_pio2f+0x2f8>
 8004772:	4628      	mov	r0, r5
 8004774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004778:	00a5      	lsls	r5, r4, #2
 800477a:	f000 fa07 	bl	8004b8c <scalbnf>
 800477e:	aa44      	add	r2, sp, #272	; 0x110
 8004780:	1d2b      	adds	r3, r5, #4
 8004782:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004884 <__kernel_rem_pio2f+0x308>
 8004786:	18d1      	adds	r1, r2, r3
 8004788:	4622      	mov	r2, r4
 800478a:	2a00      	cmp	r2, #0
 800478c:	f280 80ae 	bge.w	80048ec <__kernel_rem_pio2f+0x370>
 8004790:	4622      	mov	r2, r4
 8004792:	2a00      	cmp	r2, #0
 8004794:	f2c0 80cc 	blt.w	8004930 <__kernel_rem_pio2f+0x3b4>
 8004798:	a944      	add	r1, sp, #272	; 0x110
 800479a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800479e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800487c <__kernel_rem_pio2f+0x300>
 80047a2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004888 <__kernel_rem_pio2f+0x30c>
 80047a6:	2000      	movs	r0, #0
 80047a8:	1aa1      	subs	r1, r4, r2
 80047aa:	e0b6      	b.n	800491a <__kernel_rem_pio2f+0x39e>
 80047ac:	2702      	movs	r7, #2
 80047ae:	e78c      	b.n	80046ca <__kernel_rem_pio2f+0x14e>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	b94b      	cbnz	r3, 80047c8 <__kernel_rem_pio2f+0x24c>
 80047b4:	b118      	cbz	r0, 80047be <__kernel_rem_pio2f+0x242>
 80047b6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80047ba:	6020      	str	r0, [r4, #0]
 80047bc:	2001      	movs	r0, #1
 80047be:	f10e 0e01 	add.w	lr, lr, #1
 80047c2:	3404      	adds	r4, #4
 80047c4:	4603      	mov	r3, r0
 80047c6:	e785      	b.n	80046d4 <__kernel_rem_pio2f+0x158>
 80047c8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80047cc:	6020      	str	r0, [r4, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	e7f5      	b.n	80047be <__kernel_rem_pio2f+0x242>
 80047d2:	1e74      	subs	r4, r6, #1
 80047d4:	a808      	add	r0, sp, #32
 80047d6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80047da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80047de:	f10d 0c20 	add.w	ip, sp, #32
 80047e2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80047e6:	e77e      	b.n	80046e6 <__kernel_rem_pio2f+0x16a>
 80047e8:	1e74      	subs	r4, r6, #1
 80047ea:	a808      	add	r0, sp, #32
 80047ec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80047f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80047f4:	e7f3      	b.n	80047de <__kernel_rem_pio2f+0x262>
 80047f6:	ab08      	add	r3, sp, #32
 80047f8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80047fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004800:	4318      	orrs	r0, r3
 8004802:	e7ab      	b.n	800475c <__kernel_rem_pio2f+0x1e0>
 8004804:	f10c 0c01 	add.w	ip, ip, #1
 8004808:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800480c:	2c00      	cmp	r4, #0
 800480e:	d0f9      	beq.n	8004804 <__kernel_rem_pio2f+0x288>
 8004810:	9b05      	ldr	r3, [sp, #20]
 8004812:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004816:	eb0d 0003 	add.w	r0, sp, r3
 800481a:	9b01      	ldr	r3, [sp, #4]
 800481c:	18f4      	adds	r4, r6, r3
 800481e:	ab1c      	add	r3, sp, #112	; 0x70
 8004820:	1c77      	adds	r7, r6, #1
 8004822:	384c      	subs	r0, #76	; 0x4c
 8004824:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004828:	4466      	add	r6, ip
 800482a:	42be      	cmp	r6, r7
 800482c:	f6ff af0b 	blt.w	8004646 <__kernel_rem_pio2f+0xca>
 8004830:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004834:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004840:	f04f 0c00 	mov.w	ip, #0
 8004844:	ece4 7a01 	vstmia	r4!, {s15}
 8004848:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004888 <__kernel_rem_pio2f+0x30c>
 800484c:	46a1      	mov	r9, r4
 800484e:	458c      	cmp	ip, r1
 8004850:	dd07      	ble.n	8004862 <__kernel_rem_pio2f+0x2e6>
 8004852:	ece0 7a01 	vstmia	r0!, {s15}
 8004856:	3701      	adds	r7, #1
 8004858:	e7e7      	b.n	800482a <__kernel_rem_pio2f+0x2ae>
 800485a:	9804      	ldr	r0, [sp, #16]
 800485c:	f04f 0c01 	mov.w	ip, #1
 8004860:	e7d2      	b.n	8004808 <__kernel_rem_pio2f+0x28c>
 8004862:	ecfe 6a01 	vldmia	lr!, {s13}
 8004866:	ed39 7a01 	vldmdb	r9!, {s14}
 800486a:	f10c 0c01 	add.w	ip, ip, #1
 800486e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004872:	e7ec      	b.n	800484e <__kernel_rem_pio2f+0x2d2>
 8004874:	3c01      	subs	r4, #1
 8004876:	e775      	b.n	8004764 <__kernel_rem_pio2f+0x1e8>
 8004878:	08005080 	.word	0x08005080
 800487c:	08005054 	.word	0x08005054
 8004880:	43800000 	.word	0x43800000
 8004884:	3b800000 	.word	0x3b800000
 8004888:	00000000 	.word	0x00000000
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	eeb0 0a48 	vmov.f32	s0, s16
 8004892:	1a98      	subs	r0, r3, r2
 8004894:	f000 f97a 	bl	8004b8c <scalbnf>
 8004898:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004880 <__kernel_rem_pio2f+0x304>
 800489c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80048a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a4:	db19      	blt.n	80048da <__kernel_rem_pio2f+0x35e>
 80048a6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004884 <__kernel_rem_pio2f+0x308>
 80048aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80048ae:	aa08      	add	r2, sp, #32
 80048b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b4:	1c74      	adds	r4, r6, #1
 80048b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ba:	3508      	adds	r5, #8
 80048bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80048c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048c8:	ee10 3a10 	vmov	r3, s0
 80048cc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80048d0:	ee17 3a90 	vmov	r3, s15
 80048d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80048d8:	e74b      	b.n	8004772 <__kernel_rem_pio2f+0x1f6>
 80048da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048de:	aa08      	add	r2, sp, #32
 80048e0:	ee10 3a10 	vmov	r3, s0
 80048e4:	4634      	mov	r4, r6
 80048e6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80048ea:	e742      	b.n	8004772 <__kernel_rem_pio2f+0x1f6>
 80048ec:	a808      	add	r0, sp, #32
 80048ee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80048f2:	9001      	str	r0, [sp, #4]
 80048f4:	ee07 0a90 	vmov	s15, r0
 80048f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048fc:	3a01      	subs	r2, #1
 80048fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004902:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004906:	ed61 7a01 	vstmdb	r1!, {s15}
 800490a:	e73e      	b.n	800478a <__kernel_rem_pio2f+0x20e>
 800490c:	ecfc 6a01 	vldmia	ip!, {s13}
 8004910:	ecb6 7a01 	vldmia	r6!, {s14}
 8004914:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004918:	3001      	adds	r0, #1
 800491a:	4550      	cmp	r0, sl
 800491c:	dc01      	bgt.n	8004922 <__kernel_rem_pio2f+0x3a6>
 800491e:	4288      	cmp	r0, r1
 8004920:	ddf4      	ble.n	800490c <__kernel_rem_pio2f+0x390>
 8004922:	a858      	add	r0, sp, #352	; 0x160
 8004924:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004928:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800492c:	3a01      	subs	r2, #1
 800492e:	e730      	b.n	8004792 <__kernel_rem_pio2f+0x216>
 8004930:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004932:	2a02      	cmp	r2, #2
 8004934:	dc09      	bgt.n	800494a <__kernel_rem_pio2f+0x3ce>
 8004936:	2a00      	cmp	r2, #0
 8004938:	dc2a      	bgt.n	8004990 <__kernel_rem_pio2f+0x414>
 800493a:	d043      	beq.n	80049c4 <__kernel_rem_pio2f+0x448>
 800493c:	f009 0007 	and.w	r0, r9, #7
 8004940:	b059      	add	sp, #356	; 0x164
 8004942:	ecbd 8b04 	vpop	{d8-d9}
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800494c:	2b03      	cmp	r3, #3
 800494e:	d1f5      	bne.n	800493c <__kernel_rem_pio2f+0x3c0>
 8004950:	ab30      	add	r3, sp, #192	; 0xc0
 8004952:	442b      	add	r3, r5
 8004954:	461a      	mov	r2, r3
 8004956:	4619      	mov	r1, r3
 8004958:	4620      	mov	r0, r4
 800495a:	2800      	cmp	r0, #0
 800495c:	f1a1 0104 	sub.w	r1, r1, #4
 8004960:	dc51      	bgt.n	8004a06 <__kernel_rem_pio2f+0x48a>
 8004962:	4621      	mov	r1, r4
 8004964:	2901      	cmp	r1, #1
 8004966:	f1a2 0204 	sub.w	r2, r2, #4
 800496a:	dc5c      	bgt.n	8004a26 <__kernel_rem_pio2f+0x4aa>
 800496c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004888 <__kernel_rem_pio2f+0x30c>
 8004970:	3304      	adds	r3, #4
 8004972:	2c01      	cmp	r4, #1
 8004974:	dc67      	bgt.n	8004a46 <__kernel_rem_pio2f+0x4ca>
 8004976:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800497a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800497e:	2f00      	cmp	r7, #0
 8004980:	d167      	bne.n	8004a52 <__kernel_rem_pio2f+0x4d6>
 8004982:	edc8 6a00 	vstr	s13, [r8]
 8004986:	ed88 7a01 	vstr	s14, [r8, #4]
 800498a:	edc8 7a02 	vstr	s15, [r8, #8]
 800498e:	e7d5      	b.n	800493c <__kernel_rem_pio2f+0x3c0>
 8004990:	aa30      	add	r2, sp, #192	; 0xc0
 8004992:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004888 <__kernel_rem_pio2f+0x30c>
 8004996:	4413      	add	r3, r2
 8004998:	4622      	mov	r2, r4
 800499a:	2a00      	cmp	r2, #0
 800499c:	da24      	bge.n	80049e8 <__kernel_rem_pio2f+0x46c>
 800499e:	b34f      	cbz	r7, 80049f4 <__kernel_rem_pio2f+0x478>
 80049a0:	eef1 7a47 	vneg.f32	s15, s14
 80049a4:	edc8 7a00 	vstr	s15, [r8]
 80049a8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80049ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049b0:	aa31      	add	r2, sp, #196	; 0xc4
 80049b2:	2301      	movs	r3, #1
 80049b4:	429c      	cmp	r4, r3
 80049b6:	da20      	bge.n	80049fa <__kernel_rem_pio2f+0x47e>
 80049b8:	b10f      	cbz	r7, 80049be <__kernel_rem_pio2f+0x442>
 80049ba:	eef1 7a67 	vneg.f32	s15, s15
 80049be:	edc8 7a01 	vstr	s15, [r8, #4]
 80049c2:	e7bb      	b.n	800493c <__kernel_rem_pio2f+0x3c0>
 80049c4:	aa30      	add	r2, sp, #192	; 0xc0
 80049c6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004888 <__kernel_rem_pio2f+0x30c>
 80049ca:	4413      	add	r3, r2
 80049cc:	2c00      	cmp	r4, #0
 80049ce:	da05      	bge.n	80049dc <__kernel_rem_pio2f+0x460>
 80049d0:	b10f      	cbz	r7, 80049d6 <__kernel_rem_pio2f+0x45a>
 80049d2:	eef1 7a67 	vneg.f32	s15, s15
 80049d6:	edc8 7a00 	vstr	s15, [r8]
 80049da:	e7af      	b.n	800493c <__kernel_rem_pio2f+0x3c0>
 80049dc:	ed33 7a01 	vldmdb	r3!, {s14}
 80049e0:	3c01      	subs	r4, #1
 80049e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049e6:	e7f1      	b.n	80049cc <__kernel_rem_pio2f+0x450>
 80049e8:	ed73 7a01 	vldmdb	r3!, {s15}
 80049ec:	3a01      	subs	r2, #1
 80049ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049f2:	e7d2      	b.n	800499a <__kernel_rem_pio2f+0x41e>
 80049f4:	eef0 7a47 	vmov.f32	s15, s14
 80049f8:	e7d4      	b.n	80049a4 <__kernel_rem_pio2f+0x428>
 80049fa:	ecb2 7a01 	vldmia	r2!, {s14}
 80049fe:	3301      	adds	r3, #1
 8004a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a04:	e7d6      	b.n	80049b4 <__kernel_rem_pio2f+0x438>
 8004a06:	edd1 7a00 	vldr	s15, [r1]
 8004a0a:	edd1 6a01 	vldr	s13, [r1, #4]
 8004a0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004a12:	3801      	subs	r0, #1
 8004a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a18:	ed81 7a00 	vstr	s14, [r1]
 8004a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a20:	edc1 7a01 	vstr	s15, [r1, #4]
 8004a24:	e799      	b.n	800495a <__kernel_rem_pio2f+0x3de>
 8004a26:	edd2 7a00 	vldr	s15, [r2]
 8004a2a:	edd2 6a01 	vldr	s13, [r2, #4]
 8004a2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004a32:	3901      	subs	r1, #1
 8004a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a38:	ed82 7a00 	vstr	s14, [r2]
 8004a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a40:	edc2 7a01 	vstr	s15, [r2, #4]
 8004a44:	e78e      	b.n	8004964 <__kernel_rem_pio2f+0x3e8>
 8004a46:	ed33 7a01 	vldmdb	r3!, {s14}
 8004a4a:	3c01      	subs	r4, #1
 8004a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a50:	e78f      	b.n	8004972 <__kernel_rem_pio2f+0x3f6>
 8004a52:	eef1 6a66 	vneg.f32	s13, s13
 8004a56:	eeb1 7a47 	vneg.f32	s14, s14
 8004a5a:	edc8 6a00 	vstr	s13, [r8]
 8004a5e:	ed88 7a01 	vstr	s14, [r8, #4]
 8004a62:	eef1 7a67 	vneg.f32	s15, s15
 8004a66:	e790      	b.n	800498a <__kernel_rem_pio2f+0x40e>

08004a68 <__kernel_sinf>:
 8004a68:	ee10 3a10 	vmov	r3, s0
 8004a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004a74:	da04      	bge.n	8004a80 <__kernel_sinf+0x18>
 8004a76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004a7a:	ee17 3a90 	vmov	r3, s15
 8004a7e:	b35b      	cbz	r3, 8004ad8 <__kernel_sinf+0x70>
 8004a80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004a84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004adc <__kernel_sinf+0x74>
 8004a88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004ae0 <__kernel_sinf+0x78>
 8004a8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004a90:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004ae4 <__kernel_sinf+0x7c>
 8004a94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004a98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004ae8 <__kernel_sinf+0x80>
 8004a9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004aa0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004aec <__kernel_sinf+0x84>
 8004aa4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004aa8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004aac:	b930      	cbnz	r0, 8004abc <__kernel_sinf+0x54>
 8004aae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004af0 <__kernel_sinf+0x88>
 8004ab2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004ab6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004aba:	4770      	bx	lr
 8004abc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004ac0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004ac4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004ac8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004acc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004af4 <__kernel_sinf+0x8c>
 8004ad0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004ad4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2f2ec9d3 	.word	0x2f2ec9d3
 8004ae0:	b2d72f34 	.word	0xb2d72f34
 8004ae4:	3638ef1b 	.word	0x3638ef1b
 8004ae8:	b9500d01 	.word	0xb9500d01
 8004aec:	3c088889 	.word	0x3c088889
 8004af0:	be2aaaab 	.word	0xbe2aaaab
 8004af4:	3e2aaaab 	.word	0x3e2aaaab

08004af8 <fabsf>:
 8004af8:	ee10 3a10 	vmov	r3, s0
 8004afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b00:	ee00 3a10 	vmov	s0, r3
 8004b04:	4770      	bx	lr
	...

08004b08 <floorf>:
 8004b08:	ee10 3a10 	vmov	r3, s0
 8004b0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004b10:	3a7f      	subs	r2, #127	; 0x7f
 8004b12:	2a16      	cmp	r2, #22
 8004b14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b18:	dc2a      	bgt.n	8004b70 <floorf+0x68>
 8004b1a:	2a00      	cmp	r2, #0
 8004b1c:	da11      	bge.n	8004b42 <floorf+0x3a>
 8004b1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004b80 <floorf+0x78>
 8004b22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	dd05      	ble.n	8004b3c <floorf+0x34>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da23      	bge.n	8004b7c <floorf+0x74>
 8004b34:	4a13      	ldr	r2, [pc, #76]	; (8004b84 <floorf+0x7c>)
 8004b36:	2900      	cmp	r1, #0
 8004b38:	bf18      	it	ne
 8004b3a:	4613      	movne	r3, r2
 8004b3c:	ee00 3a10 	vmov	s0, r3
 8004b40:	4770      	bx	lr
 8004b42:	4911      	ldr	r1, [pc, #68]	; (8004b88 <floorf+0x80>)
 8004b44:	4111      	asrs	r1, r2
 8004b46:	420b      	tst	r3, r1
 8004b48:	d0fa      	beq.n	8004b40 <floorf+0x38>
 8004b4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004b80 <floorf+0x78>
 8004b4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	ddef      	ble.n	8004b3c <floorf+0x34>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bfbe      	ittt	lt
 8004b60:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004b64:	fa40 f202 	asrlt.w	r2, r0, r2
 8004b68:	189b      	addlt	r3, r3, r2
 8004b6a:	ea23 0301 	bic.w	r3, r3, r1
 8004b6e:	e7e5      	b.n	8004b3c <floorf+0x34>
 8004b70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004b74:	d3e4      	bcc.n	8004b40 <floorf+0x38>
 8004b76:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004b7a:	4770      	bx	lr
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e7dd      	b.n	8004b3c <floorf+0x34>
 8004b80:	7149f2ca 	.word	0x7149f2ca
 8004b84:	bf800000 	.word	0xbf800000
 8004b88:	007fffff 	.word	0x007fffff

08004b8c <scalbnf>:
 8004b8c:	ee10 3a10 	vmov	r3, s0
 8004b90:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004b94:	d025      	beq.n	8004be2 <scalbnf+0x56>
 8004b96:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004b9a:	d302      	bcc.n	8004ba2 <scalbnf+0x16>
 8004b9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004ba0:	4770      	bx	lr
 8004ba2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004ba6:	d122      	bne.n	8004bee <scalbnf+0x62>
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <scalbnf+0xc8>)
 8004baa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004c58 <scalbnf+0xcc>
 8004bae:	4298      	cmp	r0, r3
 8004bb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004bb4:	db16      	blt.n	8004be4 <scalbnf+0x58>
 8004bb6:	ee10 3a10 	vmov	r3, s0
 8004bba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004bbe:	3a19      	subs	r2, #25
 8004bc0:	4402      	add	r2, r0
 8004bc2:	2afe      	cmp	r2, #254	; 0xfe
 8004bc4:	dd15      	ble.n	8004bf2 <scalbnf+0x66>
 8004bc6:	ee10 3a10 	vmov	r3, s0
 8004bca:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004c5c <scalbnf+0xd0>
 8004bce:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004c60 <scalbnf+0xd4>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	eeb0 7a67 	vmov.f32	s14, s15
 8004bd8:	bfb8      	it	lt
 8004bda:	eef0 7a66 	vmovlt.f32	s15, s13
 8004bde:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004be2:	4770      	bx	lr
 8004be4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004c64 <scalbnf+0xd8>
 8004be8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004bec:	4770      	bx	lr
 8004bee:	0dd2      	lsrs	r2, r2, #23
 8004bf0:	e7e6      	b.n	8004bc0 <scalbnf+0x34>
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	dd06      	ble.n	8004c04 <scalbnf+0x78>
 8004bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bfa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004bfe:	ee00 3a10 	vmov	s0, r3
 8004c02:	4770      	bx	lr
 8004c04:	f112 0f16 	cmn.w	r2, #22
 8004c08:	da1a      	bge.n	8004c40 <scalbnf+0xb4>
 8004c0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c0e:	4298      	cmp	r0, r3
 8004c10:	ee10 3a10 	vmov	r3, s0
 8004c14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c18:	dd0a      	ble.n	8004c30 <scalbnf+0xa4>
 8004c1a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004c5c <scalbnf+0xd0>
 8004c1e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004c60 <scalbnf+0xd4>
 8004c22:	eef0 7a40 	vmov.f32	s15, s0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf18      	it	ne
 8004c2a:	eeb0 0a47 	vmovne.f32	s0, s14
 8004c2e:	e7db      	b.n	8004be8 <scalbnf+0x5c>
 8004c30:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004c64 <scalbnf+0xd8>
 8004c34:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004c68 <scalbnf+0xdc>
 8004c38:	eef0 7a40 	vmov.f32	s15, s0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	e7f3      	b.n	8004c28 <scalbnf+0x9c>
 8004c40:	3219      	adds	r2, #25
 8004c42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c46:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004c4a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004c6c <scalbnf+0xe0>
 8004c4e:	ee07 3a10 	vmov	s14, r3
 8004c52:	e7c4      	b.n	8004bde <scalbnf+0x52>
 8004c54:	ffff3cb0 	.word	0xffff3cb0
 8004c58:	4c000000 	.word	0x4c000000
 8004c5c:	7149f2ca 	.word	0x7149f2ca
 8004c60:	f149f2ca 	.word	0xf149f2ca
 8004c64:	0da24260 	.word	0x0da24260
 8004c68:	8da24260 	.word	0x8da24260
 8004c6c:	33000000 	.word	0x33000000

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
